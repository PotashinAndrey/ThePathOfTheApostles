generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  DELETED
}

enum MessageSender {
  USER
  APOSTLE
}

// 1. Сущность пользователя
model User {
  id                  String      @id @default(cuid())
  name                String
  passwordHash        String      // Хеш
  salt                String      // Соль
  email               String      @unique
  joinDate            DateTime    @default(now()) // Дата регистрации
  currentSubscription String?     // Текущий план подписки
  lastActiveDate      DateTime    @default(now()) // Дата последней активности
  streak              Int         @default(0) // Стрик в днях
  avatar              String?     // Ссылка на изображение
  status              UserStatus  @default(ACTIVE) // Статус
  metaId              String?     @unique // meta - id сущности UserMeta
  
  // Relations
  meta                UserMeta?           @relation(fields: [metaId], references: [id])
  chats               Chat[]
  taskWrapperResults  TaskWrapperResult[]
  userNotes           UserNote[]
  apostleRelations    UserApostleRelation[]

  @@map("users")
}

// 2. Сущность пути
model Path {
  id          String      @id @default(cuid())
  name        String      // Название
  description String      @db.Text // Описание
  icon        String?     // Иконка - ссылка
  challenges  String[]    // Упорядоченный массив ID испытаний
  
  // Relations
  chats       Chat[]

  @@map("paths")
}

// 3. Сущность испытания (группирует задания апостола)
model Challenge {
  id           String   @id @default(cuid())
  name         String   // Название испытания
  description  String?  @db.Text // Описание испытания
  apostleId    String   // ID апостола которому принадлежит испытание
  orderedTasks String[] // Упорядоченный массив ID TaskWrapper
  
  // Relations
  apostle      Apostle  @relation(fields: [apostleId], references: [id])
  chats        Chat[]
  chatMessages ChatMessage[]

  @@map("challenges")
}

// 4. Сущность обертки задания
model TaskWrapper {
  id          String  @id @default(cuid())
  challengeId String  // ID испытания к которому принадлежит обертка
  taskId      String  // ID задания которое оборачивает эта сущность  
  icon        String? // Иконка/картинка если есть
  order       Int     @default(0) // Число которое определяет порядок заданий в испытании
  apostleId   String? // Если есть апостол для этого задания (переопределение)
  
  // Relations
  task        Task     @relation(fields: [taskId], references: [id])
  apostle     Apostle? @relation(fields: [apostleId], references: [id])
  results     TaskWrapperResult[]

  @@map("task_wrappers")
}

// 5. Сущность базового задания
model Task {
  id          String        @id @default(cuid())
  name        String        // Название задания
  description String        @db.Text // Описание задания
  
  // Relations
  wrappers    TaskWrapper[]

  @@map("tasks")
}

// 6. Сущность апостола
model Apostle {
  id               String    @id @default(cuid())
  name             String    // Имя
  title            String    // Титул
  description      String    @db.Text // Описание
  archetype        String    // Архетип
  virtueId         String?   // Добродетель - id ссылка на навык
  personality      String    @db.Text
  icon             String    // Иконка
  color            String    // Цвет (hex)
  systemPrompt     String    @db.Text
  phraseSetsId     String?   // ID сущности медиатора с наборами цитат
  
  // Relations
  virtue           Skill?              @relation(fields: [virtueId], references: [id])
  challenges       Challenge[]
  taskWrappers     TaskWrapper[]
  chats            Chat[]
  chatMessages     ChatMessage[]
  apostleRelations UserApostleRelation[]
  phraseSets       ApostlePhraseSets?  @relation(fields: [phraseSetsId], references: [id])

  @@map("apostles")
}

// 7. Сущность чата
model Chat {
  id                    String     @id @default(cuid())
  name                  String     // Название чата
  userId                String
  apostleId             String
  pathId                String?    // Если есть связь с конкретным путем
  currentChallengeId    String?    // Если есть связь с конкретным текущим испытанием
  phraseSetsId          String?    // Ссылка на массив id наборов фраз
  currentChatPresetId   String?    // ID текущего пресета темы чата
  
  // Relations
  user                  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  apostle               Apostle    @relation(fields: [apostleId], references: [id])
  path                  Path?      @relation(fields: [pathId], references: [id])
  currentChallenge      Challenge? @relation(fields: [currentChallengeId], references: [id])
  chatPreset            ChatPreset? @relation(fields: [currentChatPresetId], references: [id])
  messages              ChatMessage[]

  @@map("chats")
}

// 8. Сущность подписки
model Subscription {
  id    String @id @default(cuid())
  name  String // Название
  price Float  // Цена

  @@map("subscriptions")
}

// 9. Сущность достижения
model Achievement {
  id          String @id @default(cuid())
  name        String // Название
  description String @db.Text // Описание
  icon        String // Иконка
  
  // Relations
  userAchievements UserAchievementsList[]

  @@map("achievements")
}

// 10. Сущность фичи для фичатоглинга
model Feature {
  id      String  @id @default(cuid())
  feature String  @unique // Название фичи
  enabled Boolean @default(false) // Включена ли

  @@map("features")
}

// 11. Сущность навыка - читай добродетель апостола
model Skill {
  id          String    @id @default(cuid())
  name        String    // Название
  description String    @db.Text // Описание
  
  // Relations
  apostles    Apostle[]

  @@map("skills")
}

// 12. Сущность набора фраз
model PhraseSet {
  id       String   @id @default(cuid())
  phraseIds String[] // Массив id фраз
  
  // Relations
  apostlePhraseSets ApostlePhraseSets[]

  @@map("phrase_sets")
}

// Медиатор для связи апостола и наборов фраз
model ApostlePhraseSets {
  id           String      @id @default(cuid())
  phraseSetIds String[]    // Массив ID наборов фраз
  
  // Relations
  apostles     Apostle[]
  phraseSets   PhraseSet[]

  @@map("apostle_phrase_sets")
}

// 13. Сущность пресета для чата
model ChatPreset {
  id           String @id @default(cuid())
  textPrompt   String @db.Text // Текстовый промпт для ИИ
  
  // Relations
  chats        Chat[]

  @@map("chat_presets")
}

// 14. Сущность результата выполнения TaskWrapper
model TaskWrapperResult {
  id            String      @id @default(cuid())
  taskWrapperId String      // ID обертки задания
  userId        String      // ID пользователя
  content       String      @db.Text // Текст / ссылка на файл
  createdAt     DateTime    @default(now())
  result        String      @db.Text // Результат выполнения задания от ИИ
  
  // Relations
  taskWrapper   TaskWrapper @relation(fields: [taskWrapperId], references: [id])
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("task_wrapper_results")
}

// 15. Мета пользователя
model UserMeta {
  id                String   @id @default(cuid())
  completedTasks    String[] // Список выполненных ID TaskWrapper
  activeTasks       String[] // Список активных ID TaskWrapper  
  pathsId           String?  @unique // ID медиатора UserPathsList
  userChatsList     String[] // Список ID чатов пользователя
  
  // Relations
  user              User?
  paths             UserPathsList? @relation(fields: [pathsId], references: [id])

  @@map("user_meta")
}

// 16. UserPathsList
model UserPathsList {
  id                String   @id @default(cuid())
  userId            String
  activePathIds     String[] // Активные пути
  completedPathIds  String[] // Завершенные пути
  updatedAt         DateTime @updatedAt
  
  // Relations
  userMeta          UserMeta[]

  @@map("user_paths_list")
}

// 17. UserApostleRelation - сущность отношений пользователя с апостолом
model UserApostleRelation {
  id                String   @id @default(cuid())
  userId            String
  apostleId         String
  unlockedAt        DateTime @default(now())
  relationshipLevel Int      @default(1)
  lastInteraction   DateTime @default(now())
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  apostle           Apostle  @relation(fields: [apostleId], references: [id])
  
  @@unique([userId, apostleId])
  @@map("user_apostle_relations")
}

// 18. Сущность фразы
model Phrase {
  id      String   @id @default(cuid())
  content String   @db.Text // Текст
  source  String?  // Источник
  chapter String?  // Глава такая-то строки такие-то
  tags    String[] // Теги (вера, прощение и т.д.)

  @@map("phrases")
}

// 19. ChatMessage - сущность сообщения чата
model ChatMessage {
  id                  String        @id @default(cuid())
  chatId              String
  apostleId           String?       // ID апостола для связи
  sender              MessageSender // 'user' | 'apostle'
  content             String        @db.Text
  voiceUrl            String?       // URL голосового сообщения
  relatedChallengeId  String?       // Связь с испытанием
  createdAt           DateTime      @default(now())
  metadata            Json?         // JSONB — тема, эмоции, теги
  
  // Relations
  chat                Chat          @relation(fields: [chatId], references: [id], onDelete: Cascade)
  apostle             Apostle?      @relation(fields: [apostleId], references: [id])
  relatedChallenge    Challenge?    @relation(fields: [relatedChallengeId], references: [id])

  @@map("chat_messages")
}

// 20. Заметка о пользователе
model UserNote {
  id     String   @id @default(cuid())
  userId String
  date   DateTime @default(now())
  mood   String?  // Настроение
  note   String?  @db.Text // Заметка
  
  // Relations
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_notes")
}

// 21. UserAchievementsList - список достижений пользователя
model UserAchievementsList {
  id             String        @id @default(cuid())
  userId         String
  achievementIds String[]      // Массив ID достижений
  
  // Relations
  achievements   Achievement[]

  @@map("user_achievements_list")
}

// ===== ОТКЛЮЧЕННАЯ СИСТЕМА ЕЖЕДНЕВНЫХ ЗАДАНИЙ =====
// Система DailyTask и UserDailyTask отключена
// Будет переработана позже на основе новой архитектуры

// model DailyTask {
//   id                 String          @id @default(cuid())
//   name               String          
//   description        String          @db.Text 
//   apostleId          String          
//   dayNumber          Int             
//   motivationalPhrase String          @db.Text 
//   createdAt          DateTime        @default(now())
//   
//   apostle            Apostle         @relation(fields: [apostleId], references: [id])
//   userTasks          UserDailyTask[]
//   
//   @@unique([apostleId, dayNumber])
//   @@map("daily_tasks")
// }

// model UserDailyTask {
//   id           String                     @id @default(cuid())
//   userId       String
//   dailyTaskId  String
//   status       UserDailyTaskStatus        @default(PENDING)
//   activatedAt  DateTime?                  
//   completedAt  DateTime?                  
//   skippedAt    DateTime?                  
//   content      String?                    @db.Text 
//   notes        String?                    @db.Text 
//   createdAt    DateTime                   @default(now())
//   updatedAt    DateTime                   @updatedAt
//   
//   user         User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
//   dailyTask    DailyTask                  @relation(fields: [dailyTaskId], references: [id])
//   
//   @@unique([userId, dailyTaskId])
//   @@map("user_daily_tasks")
// }

// enum UserDailyTaskStatus {
//   PENDING   
//   ACTIVE    
//   COMPLETED 
//   SKIPPED   
// }
