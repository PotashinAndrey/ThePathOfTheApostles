import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function createNewArchitecture() {
  console.log('üöÄ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É Task->TaskWrapper->Challenge->Path...');

  try {
    // 1. –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏–π –ü–µ—Ç—Ä–∞ (–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ seed-daily-tasks.ts)
    const peterTasksData = [
      {
        name: '–ü—Ä–∏–Ω—è—Ç–∏–µ –≤—ã–∑–æ–≤–∞',
        description: '–ù–∞–π–¥–∏ –æ–¥–Ω—É –ø—Ä–∏–≤—ã—á–∫—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±–µ –º–µ—à–∞–µ—Ç, –∏ –æ—Ç–∫–∞–∂–∏—Å—å –æ—Ç –Ω–µ—ë –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ü—Å–µ—Ç–µ–π, —Å–ª–∞–¥–æ—Å—Ç–∏ –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ. –ì–ª–∞–≤–Ω–æ–µ - –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∏ –ø—Ä–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è.',
        dayNumber: 1,
        motivationalPhrase: '–ü—É—Ç—å –≤ —Ç—ã—Å—è—á—É –º–∏–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞. –°–¥–µ–ª–∞–π –µ–≥–æ —Å–µ–≥–æ–¥–Ω—è.'
      },
      {
        name: '–¢–µ–ª–æ - —Ö—Ä–∞–º —Å–∏–ª—ã',
        description: '–í—ã–ø–æ–ª–Ω–∏ –ø—Ä–æ—Å—Ç–æ–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—Ä–µ–±—É–µ—Ç –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏: 50 –æ—Ç–∂–∏–º–∞–Ω–∏–π (–º–æ–∂–Ω–æ —Å –∫–æ–ª–µ–Ω), –ø–ª–∞–Ω–∫–∞ –Ω–∞ 2 –º–∏–Ω—É—Ç—ã –∏–ª–∏ 500 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è. –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–∏—à–∫–æ–º –ª–µ–≥–∫–æ - —É–≤–µ–ª–∏—á—å –Ω–∞–≥—Ä—É–∑–∫—É. –ï—Å–ª–∏ —Ç—è–∂–µ–ª–æ - —Å–¥–µ–ª–∞–π –ø–æ–ª–æ–≤–∏–Ω—É, –Ω–æ –Ω–µ —Å–¥–∞–≤–∞–π—Å—è.',
        dayNumber: 2,
        motivationalPhrase: '–¢–µ–ª–æ –º–æ–∂–µ—Ç –≤—ã–Ω–µ—Å—Ç–∏ –ø–æ—á—Ç–∏ –≤—Å—ë. –≠—Ç–æ —Ä–∞–∑—É–º –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å.'
      },
      {
        name: '–ü–æ—Ä—è–¥–æ–∫ –∏–∑ —Ö–∞–æ—Å–∞',
        description: '–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –±–µ—Å–ø–æ—Ä—è–¥–æ—á–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏ (—Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª, —à–∫–∞—Ñ, –ø–∞–ø–∫—É —Å —Ñ–∞–π–ª–∞–º–∏) –∏ –ø—Ä–∏–≤–µ–¥–∏ –µ–≥–æ –≤ –ø–æ–ª–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫. –î–µ–ª–∞–π —ç—Ç–æ –º–µ–¥–ª–µ–Ω–Ω–æ, –≤–¥—É–º—á–∏–≤–æ, –Ω–∞—Å–ª–∞–∂–¥–∞—è—Å—å –ø—Ä–æ—Ü–µ—Å—Å–æ–º —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.',
        dayNumber: 3,
        motivationalPhrase: '–í–Ω–µ—à–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫ —Ä–æ–∂–¥–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ–∫–æ–π.'
      },
      {
        name: '–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –º–æ–ª—á–∞–Ω–∏–µ–º',
        description: '–í —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤ (–≤—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è) –Ω–µ –≥–æ–≤–æ—Ä–∏ –Ω–∏ —Å–ª–æ–≤–∞, –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ. –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ —Å–æ–±–æ–π –∏ –æ–∫—Ä—É–∂–∞—é—â–∏–º–∏. –ó–∞–ø–∏—à–∏ —Å–≤–æ–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è.',
        dayNumber: 4,
        motivationalPhrase: '–í —Ç–∏—à–∏–Ω–µ —Ä–æ–∂–¥–∞–µ—Ç—Å—è –º—É–¥—Ä–æ—Å—Ç—å, –≤ –º–æ–ª—á–∞–Ω–∏–∏ –∫—Ä–µ–ø–Ω–µ—Ç —Å–∏–ª–∞.'
      },
      {
        name: '–ú–æ—Å—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–ø–∞—Å—Ç—å',
        description: '–ù–∞–π–¥–∏ —á–µ–ª–æ–≤–µ–∫–∞, —Å –∫–æ—Ç–æ—Ä—ã–º —É —Ç–µ–±—è –µ—Å—Ç—å –Ω–µ–¥–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç. –°–¥–µ–ª–∞–π –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –ø—Ä–∏–º–∏—Ä–µ–Ω–∏—é: –ø–æ–∑–≤–æ–Ω–∏, –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤—Å—Ç—Ä–µ—Ç—å—Å—è –ª–∏—á–Ω–æ. –ù–µ –æ–∂–∏–¥–∞–π –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ - –≤–∞–∂–Ω–∞ —Ç–≤–æ—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–æ—Ç—è–Ω—É—Ç—å —Ä—É–∫—É.',
        dayNumber: 5,
        motivationalPhrase: '–°—Ç–æ–π–∫–æ—Å—Ç—å - –Ω–µ –∫–æ–≥–¥–∞ —Ç—ã —Å—Ç–æ–∏—à—å –æ–¥–∏–Ω, –∞ –∫–æ–≥–¥–∞ —Ç—ã –ø—Ä–æ—Ç—è–≥–∏–≤–∞–µ—à—å —Ä—É–∫—É –¥—Ä—É–≥–æ–º—É.'
      },
      {
        name: '–ö–æ—Ä–Ω–∏ –≥–ª—É–±–æ–∫–æ–π –≤–µ—Ä—ã',
        description: '–ü—Ä–æ–≤–µ–¥–∏ 15 –º–∏–Ω—É—Ç –≤ —Ç–∏—à–∏–Ω–µ, —Ä–∞–∑–º—ã—à–ª—è—è –æ —Ç–æ–º, —á—Ç–æ –¥–ª—è —Ç–µ–±—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ –≤ –∂–∏–∑–Ω–∏. –ú–æ–∂–µ—à—å –º–æ–ª–∏—Ç—å—Å—è, –º–µ–¥–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥—É–º–∞—Ç—å. –ó–∞–ø–∏—à–∏ 3 –≥–ª–∞–≤–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Ç–≤–æ–∏–º–∏ –æ–ø–æ—Ä–∞–º–∏ –≤ —Ç—Ä—É–¥–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞.',
        dayNumber: 6,
        motivationalPhrase: '–ó–Ω–∞–π, –≤–æ —á—Ç–æ —Ç—ã –≤–µ—Ä–∏—à—å, —Ç–æ–≥–¥–∞ –±—É—Ä—è –Ω–µ —Å–º–æ–∂–µ—Ç —Ç–µ–±—è —Å–ª–æ–º–∏—Ç—å.'
      },
      {
        name: '–°–∏–ª–∞ —á–µ—Ä–µ–∑ –æ—Ç–¥–∞–≤–∞–Ω–∏–µ',
        description: '–°–¥–µ–ª–∞–π —á—Ç–æ-—Ç–æ —Ö–æ—Ä–æ—à–µ–µ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –Ω–µ –æ–∂–∏–¥–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏. –ü–æ–º–æ–≥–∏ –Ω–µ–∑–Ω–∞–∫–æ–º—Ü—É, –ø–æ–¥–¥–µ—Ä–∂–∏ –¥—Ä—É–≥–∞, —Å–¥–µ–ª–∞–π –¥–æ–±—Ä–æ–≤–æ–ª—å—á–µ—Å–∫—É—é —Ä–∞–±–æ—Ç—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏—Å–∫—Ä–µ–Ω–Ω–µ –≤—ã—Å–ª—É—à–∞–π –∫–æ–≥–æ-—Ç–æ. –ò—Å—Ç–∏–Ω–Ω–∞—è —Å—Ç–æ–π–∫–æ—Å—Ç—å —Ä–æ–∂–¥–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –º—ã –¥—É–º–∞–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ –æ —Å–µ–±–µ.',
        dayNumber: 7,
        motivationalPhrase: '–ò—Å—Ç–∏–Ω–Ω–∞—è —Å–∏–ª–∞ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–µ –≤ —Ç–æ–º, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –≤–∑—è—Ç—å, –∞ –≤ —Ç–æ–º, —á—Ç–æ –≥–æ—Ç–æ–≤ –æ—Ç–¥–∞—Ç—å.'
      }
    ];

    // 2. –ü–æ–ª—É—á–∞–µ–º –∞–ø–æ—Å—Ç–æ–ª–∞ –ü–µ—Ç—Ä–∞
    const peter = await prisma.apostle.findFirst({
      where: { name: '–ü—ë—Ç—Ä' }
    });

    if (!peter) {
      console.error('‚ùå –ê–ø–æ—Å—Ç–æ–ª –ü—ë—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log(`üë§ –ù–∞–π–¥–µ–Ω –∞–ø–æ—Å—Ç–æ–ª: ${peter.name}`);

    // 3. –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ Task —Å—É—â–Ω–æ—Å—Ç–∏
    const tasks = [];
    for (const taskData of peterTasksData) {
      const task = await prisma.task.create({
        data: {
          id: `peter-task-${taskData.dayNumber}`,
          name: taskData.name,
          description: taskData.description
        }
      });
      tasks.push({ task, order: taskData.dayNumber });
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –±–∞–∑–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: ${task.name}`);
    }

    // 4. –°–æ–∑–¥–∞–µ–º –∏—Å–ø—ã—Ç–∞–Ω–∏–µ –ü–µ—Ç—Ä–∞
    const peterChallenge = await prisma.challenge.create({
      data: {
        id: 'peter-stoykost-challenge',
        name: '–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –°—Ç–æ–π–∫–æ—Å—Ç–∏',
        description: '–ù–µ–¥–µ–ª—å–Ω–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ –æ—Ç –∞–ø–æ—Å—Ç–æ–ª–∞ –ü–µ—Ç—Ä–∞ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–∏–ª—ã –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã',
        apostleId: peter.id,
        orderedTasks: [] // –ó–∞–ø–æ–ª–Ω–∏–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–µ—Ä—Ç–æ–∫
      }
    });

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ: ${peterChallenge.name}`);

    // 5. –°–æ–∑–¥–∞–µ–º TaskWrapper –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    const taskWrappers = [];
    for (const { task, order } of tasks) {
      const wrapper = await prisma.taskWrapper.create({
        data: {
          id: `peter-wrapper-${order}`,
          challengeId: peterChallenge.id,
          taskId: task.id,
          order: order,
          apostleId: peter.id,
          icon: 'üóø' // –ò–∫–æ–Ω–∫–∞ –ü–µ—Ç—Ä–∞
        }
      });
      
      taskWrappers.push(wrapper);
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –æ–±–µ—Ä—Ç–∫–∞ ${wrapper.order}: ${task.name}`);
    }

    // 6. –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å–ø—ã—Ç–∞–Ω–∏–µ —Å —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –æ–±–µ—Ä—Ç–æ–∫
    await prisma.challenge.update({
      where: { id: peterChallenge.id },
      data: {
        orderedTasks: taskWrappers.map(w => w.id)
      }
    });

    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ —Å —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏');

    // 7. –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å
    const mainPath = await prisma.path.create({
      data: {
        id: 'main-path',
        name: '–û—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å',
        description: '–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è —Å –∏—Å–ø—ã—Ç–∞–Ω–∏—è–º–∏ –æ—Ç –∞–ø–æ—Å—Ç–æ–ª–æ–≤',
        icon: 'üõ§Ô∏è',
        challenges: [peterChallenge.id]
      }
    });

    console.log('‚úÖ –°–æ–∑–¥–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å');

    console.log('üéâ –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìã –ß—Ç–æ —Å–æ–∑–¥–∞–Ω–æ:');
    console.log(`- ${tasks.length} –±–∞–∑–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π (Task)`);
    console.log(`- ${taskWrappers.length} –æ–±–µ—Ä—Ç–æ–∫ –∑–∞–¥–∞–Ω–∏–π (TaskWrapper)`);
    console.log(`- 1 –∏—Å–ø—ã—Ç–∞–Ω–∏–µ –ü–µ—Ç—Ä–∞ (Challenge)`);
    console.log(`- 1 –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å (Path)`);

    console.log('\nüîÑ –°—Ç—Ä—É–∫—Ç—É—Ä–∞:');
    console.log(`Path: ${mainPath.name} (${mainPath.id})`);
    console.log(`  Challenge: ${peterChallenge.name} (${peterChallenge.id})`);
    taskWrappers.forEach((wrapper, index) => {
      const task = tasks[index];
      console.log(`    TaskWrapper ${wrapper.order}: ${task.task.name} (${wrapper.id})`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
if (require.main === module) {
  createNewArchitecture()
    .catch((error) => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

export default createNewArchitecture; 