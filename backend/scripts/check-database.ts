import { prisma } from '../src/lib/prisma';

async function checkDatabase() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç–∏
    const paths = await prisma.path.findMany({
      select: { id: true, name: true, challenges: true }
    });
    console.log('üõ§Ô∏è –ü—É—Ç–∏:');
    paths.forEach(path => {
      console.log(`  - ${path.id}: ${path.name} (${path.challenges.length} challenges)`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Challenge
    const challenges = await prisma.challenge.findMany({
      select: { id: true, name: true, orderedTasks: true }
    });
    console.log('\nüéØ –ò—Å–ø—ã—Ç–∞–Ω–∏—è:');
    challenges.forEach(challenge => {
      console.log(`  - ${challenge.id}: ${challenge.name} (${challenge.orderedTasks.length} tasks)`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º TaskWrapper
    const taskWrappers = await prisma.taskWrapper.findMany({
      include: { task: { select: { name: true } } },
      orderBy: { order: 'asc' }
    });
    console.log('\nüìã TaskWrapper:');
    taskWrappers.forEach(tw => {
      console.log(`  - ${tw.id}: Order ${tw.order} - ${tw.task.name}`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø—É—Ç—è–º–∏
    const users = await prisma.user.findMany({
      include: {
        meta: {
          include: {
            paths: true
          }
        }
      }
    });
    console.log('\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
    users.forEach(user => {
      const activePaths = user.meta?.paths?.activePathIds || [];
      const activeTasks = user.meta?.activeTasks || [];
      const completedTasks = user.meta?.completedTasks || [];
      console.log(`  - ${user.email}: –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏: ${activePaths.length}, –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è: ${activeTasks.length}, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ: ${completedTasks.length}`);
      if (activePaths.length > 0) {
        console.log(`    –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏: ${activePaths.join(', ')}`);
      }
      if (activeTasks.length > 0) {
        console.log(`    –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è: ${activeTasks.join(', ')}`);
      }
    });

    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkDatabase(); 