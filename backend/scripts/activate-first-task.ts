import { prisma } from '../src/lib/prisma';

async function activateFirstTask() {
  try {
    console.log('üöÄ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º –ø—É—Ç–µ–º...\n');

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º –ø—É—Ç–µ–º, –Ω–æ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    const users = await prisma.user.findMany({
      include: {
        meta: {
          include: {
            paths: true
          }
        }
      }
    });

    for (const user of users) {
      if (!user.meta?.paths) continue;
      
      const activePaths = user.meta.paths.activePathIds;
      const activeTasks = user.meta.activeTasks;
      
      if (activePaths.length > 0 && activeTasks.length === 0) {
        console.log(`üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.email}`);
        console.log(`   –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏: ${activePaths.join(', ')}`);
        
        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å
        const firstPathId = activePaths[0];
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å —Å challenge
        const path = await prisma.path.findUnique({
          where: { id: firstPathId }
        });
        
        if (!path || !path.challenges || path.challenges.length === 0) {
          console.log(`   ‚ö†Ô∏è –£ –ø—É—Ç–∏ ${firstPathId} –Ω–µ—Ç –∏—Å–ø—ã—Ç–∞–Ω–∏–π`);
          continue;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ
        const firstChallengeId = path.challenges[0];
        const challenge = await prisma.challenge.findUnique({
          where: { id: firstChallengeId }
        });
        
        if (!challenge || !challenge.orderedTasks || challenge.orderedTasks.length === 0) {
          console.log(`   ‚ö†Ô∏è –£ –∏—Å–ø—ã—Ç–∞–Ω–∏—è ${firstChallengeId} –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π`);
          continue;
        }
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        const firstTaskWrapperId = challenge.orderedTasks[0];
        console.log(`   üéØ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏–µ: ${firstTaskWrapperId}`);
        
        await prisma.userMeta.update({
          where: { id: user.meta.id },
          data: {
            activeTasks: [firstTaskWrapperId]
          }
        });
        
        console.log(`   ‚úÖ –ó–∞–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è ${user.email}\n`);
      }
    }

    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–π:', error);
  } finally {
    await prisma.$disconnect();
  }
}

activateFirstTask(); 