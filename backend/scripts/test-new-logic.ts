import { prisma } from '../src/lib/prisma';

async function testNewTaskLogic() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –∑–∞–¥–∞–Ω–∏–π...\n');

  try {
    // 1. –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
    const user = await prisma.user.findFirst({
      where: { email: 'test@example.com' },
      include: { meta: true }
    });

    if (!user || !user.meta) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log('üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞...');
    await prisma.userMeta.update({
      where: { id: user.meta.id },
      data: {
        activeTasks: [],
        completedTasks: []
      }
    });

    // 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ TaskWrapper –∑–∞–¥–∞–Ω–∏–π
    const challenge = await prisma.challenge.findFirst({
      where: { id: 'peter-stoykost-challenge' }
    });

    if (!challenge) {
      console.log('‚ùå –ò—Å–ø—ã—Ç–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ: ${challenge.name}`);
    console.log(`üìù –ó–∞–¥–∞–Ω–∏—è –≤ –ø–æ—Ä—è–¥–∫–µ: ${challenge.orderedTasks}\n`);

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏–π
    console.log('üìä –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏–π –≤ –Ω–∞—á–∞–ª–µ:');
    
    for (let i = 0; i < challenge.orderedTasks.length; i++) {
      const taskWrapperId = challenge.orderedTasks[i];
      const taskWrapper = await prisma.taskWrapper.findUnique({
        where: { id: taskWrapperId },
        include: { task: true }
      });

      if (taskWrapper) {
        // –õ–æ–≥–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (–∫–∞–∫ –≤ API)
        let isAvailable = false;
        if (i === 0) {
          isAvailable = true;
        } else {
          const prevTaskWrapperId = challenge.orderedTasks[i - 1];
          isAvailable = user.meta.completedTasks.includes(prevTaskWrapperId);
        }

        const status = isAvailable ? 'üîì –î–û–°–¢–£–ü–ù–û' : 'üîí –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û';
        console.log(`  ${i + 1}. ${taskWrapper.task.name} - ${status}`);
      }
    }

    // 4. –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    console.log('\nüéØ –¢–ï–°–¢ 2: –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ...');
    const firstTaskId = challenge.orderedTasks[0];
    
    await prisma.userMeta.update({
      where: { id: user.meta.id },
      data: {
        activeTasks: [firstTaskId]
      }
    });

    console.log('‚úÖ –ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ');

    // 5. –ü—ã—Ç–∞–µ–º—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ)
    console.log('\nüö´ –¢–ï–°–¢ 3: –ü—ã—Ç–∞–µ–º—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞)...');
    const secondTaskId = challenge.orderedTasks[1];
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏–∑ API
    const currentActiveTasks = [firstTaskId];
    const currentCompletedTasks: string[] = [];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    const activeTasksFromChallenge = currentActiveTasks.filter(activeTaskId => 
      challenge.orderedTasks.includes(activeTaskId)
    );

    if (activeTasksFromChallenge.length > 0) {
      console.log('‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ù–µ–ª—å–∑—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ - —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    const secondIndex = challenge.orderedTasks.indexOf(secondTaskId);
    const prevTaskWrapperId = challenge.orderedTasks[secondIndex - 1];
    const isPrevCompleted = currentCompletedTasks.includes(prevTaskWrapperId);
    
    if (!isPrevCompleted) {
      console.log('‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    }

    // 6. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    console.log('\n‚úÖ –¢–ï–°–¢ 4: –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ...');
    
    await prisma.userMeta.update({
      where: { id: user.meta.id },
      data: {
        activeTasks: [],
        completedTasks: [firstTaskId]
      }
    });

    await prisma.taskWrapperResult.create({
      data: {
        taskWrapperId: firstTaskId,
        userId: user.id,
        content: '–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è',
        result: '–ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
      }
    });

    console.log('‚úÖ –ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');

    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏–π –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ
    console.log('\nüìä –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ:');
    
    const updatedUser = await prisma.user.findUnique({
      where: { id: user.id },
      include: { meta: true }
    });

    for (let i = 0; i < challenge.orderedTasks.length; i++) {
      const taskWrapperId = challenge.orderedTasks[i];
      const taskWrapper = await prisma.taskWrapper.findUnique({
        where: { id: taskWrapperId },
        include: { task: true }
      });

      if (taskWrapper) {
        // –õ–æ–≥–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        let isAvailable = false;
        if (i === 0) {
          isAvailable = true;
        } else {
          const prevTaskWrapperId = challenge.orderedTasks[i - 1];
          isAvailable = updatedUser?.meta?.completedTasks.includes(prevTaskWrapperId) || false;
        }

        const isCompleted = updatedUser?.meta?.completedTasks.includes(taskWrapperId) || false;
        const isActive = updatedUser?.meta?.activeTasks.includes(taskWrapperId) || false;

        let status = '';
        if (isCompleted) status = '‚úÖ –ó–ê–í–ï–†–®–ï–ù–û';
        else if (isActive) status = '‚ö° –ê–ö–¢–ò–í–ù–û';
        else if (isAvailable) status = 'üîì –î–û–°–¢–£–ü–ù–û';
        else status = 'üîí –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û';

        console.log(`  ${i + 1}. ${taskWrapper.task.name} - ${status}`);
      }
    }

    // 8. –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ (—Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ)
    console.log('\nüéØ –¢–ï–°–¢ 6: –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ (—Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ)...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ
    const secondAvailable = updatedUser?.meta?.completedTasks.includes(firstTaskId) || false;
    
    if (secondAvailable) {
      await prisma.userMeta.update({
        where: { id: user.meta.id },
        data: {
          activeTasks: [secondTaskId]
        }
      });
      console.log('‚úÖ –í—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!');
    } else {
      console.log('‚ùå –í—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—Å–µ –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
    }

    // 9. –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const finalUser = await prisma.user.findUnique({
      where: { id: user.id },
      include: { meta: true }
    });

    console.log('\nüìä –ò–¢–û–ì–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:');
    console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è: ${finalUser?.meta?.completedTasks || []}`);
    console.log(`‚ö° –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è: ${finalUser?.meta?.activeTasks || []}`);

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testNewTaskLogic(); 