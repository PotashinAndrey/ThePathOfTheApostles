import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function migrateToNewArchitecture() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≤ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É...');

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ DailyTask –æ—Ç –ü–µ—Ç—Ä–∞
    const peterTasks = await prisma.dailyTask.findMany({
      where: {
        apostle: {
          name: '–ü—ë—Ç—Ä'
        }
      },
      include: {
        apostle: true
      },
      orderBy: {
        dayNumber: 'asc'
      }
    });

    if (peterTasks.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–¥–∞–Ω–∏—è –ü–µ—Ç—Ä–∞ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏');
      return;
    }

    console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${peterTasks.length} –∑–∞–¥–∞–Ω–∏–π –æ—Ç –ü–µ—Ç—Ä–∞`);

    // 2. –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ Task —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ DailyTask
    const tasks = [];
    for (const dailyTask of peterTasks) {
      const task = await prisma.task.create({
        data: {
          id: `peter-task-${dailyTask.dayNumber}`,
          name: dailyTask.name,
          description: dailyTask.description
        }
      });
      tasks.push({ task, dailyTask });
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –±–∞–∑–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: ${task.name}`);
    }

    // 3. –°–æ–∑–¥–∞–µ–º –∏—Å–ø—ã—Ç–∞–Ω–∏–µ –ü–µ—Ç—Ä–∞
    const peterChallenge = await prisma.challenge.create({
      data: {
        id: 'peter-stoykost-challenge',
        name: '–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –°—Ç–æ–π–∫–æ—Å—Ç–∏',
        description: '–ù–µ–¥–µ–ª—å–Ω–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ –æ—Ç –∞–ø–æ—Å—Ç–æ–ª–∞ –ü–µ—Ç—Ä–∞ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–∏–ª—ã –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã',
        apostleId: peterTasks[0].apostle.id,
        orderedTasks: [] // –ó–∞–ø–æ–ª–Ω–∏–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–µ—Ä—Ç–æ–∫
      }
    });

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ: ${peterChallenge.name}`);

    // 4. –°–æ–∑–¥–∞–µ–º TaskWrapper –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    const taskWrappers = [];
    for (let i = 0; i < tasks.length; i++) {
      const { task, dailyTask } = tasks[i];
      
      const wrapper = await prisma.taskWrapper.create({
        data: {
          id: `peter-wrapper-${dailyTask.dayNumber}`,
          challengeId: peterChallenge.id,
          taskId: task.id,
          order: dailyTask.dayNumber,
          apostleId: dailyTask.apostle.id,
          icon: 'üóø' // –ò–∫–æ–Ω–∫–∞ –ü–µ—Ç—Ä–∞
        }
      });
      
      taskWrappers.push(wrapper);
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –æ–±–µ—Ä—Ç–∫–∞ ${wrapper.order}: ${task.name}`);
    }

    // 5. –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å–ø—ã—Ç–∞–Ω–∏–µ —Å —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –æ–±–µ—Ä—Ç–æ–∫
    await prisma.challenge.update({
      where: { id: peterChallenge.id },
      data: {
        orderedTasks: taskWrappers.map(w => w.id)
      }
    });

    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ —Å —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏');

    // 6. –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º "–û—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å"
    let mainPath = await prisma.path.findFirst({
      where: { name: '–û—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å' }
    });

    if (!mainPath) {
      mainPath = await prisma.path.create({
        data: {
          id: 'main-path',
          name: '–û—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å',
          description: '–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è —Å –∏—Å–ø—ã—Ç–∞–Ω–∏—è–º–∏ –æ—Ç –∞–ø–æ—Å—Ç–æ–ª–æ–≤',
          icon: 'üõ§Ô∏è',
          challenges: [peterChallenge.id]
        }
      });
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å');
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—É—Ç—å
      const currentChallenges = mainPath.challenges || [];
      if (!currentChallenges.includes(peterChallenge.id)) {
        await prisma.path.update({
          where: { id: mainPath.id },
          data: {
            challenges: [...currentChallenges, peterChallenge.id]
          }
        });
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å —Å –∏—Å–ø—ã—Ç–∞–Ω–∏–µ–º –ü–µ—Ç—Ä–∞');
      }
    }

    // 7. –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: UserProgress -> UserMeta
    const usersWithProgress = await prisma.user.findMany({
      where: {
        userProgressId: { not: null }
      },
      include: {
        userProgress: {
          include: {
            completedChallenges: true,
            userPaths: true
          }
        }
      }
    });

    console.log(`üë• –ú–∏–≥—Ä–∏—Ä—É–µ–º ${usersWithProgress.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);

    for (const user of usersWithProgress) {
      if (!user.userProgress) continue;

      // –°–æ–∑–¥–∞–µ–º UserMeta
      const userMeta = await prisma.userMeta.create({
        data: {
          id: `meta-${user.id}`,
          completedTasks: [], // –ü–æ–∫–∞ –ø—É—Å—Ç–æ–π, –∑–∞–ø–æ–ª–Ω–∏–º –ø–æ–∑–∂–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          activeTasks: [], // –ü–æ–∫–∞ –ø—É—Å—Ç–æ–π
          pathsId: user.userProgress.userPathsId,
          userChatsList: [] // –ó–∞–ø–æ–ª–Ω–∏–º –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —á–∞—Ç–æ–≤
        }
      });

      // –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userChats = await prisma.chat.findMany({
        where: { userId: user.id },
        select: { id: true }
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º UserMeta —Å —á–∞—Ç–∞–º–∏
      await prisma.userMeta.update({
        where: { id: userMeta.id },
        data: {
          userChatsList: userChats.map(chat => chat.id)
        }
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ UserMeta –≤ User
      await prisma.user.update({
        where: { id: user.id },
        data: {
          metaId: userMeta.id
        }
      });

      console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email}`);
    }

    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìã –ß—Ç–æ —Å–æ–∑–¥–∞–Ω–æ:');
    console.log(`- ${tasks.length} –±–∞–∑–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π (Task)`);
    console.log(`- ${taskWrappers.length} –æ–±–µ—Ä—Ç–æ–∫ –∑–∞–¥–∞–Ω–∏–π (TaskWrapper)`);
    console.log(`- 1 –∏—Å–ø—ã—Ç–∞–Ω–∏–µ –ü–µ—Ç—Ä–∞ (Challenge)`);
    console.log(`- 1 –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å (Path)`);
    console.log(`- ${usersWithProgress.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –º–µ—Ç–∞ (UserMeta)`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
if (require.main === module) {
  migrateToNewArchitecture()
    .catch((error) => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

export default migrateToNewArchitecture; 