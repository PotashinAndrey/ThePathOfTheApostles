// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
import fetch from 'node-fetch';

const API_BASE = 'http://localhost:3000/api';

interface AuthTestResult {
  status: number;
  message: string;
  time: number;
}

async function testAuthEndpoint(email: string, password: string): Promise<AuthTestResult> {
  const startTime = Date.now();
  
  try {
    const response = await fetch(`${API_BASE}/auth/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password })
    });
    
    const data = await response.json() as any;
    const endTime = Date.now();
    
    return {
      status: response.status,
      message: data.error || data.message || 'No message',
      time: endTime - startTime
    };
  } catch (error) {
    const endTime = Date.now();
    return {
      status: 0,
      message: (error as Error).message,
      time: endTime - startTime
    };
  }
}

async function testUserEnumeration() {
  console.log('\nüß™ –¢–µ—Å—Ç User Enumeration Prevention');
  console.log('=====================================');
  
  // –¢–µ—Å—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å)
  console.log('üìß –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π email —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º...');
  const existingResult = await testAuthEndpoint('admin@apostles.app', 'wrongpassword');
  
  // –¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  console.log('üìß –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π email...');
  const nonExistingResult = await testAuthEndpoint('nonexistent@example.com', 'anypassword');
  
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
  console.log(`–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π email: ${existingResult.status} - "${existingResult.message}" (${existingResult.time}ms)`);
  console.log(`–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π email: ${nonExistingResult.status} - "${nonExistingResult.message}" (${nonExistingResult.time}ms)`);
  
  // –ê–Ω–∞–ª–∏–∑
  const sameMessage = existingResult.message === nonExistingResult.message;
  const sameStatus = existingResult.status === nonExistingResult.status;
  const timeDiff = Math.abs(existingResult.time - nonExistingResult.time);
  
  console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:');
  console.log(`‚úÖ –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${sameMessage ? '–î–ê' : '–ù–ï–¢ ‚ö†Ô∏è'}`);
  console.log(`‚úÖ –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã: ${sameStatus ? '–î–ê' : '–ù–ï–¢ ‚ö†Ô∏è'}`);
  console.log(`‚úÖ –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏: ${timeDiff}ms ${timeDiff < 100 ? '(—Ö–æ—Ä–æ—à–æ)' : '‚ö†Ô∏è (–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ)'}`);
  
  return { sameMessage, sameStatus, timeDiff };
}

async function testRateLimiting() {
  console.log('\nüß™ –¢–µ—Å—Ç Rate Limiting');
  console.log('====================');
  
  const testEmail = `test-${Date.now()}@example.com`;
  const results: AuthTestResult[] = [];
  
  console.log(`üìß –¢–µ—Å—Ç–∏—Ä—É–µ–º rate limiting –¥–ª—è: ${testEmail}`);
  console.log('–í—ã–ø–æ–ª–Ω—è–µ–º 7 –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞...\n');
  
  for (let i = 1; i <= 7; i++) {
    console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${i}/7...`);
    const result = await testAuthEndpoint(testEmail, `wrongpassword${i}`);
    results.push(result);
    
    console.log(`  ${result.status} - "${result.message}" (${result.time}ms)`);
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  console.log('\nüîç –ê–Ω–∞–ª–∏–∑ Rate Limiting:');
  const blockedRequests = results.filter(r => r.status === 429);
  console.log(`‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: ${blockedRequests.length}`);
  console.log(`‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å —Å –ø–æ–ø—ã—Ç–∫–∏: ${results.findIndex(r => r.status === 429) + 1 || '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
  
  if (blockedRequests.length > 0) {
    console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: "${blockedRequests[0].message}"`);
  }
  
  return {
    totalAttempts: results.length,
    blockedCount: blockedRequests.length,
    firstBlockAt: results.findIndex(r => r.status === 429) + 1
  };
}

async function testSecurityHeaders() {
  console.log('\nüß™ –¢–µ—Å—Ç Security Headers');
  console.log('========================');
  
  try {
    const response = await fetch(`${API_BASE}/auth/login`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'User-Agent': 'SecurityTestBot/1.0',
        'X-Real-IP': '192.168.1.100'
      },
      body: JSON.stringify({ email: 'test@example.com', password: 'test' })
    });
    
    console.log('üìã Response Headers:');
    response.headers.forEach((value, key) => {
      if (key.toLowerCase().includes('security') || 
          key.toLowerCase().includes('cors') || 
          key.toLowerCase().includes('content')) {
        console.log(`  ${key}: ${value}`);
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è headers:', error);
  }
}

async function runAllTests() {
  console.log('üõ°Ô∏è –¢–ï–°–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò');
  console.log('==================================');
  console.log('–°–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3000\n');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    console.log('üîå –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API...');
    await fetch(`${API_BASE}/auth/login`, { method: 'POST' });
    console.log('‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω\n');
  } catch (error) {
    console.error('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: npm run dev');
    return;
  }
  
  const userEnumResults = await testUserEnumeration();
  const rateLimitResults = await testRateLimiting();
  await testSecurityHeaders();
  
  console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò');
  console.log('===============================');
  
  // User Enumeration
  const userEnumSecure = userEnumResults.sameMessage && 
                        userEnumResults.sameStatus && 
                        userEnumResults.timeDiff < 100;
  
  console.log(`üîê User Enumeration Protection: ${userEnumSecure ? '‚úÖ –ó–ê–©–ò–©–ï–ù–û' : '‚ùå –£–Ø–ó–í–ò–ú–û'}`);
  
  // Rate Limiting
  const rateLimitSecure = rateLimitResults.blockedCount > 0 && 
                         rateLimitResults.firstBlockAt <= 6;
  
  console.log(`üö´ Rate Limiting Protection: ${rateLimitSecure ? '‚úÖ –†–ê–ë–û–¢–ê–ï–¢' : '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);
  
  // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
  const overallSecure = userEnumSecure && rateLimitSecure;
  console.log(`\nüõ°Ô∏è –û–ë–©–ê–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: ${overallSecure ? '‚úÖ –•–û–†–û–®–ê–Ø' : '‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø'}`);
  
  if (!overallSecure) {
    console.log('\n‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    if (!userEnumSecure) {
      console.log('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö');
      console.log('- –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ timing attack –∑–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }
    if (!rateLimitSecure) {
      console.log('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ rate limiting');
      console.log('- –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ RateLimiter –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runAllTests().catch(console.error); 