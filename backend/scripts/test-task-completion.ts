import { prisma } from '../src/lib/prisma';

async function testTaskCompletion() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –∞–≤—Ç–æ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–π...\n');

  try {
    // 1. –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏
    const user = await prisma.user.findFirst({
      where: {
        meta: {
          activeTasks: {
            isEmpty: false
          }
        }
      },
      include: {
        meta: true
      }
    });

    if (!user || !user.meta) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log(`üë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${user.email}`);
    console.log(`üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è: ${user.meta.activeTasks}`);
    console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è: ${user.meta.completedTasks}\n`);

    // 2. –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    const activeTaskWrapperId = user.meta.activeTasks[0];
    
    if (!activeTaskWrapperId) {
      console.log('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    // 3. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ TaskWrapper
    const taskWrapper = await prisma.taskWrapper.findUnique({
      where: { id: activeTaskWrapperId },
      include: {
        task: true,
        apostle: true
      }
    });

    if (!taskWrapper) {
      console.log('‚ùå TaskWrapper –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log(`üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: "${taskWrapper.task.name}" (order: ${taskWrapper.order})`);

    // 4. –ü–æ–ª—É—á–∞–µ–º Challenge –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏
    const challenge = await prisma.challenge.findUnique({
      where: { id: taskWrapper.challengeId }
    });

    if (!challenge) {
      console.log('‚ùå Challenge –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log(`üèÜ –ò—Å–ø—ã—Ç–∞–Ω–∏–µ: "${challenge.name}"`);
    console.log(`üìù –ü–æ—Ä—è–¥–æ–∫ –∑–∞–¥–∞–Ω–∏–π –≤ –∏—Å–ø—ã—Ç–∞–Ω–∏–∏: ${challenge.orderedTasks}`);
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    const currentIndex = challenge.orderedTasks.indexOf(activeTaskWrapperId);
    const nextIndex = currentIndex + 1;
    
    console.log(`üìç –¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: ${currentIndex + 1} –∏–∑ ${challenge.orderedTasks.length}`);
    
    if (nextIndex < challenge.orderedTasks.length) {
      const nextTaskWrapperId = challenge.orderedTasks[nextIndex];
      console.log(`‚è≠Ô∏è  –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ${nextTaskWrapperId}\n`);
    } else {
      console.log(`üèÅ –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –∏—Å–ø—ã—Ç–∞–Ω–∏–∏!\n`);
    }

    // 5. –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    console.log('üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è...\n');

    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
    const currentActiveTasks = user.meta.activeTasks;
    const currentCompletedTasks = user.meta.completedTasks;
    
    const updatedActiveTasks = currentActiveTasks.filter(id => id !== activeTaskWrapperId);
    const updatedCompletedTasks = [...currentCompletedTasks, activeTaskWrapperId];

    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    await prisma.taskWrapperResult.create({
      data: {
        taskWrapperId: activeTaskWrapperId,
        userId: user.id,
        content: '–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è',
        result: '–ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
      }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.userMeta.update({
      where: { id: user.meta.id },
      data: {
        activeTasks: updatedActiveTasks,
        completedTasks: updatedCompletedTasks
      }
    });

    console.log('‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ');

    // 6. –õ–û–ì–ò–ö–ê –ê–í–¢–û–ê–ö–¢–ò–í–ê–¶–ò–ò (–∫–∞–∫ –≤ API)
    if (nextIndex < challenge.orderedTasks.length) {
      const nextTaskWrapperId = challenge.orderedTasks[nextIndex];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
      if (!updatedActiveTasks.includes(nextTaskWrapperId) && 
          !updatedCompletedTasks.includes(nextTaskWrapperId)) {
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
        const finalActiveTasks = [...updatedActiveTasks, nextTaskWrapperId];
        
        await prisma.userMeta.update({
          where: { id: user.meta.id },
          data: {
            activeTasks: finalActiveTasks
          }
        });

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–¥–∞–Ω–∏–∏
        const nextTaskWrapper = await prisma.taskWrapper.findUnique({
          where: { id: nextTaskWrapperId },
          include: { task: true }
        });

        console.log(`üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ: "${nextTaskWrapper?.task.name}" (order: ${nextTaskWrapper?.order})`);
      } else {
        console.log('‚ö†Ô∏è  –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      }
    } else {
      console.log('üèÜ –ò—Å–ø—ã—Ç–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.');
    }

    // 7. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const finalUser = await prisma.user.findUnique({
      where: { id: user.id },
      include: { meta: true }
    });

    console.log('\nüìä –ò–¢–û–ì–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:');
    console.log(`üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è: ${finalUser?.meta?.activeTasks || []}`);
    console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è: ${finalUser?.meta?.completedTasks || []}`);

    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testTaskCompletion(); 