const API_BASE_URL = 'http://localhost:3000/api';

async function makeRequest(endpoint: string, options: any = {}) {
  const url = `${API_BASE_URL}${endpoint}`;
  const response = await fetch(url, {
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
    ...options,
  });

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`HTTP ${response.status}: ${errorText}`);
  }

  return response.json();
}

async function testDailyTasksAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π...');

  try {
    // 1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const testEmail = `test-${Date.now()}@apostles.app`;
    const testPassword = 'test123456';
    
    const authResponse = await makeRequest('/auth/register', {
      method: 'POST',
      body: JSON.stringify({
        email: testEmail,
        password: testPassword,
        confirmPassword: testPassword,
        name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
      }),
    });
    
    const token = authResponse.data.token;
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω');

    // 2. –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    console.log('\nüöÄ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è...');
    const firstTaskResponse = await makeRequest('/daily-tasks/start', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
      },
    });
    console.log('‚úÖ –ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ:', firstTaskResponse);

    if (firstTaskResponse.data?.task) {
      const taskId = firstTaskResponse.data.task.id;

      // 3. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
      console.log('\nüìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è...');
      const activeTaskResponse = await makeRequest('/daily-tasks/active', {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });
      console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:', activeTaskResponse);

      // 4. –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
      console.log('\n‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è...');
      const completeResponse = await makeRequest(`/daily-tasks/${taskId}/complete`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({
          content: '–Ø –≤—ã–ø–æ–ª–Ω–∏–ª —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ! –û—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è.',
          notes: '–ë—ã–ª–æ —Å–ª–æ–∂–Ω–æ –ø–µ—Ä–≤—ã–µ –¥–≤–∞ —á–∞—Å–∞, –Ω–æ –ø–æ—Ç–æ–º —Å—Ç–∞–ª–æ –ª–µ–≥—á–µ. –ó–∞–º–µ—Ç–∏–ª, –∫–∞–∫ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å.',
        }),
      });
      console.log('‚úÖ –ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', completeResponse);

      // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ
      console.log('\nüìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
      const afterCompleteResponse = await makeRequest('/daily-tasks/active', {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', afterCompleteResponse);
    }

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testDailyTasksAPI();
}

export { testDailyTasksAPI }; 