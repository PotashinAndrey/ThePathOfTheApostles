import { NextRequest } from 'next/server';
import { prisma } from './prisma';

export interface TokenPayload {
  userId: string;
  email: string;
  name: string;
  iat: number;
  exp: number;
}

export interface AuthUser {
  id: string;
  email: string;
  name: string;
  status: 'ACTIVE' | 'SUSPENDED' | 'DELETED';
}

// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
export const verifySimpleToken = (token: string): TokenPayload | null => {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞...');
  
  try {
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑ base64
    const decoded = Buffer.from(token, 'base64').toString('utf-8');
    const payload = JSON.parse(decoded) as TokenPayload;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    const now = Math.floor(Date.now() / 1000);
    if (payload.exp < now) {
      console.error('‚ùå –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫');
      return null;
    }
    
    console.log('‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', payload.email);
    return payload;
  } catch (error) {
    console.error('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω:', error);
    return null;
  }
};

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
export const extractTokenFromRequest = (request: NextRequest): string | null => {
  const authHeader = request.headers.get('Authorization');
  
  if (!authHeader) {
    console.log('üì≠ –ó–∞–≥–æ–ª–æ–≤–æ–∫ Authorization –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    return null;
  }
  
  if (!authHeader.startsWith('Bearer ')) {
    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization');
    return null;
  }
  
  const token = authHeader.substring(7); // –£–±–∏—Ä–∞–µ–º "Bearer "
  console.log('üé´ –¢–æ–∫–µ–Ω –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞');
  return token;
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export const requireAuth = async (request: NextRequest): Promise<AuthUser | null> => {
  console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
  
  const token = extractTokenFromRequest(request);
  if (!token) {
    console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return null;
  }
  
  const payload = verifySimpleToken(token);
  if (!payload) {
    console.log('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω');
    return null;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  console.log('üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î:', payload.userId);
  const user = await prisma.user.findUnique({
    where: { id: payload.userId },
    select: {
      id: true,
      email: true,
      name: true,
      status: true
    }
  });
  
  if (!user || user.status !== 'ACTIVE') {
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
    return null;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º lastActiveDate
  await prisma.user.update({
    where: { id: user.id },
    data: { lastActiveDate: new Date() }
  });
  
  console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.email);
  return user;
}; 