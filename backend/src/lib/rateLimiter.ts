// –ü—Ä–æ—Å—Ç–æ–π in-memory rate limiter –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞
// –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis

interface RateLimitEntry {
  attempts: number;
  firstAttempt: number;
  lastAttempt: number;
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ø—ã—Ç–æ–∫ (–≤ –ø–∞–º—è—Ç–∏)
const loginAttempts = new Map<string, RateLimitEntry>();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ rate limiting
const RATE_LIMIT_CONFIG = {
  MAX_ATTEMPTS: 5,           // –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫
  WINDOW_MINUTES: 15,        // –û–∫–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
  LOCKOUT_MINUTES: 30,       // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ –º–∏–Ω—É—Ç
};

export class RateLimiter {
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞ (–æ–±—ã—á–Ω–æ IP –∏–ª–∏ email)
   */
  static isAllowed(key: string): { allowed: boolean; message?: string; resetTime?: number } {
    const now = Date.now();
    const entry = loginAttempts.get(key);

    if (!entry) {
      // –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞
      return { allowed: true };
    }

    const windowMs = RATE_LIMIT_CONFIG.WINDOW_MINUTES * 60 * 1000;
    const lockoutMs = RATE_LIMIT_CONFIG.LOCKOUT_MINUTES * 60 * 1000;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if (entry.attempts >= RATE_LIMIT_CONFIG.MAX_ATTEMPTS) {
      const lockoutEnd = entry.lastAttempt + lockoutMs;
      
      if (now < lockoutEnd) {
        const resetTime = Math.ceil((lockoutEnd - now) / 1000 / 60); // –º–∏–Ω—É—Ç—ã
        return { 
          allowed: false, 
          message: `–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${resetTime} –º–∏–Ω—É—Ç.`,
          resetTime: lockoutEnd
        };
      } else {
        // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        loginAttempts.delete(key);
        return { allowed: true };
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
    if (now - entry.firstAttempt > windowMs) {
      // –û–∫–Ω–æ –∏—Å—Ç–µ–∫–ª–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      loginAttempts.delete(key);
      return { allowed: true };
    }

    return { allowed: true };
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞
   */
  static recordFailedAttempt(key: string): void {
    const now = Date.now();
    const entry = loginAttempts.get(key);

    if (!entry) {
      // –ü–µ—Ä–≤–∞—è –Ω–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
      loginAttempts.set(key, {
        attempts: 1,
        firstAttempt: now,
        lastAttempt: now
      });
    } else {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      entry.attempts += 1;
      entry.lastAttempt = now;
      loginAttempts.set(key, entry);
    }

    console.log(`üö® Rate Limiter: –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –Ω–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è ${key}. –ü–æ–ø—ã—Ç–æ–∫: ${entry?.attempts || 1}`);
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ (—Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫)
   */
  static recordSuccessfulLogin(key: string): void {
    if (loginAttempts.has(key)) {
      loginAttempts.delete(key);
      console.log(`‚úÖ Rate Limiter: –°–±—Ä–æ—à–µ–Ω —Å—á–µ—Ç—á–∏–∫ –¥–ª—è ${key} –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ø—ã—Ç–æ–∫
   */
  static getStats(key: string): RateLimitEntry | null {
    return loginAttempts.get(key) || null;
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ (–≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
   */
  static cleanup(): void {
    const now = Date.now();
    const windowMs = RATE_LIMIT_CONFIG.WINDOW_MINUTES * 60 * 1000;
    const lockoutMs = RATE_LIMIT_CONFIG.LOCKOUT_MINUTES * 60 * 1000;

    let cleaned = 0;
    const keysToDelete: string[] = [];
    
    loginAttempts.forEach((entry, key) => {
      const timeSinceLastAttempt = now - entry.lastAttempt;
      
      // –ü–æ–º–µ—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∏ —Å—Ç–∞—Ä—à–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ + –æ–∫–Ω–∞
      if (timeSinceLastAttempt > lockoutMs + windowMs) {
        keysToDelete.push(key);
      }
    });
    
    // –£–¥–∞–ª—è–µ–º –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    keysToDelete.forEach(key => {
      loginAttempts.delete(key);
      cleaned++;
    });

    if (cleaned > 0) {
      console.log(`üßπ Rate Limiter: –û—á–∏—â–µ–Ω–æ ${cleaned} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  static getOverallStats(): { totalEntries: number; config: typeof RATE_LIMIT_CONFIG } {
    return {
      totalEntries: loginAttempts.size,
      config: RATE_LIMIT_CONFIG
    };
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
setInterval(() => {
  RateLimiter.cleanup();
}, 30 * 60 * 1000); 