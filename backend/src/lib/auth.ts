import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { NextRequest } from 'next/server';
import { prisma } from './prisma';

// –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
const JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-in-production';
const JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || '7d';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
export interface JWTPayload {
  userId: string;
  email: string;
  name: string;
}

export interface AuthUser {
  id: string;
  email: string;
  name: string;
  currentApostleId?: string;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–ª–∏ –∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
export const hashPassword = async (password: string): Promise<{ hash: string; salt: string }> => {
  console.log('üîê –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è...');
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–ª—å
  const salt = await bcrypt.genSalt(12);
  console.log('üßÇ –°–æ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞');
  
  // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å —Å —Å–æ–ª—å—é
  const hash = await bcrypt.hash(password, salt);
  console.log('‚úÖ –ü–∞—Ä–æ–ª—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω');
  
  return { hash, salt };
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
export const verifyPassword = async (
  password: string, 
  hash: string, 
  salt: string
): Promise<boolean> => {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è...');
  
  try {
    // –•–µ—à–∏—Ä—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å —Å —Ç–æ–π –∂–µ —Å–æ–ª—å—é
    const hashedInput = await bcrypt.hash(password, salt);
    const isValid = hashedInput === hash;
    
    console.log('‚úÖ –ü–∞—Ä–æ–ª—å', isValid ? '–≤–µ—Ä–Ω—ã–π' : '–Ω–µ–≤–µ—Ä–Ω—ã–π');
    return isValid;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è:', error);
    return false;
  }
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
export const generateToken = (payload: JWTPayload): string => {
  console.log('üé´ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', payload.email);
  
  const token = jwt.sign(
    payload as object,
    JWT_SECRET,
    {
      expiresIn: JWT_EXPIRES_IN,
      issuer: 'apostles-app',
      audience: 'apostles-users'
    }
  );
  
  console.log('‚úÖ JWT —Ç–æ–∫–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
  return token;
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞
export const verifyToken = (token: string): JWTPayload | null => {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞...');
  
  try {
    const decoded = jwt.verify(token, JWT_SECRET, {
      issuer: 'apostles-app',
      audience: 'apostles-users'
    }) as JWTPayload;
    
    console.log('‚úÖ JWT —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', decoded.email);
    return decoded;
  } catch (error) {
    console.error('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JWT —Ç–æ–∫–µ–Ω:', error);
    return null;
  }
};

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
export const extractTokenFromRequest = (request: NextRequest): string | null => {
  const authHeader = request.headers.get('Authorization');
  
  if (!authHeader) {
    console.log('üì≠ –ó–∞–≥–æ–ª–æ–≤–æ–∫ Authorization –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    return null;
  }
  
  if (!authHeader.startsWith('Bearer ')) {
    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization');
    return null;
  }
  
  const token = authHeader.substring(7); // –£–±–∏—Ä–∞–µ–º "Bearer "
  console.log('üé´ –¢–æ–∫–µ–Ω –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞');
  return token;
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export const requireAuth = async (request: NextRequest): Promise<AuthUser | null> => {
  console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
  
  const token = extractTokenFromRequest(request);
  if (!token) {
    console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return null;
  }
  
  const payload = verifyToken(token);
  if (!payload) {
    console.log('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω');
    return null;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  console.log('üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î:', payload.userId);
  const user = await prisma.user.findUnique({
    where: { id: payload.userId },
    select: {
      id: true,
      email: true,
      name: true,
      currentApostleId: true
    }
  });
  
  if (!user) {
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î');
    return null;
  }
  
  console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.email);
  return user;
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ lastActiveDate –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export const updateLastActive = async (userId: string): Promise<void> => {
  try {
    await prisma.user.update({
      where: { id: userId },
      data: { lastActiveDate: new Date() }
    });
    console.log('‚úÖ lastActiveDate –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è lastActiveDate:', error);
  }
}; 