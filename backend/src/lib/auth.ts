import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { NextRequest } from 'next/server';
import { prisma } from './prisma';

// –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
const JWT_SECRET = process.env.JWT_SECRET || 'fallback-jwt-secret-for-development';
const JWT_EXPIRES_IN = '7d';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
export interface JWTPayload {
  userId: string;
  email: string;
  name: string;
  iat?: number;
  exp?: number;
}

export interface AuthUser {
  id: string;
  email: string;
  name: string;
  status: 'ACTIVE' | 'SUSPENDED' | 'DELETED';
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–ª–∏ –∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
export const hashPassword = async (password: string): Promise<{ hash: string; salt: string }> => {
  console.log('üîê –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è...');
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–ª—å
  const salt = await bcrypt.genSalt(12);
  console.log('üßÇ –°–æ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞');
  
  // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å —Å —Å–æ–ª—å—é
  const hash = await bcrypt.hash(password, salt);
  console.log('‚úÖ –ü–∞—Ä–æ–ª—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω');
  
  return { hash, salt };
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
export const verifyPassword = async (
  password: string, 
  hash: string, 
  salt: string
): Promise<boolean> => {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è...');
  
  try {
    // –•–µ—à–∏—Ä—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å —Å —Ç–æ–π –∂–µ —Å–æ–ª—å—é
    const hashedInput = await bcrypt.hash(password, salt);
    const isValid = hashedInput === hash;
    
    console.log('‚úÖ –ü–∞—Ä–æ–ª—å', isValid ? '–≤–µ—Ä–Ω—ã–π' : '–Ω–µ–≤–µ—Ä–Ω—ã–π');
    return isValid;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è:', error);
    return false;
  }
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
export function generateToken(user: { id: string; email: string; name: string }): string {
  const payload: JWTPayload = {
    userId: user.id,
    email: user.email,
    name: user.name,
  };
  
  return jwt.sign(payload, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });
}

// –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
export function verifyToken(token: string): JWTPayload | null {
  try {
    const decoded = jwt.verify(token, JWT_SECRET) as JWTPayload;
    return decoded;
  } catch (error) {
    console.error('JWT verification failed:', error);
    return null;
  }
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
export function extractToken(request: NextRequest): string | null {
  const authHeader = request.headers.get('authorization');
  
  if (authHeader && authHeader.startsWith('Bearer ')) {
    return authHeader.substring(7);
  }
  
  return null;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function requireAuth(request: NextRequest): Promise<AuthUser | null> {
  try {
    const token = extractToken(request);
    
    if (!token) {
      console.log('‚ùå No token provided');
      return null;
    }

    const payload = verifyToken(token);
    
    if (!payload) {
      console.log('‚ùå Invalid token');
      return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    const user = await prisma.user.findUnique({
      where: { id: payload.userId },
      select: {
        id: true,
        email: true,
        name: true,
        status: true,
      }
    });

    if (!user || user.status !== 'ACTIVE') {
      console.log('‚ùå User not found or inactive');
      return null;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º lastActiveDate
    await prisma.user.update({
      where: { id: user.id },
      data: { lastActiveDate: new Date() }
    });

    return user;
  } catch (error) {
    console.error('‚ùå Auth check failed:', error);
    return null;
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–ª—É –ø–∞—Ä–æ–ª—è
export function validatePassword(password: string): { isValid: boolean; errors: string[] } {
  const errors: string[] = [];
  
  if (password.length < 6) {
    errors.push('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
  }
  
  if (password.length > 128) {
    errors.push('–ü–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 128 —Å–∏–º–≤–æ–ª–æ–≤');
  }
  
  if (!/[a-zA-Z]/.test(password)) {
    errors.push('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –±—É–∫–≤—É');
  }
  
  return {
    isValid: errors.length === 0,
    errors
  };
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è email
export function validateEmail(email: string): boolean {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email) && email.length <= 255;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
export async function createUserWithProgress(userData: {
  email: string;
  name: string;
  password: string;
}) {
  const { hash, salt } = await hashPassword(userData.password);
  
  // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
  return await prisma.$transaction(async (tx) => {
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ UserPathsList...');
    
    // –°–æ–∑–¥–∞–µ–º UserPathsList –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userPaths = await tx.userPathsList.create({
      data: {
        userId: '', // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        activePathIds: [],
        completedPathIds: [],
      }
    });

    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ UserMeta...');
    
    // –°–æ–∑–¥–∞–µ–º UserMeta –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userMeta = await tx.userMeta.create({
      data: {
        completedTasks: [],     // ID –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö TaskWrapper
        activeTasks: [],        // ID –∞–∫—Ç–∏–≤–Ω—ã—Ö TaskWrapper  
        pathsId: userPaths.id,  // –°—Å—ã–ª–∫–∞ –Ω–∞ UserPathsList
        userChatsList: [],      // –°–ø–∏—Å–æ–∫ ID —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      }
    });

    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await tx.user.create({
      data: {
        email: userData.email,
        name: userData.name,
        passwordHash: hash,
        salt: salt,
        status: 'ACTIVE',
        metaId: userMeta.id,    // –°–≤—è–∑—å —Å UserMeta –≤–º–µ—Å—Ç–æ UserProgress
        streak: 0,
        avatar: null,
        currentSubscription: 'basic', // –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      },
      select: {
        id: true,
        email: true,
        name: true,
        joinDate: true,
        status: true,
      }
    });

    console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ userId –≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç—è—Ö...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º userId –≤ UserPathsList
    await tx.userPathsList.update({
      where: { id: userPaths.id },
      data: { userId: user.id }
    });

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    
    return user;
  });
} 