import OpenAI from 'openai';

export const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function generateApostleResponse(
  apostleId: string,
  userMessage: string,
  context: string[] = [],
  systemPrompt: string
): Promise<string> {
  console.log('ü§ñ generateApostleResponse –≤—ã–∑–≤–∞–Ω–∞');
  console.log('üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:');
  console.log('- apostleId:', apostleId);
  console.log('- userMessage:', userMessage);
  console.log('- context:', context);
  console.log('- systemPrompt –¥–ª–∏–Ω–∞:', systemPrompt.length);
  
  try {
    const messages: OpenAI.Chat.Completions.ChatCompletionMessageParam[] = [
      {
        role: 'system',
        content: systemPrompt,
      },
      // Add context from previous messages
      ...context.slice(-4).map((msg, index) => ({
        role: (index % 2 === 0 ? 'user' : 'assistant') as 'user' | 'assistant',
        content: msg,
      })),
      {
        role: 'user',
        content: userMessage,
      },
    ];

    console.log('üì® –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è OpenAI:', messages);
    console.log('üîë OpenAI API Key —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', !!process.env.OPENAI_API_KEY);
    console.log('üîë OpenAI API Key –¥–ª–∏–Ω–∞:', process.env.OPENAI_API_KEY?.length || 0);

    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages,
      max_tokens: 300,
      temperature: 0.7,
      presence_penalty: 0.1,
      frequency_penalty: 0.1,
    });

    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI API');
    console.log('üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤:', response.usage);
    
    const generatedResponse = response.choices[0]?.message?.content || '–ü—Ä–æ—Å—Ç–∏, —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.';
    console.log('üì§ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:', generatedResponse);
    
    return generatedResponse;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ OpenAI API:', error);
    console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ OpenAI:', {
      message: (error as Error)?.message,
      name: (error as Error)?.name,
      stack: (error as Error)?.stack,
      // OpenAI specific error details
      status: (error as any)?.status,
      code: (error as any)?.code,
      type: (error as any)?.type,
    });
    throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞');
  }
}

export async function generateMission(
  apostleId: string,
  userId: string,
  difficulty: 'easy' | 'medium' | 'hard',
  apostlePersonality: string
): Promise<{
  title: string;
  description: string;
  tasks: string[];
  duration: number;
}> {
  try {
    const difficultySettings = {
      easy: { duration: '3-4 –¥–Ω—è', complexity: '–ø—Ä–æ—Å—Ç—ã–µ –∏ –¥–æ—Å—Ç–∏–∂–∏–º—ã–µ' },
      medium: { duration: '5-6 –¥–Ω–µ–π', complexity: '—É–º–µ—Ä–µ–Ω–Ω–æ —Å–ª–æ–∂–Ω—ã–µ' },
      hard: { duration: '7-10 –¥–Ω–µ–π', complexity: '–≤—ã–∑—ã–≤–∞—é—â–∏–µ –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É—é—â–∏–µ' },
    };

    const setting = difficultySettings[difficulty];

    const prompt = `–¢—ã ${apostlePersonality}. –°–æ–∑–¥–∞–π –¥—É—Ö–æ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —á–µ–ª–æ–≤–µ–∫–∞.
    
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${setting.duration}
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${setting.complexity}
- –ó–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏ –≤—ã–ø–æ–ª–Ω–∏–º—ã–º–∏
- –§–æ–∫—É—Å –Ω–∞ –¥—É—Ö–æ–≤–Ω–æ–º –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏
- –û—Ç 3 –¥–æ 5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (JSON):
{
  "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è",
  "description": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏ –∏ —Å–º—ã—Å–ª–∞ –∑–∞–¥–∞–Ω–∏—è",
  "tasks": ["–ó–∞–¥–∞—á–∞ 1", "–ó–∞–¥–∞—á–∞ 2", "–ó–∞–¥–∞—á–∞ 3"],
  "duration": —á–∏—Å–ª–æ_–¥–Ω–µ–π
}`;

    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 500,
      temperature: 0.8,
    });

    const content = response.choices[0]?.message?.content;
    if (!content) throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI');

    const mission = JSON.parse(content);
    return mission;
  } catch (error) {
    console.error('Mission generation error:', error);
    // Fallback mission
    return {
      title: '–ü—É—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏',
      description: '–†–∞–∑–≤–∏—Ç–∏–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –≤ –∫–∞–∂–¥–æ–º –º–æ–º–µ–Ω—Ç–µ –∂–∏–∑–Ω–∏.',
      tasks: [
        '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è 10-–º–∏–Ω—É—Ç–Ω–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è',
        '–í–µ–¥–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏',
        '–û—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å',
      ],
      duration: difficulty === 'easy' ? 3 : difficulty === 'medium' ? 5 : 7,
    };
  }
} 