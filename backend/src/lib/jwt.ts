import jwt from 'jsonwebtoken';

// –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT
const JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-in-production';
const JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || '7d';

export interface JWTPayload {
  userId: string;
  email: string;
  name: string;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
export const generateToken = (payload: JWTPayload): string => {
  console.log('üé´ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', payload.email);
  
  const token = jwt.sign(
    {
      userId: payload.userId,
      email: payload.email,
      name: payload.name
    },
    JWT_SECRET,
    {
      expiresIn: JWT_EXPIRES_IN,
      issuer: 'apostles-app',
      audience: 'apostles-users'
    }
  );
  
  console.log('‚úÖ JWT —Ç–æ–∫–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
  return token;
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞
export const verifyToken = (token: string): JWTPayload | null => {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞...');
  
  try {
    const decoded = jwt.verify(token, JWT_SECRET, {
      issuer: 'apostles-app',
      audience: 'apostles-users'
    }) as any;
    
    if (decoded && decoded.userId && decoded.email && decoded.name) {
      const payload: JWTPayload = {
        userId: decoded.userId,
        email: decoded.email,
        name: decoded.name
      };
      
      console.log('‚úÖ JWT —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', payload.email);
      return payload;
    }
    
    console.error('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JWT —Ç–æ–∫–µ–Ω–∞');
    return null;
  } catch (error) {
    console.error('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JWT —Ç–æ–∫–µ–Ω:', error);
    return null;
  }
}; 