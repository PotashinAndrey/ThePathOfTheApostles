import { NextRequest, NextResponse } from 'next/server';
import { requireAuth } from '../../../lib/auth';
import { prisma } from '../../../lib/prisma';
import { ChatInfo, ApiResponse } from '../../../types/api';

export async function GET(request: NextRequest) {
  console.log('üöÄ Backend API /chats –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authUser = await requireAuth(request);
    if (!authUser) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      }, { status: 401 });
    }

    console.log('üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', authUser.email);

    // –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const chats = await prisma.chat.findMany({
      where: { userId: authUser.id },
      include: {
        apostle: {
          include: {
            virtue: true
          }
        },
        path: true,
        currentChallenge: true,
        messages: {
          orderBy: { createdAt: 'desc' },
          take: 1
        }
      },
      orderBy: {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages: {
          _count: 'desc'
        }
      }
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
    const chatInfos: ChatInfo[] = chats.map(chat => ({
      id: chat.id,
      name: chat.name,
      apostle: {
        id: chat.apostle.id,
        name: chat.apostle.name,
        title: chat.apostle.title,
        description: chat.apostle.description,
        archetype: chat.apostle.archetype,
        personality: chat.apostle.personality,
        icon: chat.apostle.icon,
        color: chat.apostle.color,
        virtue: chat.apostle.virtue ? {
          id: chat.apostle.virtue.id,
          name: chat.apostle.virtue.name,
          description: chat.apostle.virtue.description
        } : undefined
      },
      lastMessage: chat.messages[0] ? {
        id: chat.messages[0].id,
        sender: chat.messages[0].sender,
        content: chat.messages[0].content,
        voiceUrl: chat.messages[0].voiceUrl,
        createdAt: chat.messages[0].createdAt,
        metadata: chat.messages[0].metadata
      } : undefined,
      unreadCount: 0, // –ü–æ–∫–∞ —á—Ç–æ 0, –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥—Å—á–µ—Ç–∞
      path: chat.path ? {
        id: chat.path.id,
        name: chat.path.name,
        description: chat.path.description,
        icon: chat.path.icon,
        progress: 0,
        totalChallenges: 0,
        completedChallenges: 0,
        challenges: []
      } : undefined,
      currentChallenge: chat.currentChallenge ? {
        id: chat.currentChallenge.id,
        name: chat.currentChallenge.name,
        description: chat.currentChallenge.description,
        apostle: {
          id: chat.apostle.id,
          name: chat.apostle.name,
          title: chat.apostle.title,
          description: chat.apostle.description,
          archetype: chat.apostle.archetype,
          personality: chat.apostle.personality,
          icon: chat.apostle.icon,
          color: chat.apostle.color,
          virtue: chat.apostle.virtue ? {
            id: chat.apostle.virtue.id,
            name: chat.apostle.virtue.name,
            description: chat.apostle.virtue.description
          } : undefined
        },
        totalTasks: 0,        // TODO: –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π
        completedTasks: 0,    // TODO: –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        isCompleted: false,
        isActive: true,
        tasks: []            // TODO: –∑–∞–≥—Ä—É–∑–∏—Ç—å TaskWrapper –¥–ª—è —ç—Ç–æ–≥–æ Challenge
      } : undefined
    }));

    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', chatInfos.length);
    
    return NextResponse.json<ApiResponse<ChatInfo[]>>({
      success: true,
      data: chatInfos
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤:', error);
    return NextResponse.json<ApiResponse>({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
}

// POST /api/chats - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç
export async function POST(request: NextRequest) {
  console.log('üöÄ Backend API /chats POST –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authUser = await requireAuth(request);
    if (!authUser) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      }, { status: 401 });
    }

    const body = await request.json();
    const { apostleId, pathId, challengeId } = body;

    if (!apostleId) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ù–µ —É–∫–∞–∑–∞–Ω ID –∞–ø–æ—Å—Ç–æ–ª–∞'
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–ø–æ—Å—Ç–æ–ª–∞
    const apostle = await prisma.apostle.findUnique({
      where: { id: apostleId }
    });

    if (!apostle) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ê–ø–æ—Å—Ç–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 });
    }

    // –°–æ–∑–¥–∞–µ–º —á–∞—Ç
    const chat = await prisma.chat.create({
      data: {
        name: `–ë–µ—Å–µ–¥–∞ —Å ${apostle.name}`,
        userId: authUser.id,
        apostleId: apostleId,
        pathId: pathId || null,
        currentChallengeId: challengeId || null
      },
      include: {
        apostle: {
          include: {
            virtue: true
          }
        }
      }
    });

    console.log('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç:', chat.id);

    const chatInfo: ChatInfo = {
      id: chat.id,
      name: chat.name,
      apostle: {
        id: chat.apostle.id,
        name: chat.apostle.name,
        title: chat.apostle.title,
        description: chat.apostle.description,
        archetype: chat.apostle.archetype,
        personality: chat.apostle.personality,
        icon: chat.apostle.icon,
        color: chat.apostle.color,
        virtue: chat.apostle.virtue ? {
          id: chat.apostle.virtue.id,
          name: chat.apostle.virtue.name,
          description: chat.apostle.virtue.description
        } : undefined
      },
      unreadCount: 0
    };

    return NextResponse.json<ApiResponse<ChatInfo>>({
      success: true,
      data: chatInfo,
      message: '–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
    }, { status: 201 });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞:', error);
    return NextResponse.json<ApiResponse>({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
} 