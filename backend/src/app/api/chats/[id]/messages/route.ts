import { NextRequest, NextResponse } from 'next/server';
import { requireAuth } from '../../../../../lib/auth';
import { prisma } from '../../../../../lib/prisma';
import { generateApostleResponse } from '../../../../../lib/openai';
import { ChatMessageInfo, ApiResponse, SendMessageRequest } from '../../../../../types/api';

// POST /api/chats/[id]/messages - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  console.log('üöÄ Backend API /chats/[id]/messages –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authUser = await requireAuth(request);
    if (!authUser) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      }, { status: 401 });
    }

    const { id: chatId } = params;
    const body: SendMessageRequest = await request.json();
    const { content, voiceUrl } = body;

    console.log('üì• –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç:', chatId);
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', authUser.email);
    console.log('üí¨ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:', content?.substring(0, 100) + '...');

    if (!content?.trim()) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const chat = await prisma.chat.findFirst({
      where: {
        id: chatId,
        userId: authUser.id
      },
      include: {
        apostle: {
          include: {
            virtue: true
          }
        }
      }
    });

    if (!chat) {
      console.error('‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 });
    }

    console.log('‚úÖ –ß–∞—Ç –Ω–∞–π–¥–µ–Ω:', chat.name, '—Å –∞–ø–æ—Å—Ç–æ–ª–æ–º:', chat.apostle.name);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const recentMessages = await prisma.chatMessage.findMany({
      where: { chatId },
      orderBy: { createdAt: 'desc' },
      take: 5, // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    });

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
    const context = recentMessages
      .reverse() // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
      .map(msg => `${msg.sender === 'USER' ? 'user' : 'assistant'}: ${msg.content}`);

    console.log('üß† –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI:', context.length, '—Å–æ–æ–±—â–µ–Ω–∏–π');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const userMessage = await prisma.chatMessage.create({
      data: {
        chatId,
        apostleId: chat.apostleId,
        sender: 'USER',
        content: content.trim(),
        voiceUrl: voiceUrl || null,
      }
    });

    console.log('üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', userMessage.id);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∞–ø–æ—Å—Ç–æ–ª–∞
    const systemPrompt = chat.apostle.systemPrompt || 
      `–¢—ã - ${chat.apostle.name}, –∞–ø–æ—Å—Ç–æ–ª ${chat.apostle.virtue?.name || '–º—É–¥—Ä–æ—Å—Ç–∏'}. –¢–≤–æ–π –∞—Ä—Ö–µ—Ç–∏–ø - ${chat.apostle.archetype}. ${chat.apostle.personality}`;
    
    console.log('ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∞–ø–æ—Å—Ç–æ–ª–∞...');
    
    const aiResponse = await generateApostleResponse(
      chat.apostle.id,
      content.trim(),
      context,
      systemPrompt
    );

    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI:', aiResponse.substring(0, 100) + '...');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞–ø–æ—Å—Ç–æ–ª–∞
    const apostleMessage = await prisma.chatMessage.create({
      data: {
        chatId,
        apostleId: chat.apostleId,
        sender: 'APOSTLE',
        content: aiResponse,
      }
    });

    console.log('üíæ –û—Ç–≤–µ—Ç –∞–ø–æ—Å—Ç–æ–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', apostleMessage.id);

    // –û–±–Ω–æ–≤–ª—è–µ–º lastActiveDate –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.user.update({
      where: { id: authUser.id },
      data: { lastActiveDate: new Date() }
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –∞–ø–æ—Å—Ç–æ–ª–∞
    const result: ChatMessageInfo = {
      id: apostleMessage.id,
      sender: apostleMessage.sender,
      content: apostleMessage.content,
      voiceUrl: apostleMessage.voiceUrl,
      createdAt: apostleMessage.createdAt,
      metadata: apostleMessage.metadata
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É');

    return NextResponse.json<ApiResponse<ChatMessageInfo>>({
      success: true,
      data: result,
      message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
    }, { status: 201 });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    return NextResponse.json<ApiResponse>({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
} 