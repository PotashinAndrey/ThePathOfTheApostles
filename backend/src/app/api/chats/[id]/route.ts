import { NextRequest, NextResponse } from 'next/server';
import { requireAuth } from '../../../../lib/auth';
import { prisma } from '../../../../lib/prisma';
import { ChatInfo, ChatMessageInfo, ApiResponse } from '../../../../types/api';

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  console.log('üöÄ Backend API /chats/[id] –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å –¥–ª—è —á–∞—Ç–∞:', params.id);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authUser = await requireAuth(request);
    if (!authUser) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      }, { status: 401 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const { searchParams } = new URL(request.url);
    const page = parseInt(searchParams.get('page') || '1');
    const limit = parseInt(searchParams.get('limit') || '10');
    
    console.log('üìÑ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏:', { page, limit });

    // –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const chat = await prisma.chat.findFirst({
      where: { 
        id: params.id,
        userId: authUser.id
      },
      include: {
        apostle: {
          include: {
            virtue: true
          }
        },
        path: true,
        currentChallenge: true
      }
    });

    if (!chat) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const totalMessages = await prisma.chatMessage.count({
      where: { chatId: params.id }
    });

    // –í—ã—á–∏—Å–ª—è–µ–º offset –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞)
    const offset = Math.max(0, totalMessages - (page * limit));
    const take = Math.min(limit, totalMessages - offset);

    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:', {
      totalMessages,
      page,
      limit,
      offset,
      take
    });

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    const messages = await prisma.chatMessage.findMany({
      where: { chatId: params.id },
      orderBy: { createdAt: 'asc' }, // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
      skip: offset,
      take: take,
      include: {
        relatedChallenge: true
      }
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç API
    const chatMessages: ChatMessageInfo[] = messages.map(message => ({
      id: message.id,
      sender: message.sender,
      content: message.content,
      voiceUrl: message.voiceUrl,
      createdAt: message.createdAt,
      metadata: message.metadata
    }));

    const chatInfo: ChatInfo = {
      id: chat.id,
      name: chat.name,
      apostle: {
        id: chat.apostle.id,
        name: chat.apostle.name,
        title: chat.apostle.title,
        description: chat.apostle.description,
        archetype: chat.apostle.archetype,
        personality: chat.apostle.personality,
        icon: chat.apostle.icon,
        color: chat.apostle.color,
        virtue: chat.apostle.virtue ? {
          id: chat.apostle.virtue.id,
          name: chat.apostle.virtue.name,
          description: chat.apostle.virtue.description
        } : undefined
      },
      lastMessage: chatMessages[0],
      unreadCount: 0,
      path: chat.path ? {
        id: chat.path.id,
        name: chat.path.name,
        description: chat.path.description,
        icon: chat.path.icon,
        progress: 0,
        totalChallenges: 0,
        completedChallenges: 0,
        challenges: []
      } : undefined,
      currentChallenge: chat.currentChallenge ? {
        id: chat.currentChallenge.id,
        name: chat.currentChallenge.name,
        description: chat.currentChallenge.description,
        icon: chat.currentChallenge.icon,
        apostle: {
          id: chat.apostle.id,
          name: chat.apostle.name,
          title: chat.apostle.title,
          description: chat.apostle.description,
          archetype: chat.apostle.archetype,
          personality: chat.apostle.personality,
          icon: chat.apostle.icon,
          color: chat.apostle.color,
          virtue: chat.apostle.virtue ? {
            id: chat.apostle.virtue.id,
            name: chat.apostle.virtue.name,
            description: chat.apostle.virtue.description
          } : undefined
        },
        isCompleted: false,
        isActive: true
      } : undefined
    };

    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω —á–∞—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:', messages.length);
    
    return NextResponse.json<ApiResponse<{
      chat: ChatInfo;
      messages: ChatMessageInfo[];
      pagination: {
        page: number;
        limit: number;
        hasMore: boolean;
      };
    }>>({
      success: true,
      data: {
        chat: chatInfo,
        messages: chatMessages,
        pagination: {
          page,
          limit,
          hasMore: offset > 0
        }
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞:', error);
    return NextResponse.json<ApiResponse>({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
} 