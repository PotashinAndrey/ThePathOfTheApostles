import { NextRequest, NextResponse } from 'next/server';
import { 
  validateEmail, 
  validatePassword, 
  createUserWithProgress, 
  generateToken 
} from '../../../../lib/auth';
import { prisma } from '../../../../lib/prisma';
import { RegisterRequest, AuthResponse, ApiResponse } from '../../../../types/api';

export async function POST(request: NextRequest) {
  console.log('üöÄ Backend API /auth/register –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å');
  
  try {
    const body: RegisterRequest = await request.json();
    console.log('üì¶ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', { ...body, password: '[–°–ö–†–´–¢–û]', confirmPassword: '[–°–ö–†–´–¢–û]' });
    
    const { email, password, confirmPassword, name } = body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!email || !password || !confirmPassword || !name) {
      console.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤');
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ù–µ–¥–æ—Å—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: email, password, confirmPassword, name'
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
    if (password !== confirmPassword) {
      console.error('‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'
      }, { status: 400 });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    if (!validateEmail(email)) {
      console.error('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π email');
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π email –∞–¥—Ä–µ—Å'
      }, { status: 400 });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    const passwordValidation = validatePassword(password);
    if (!passwordValidation.isValid) {
      console.error('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø–∞—Ä–æ–ª—å:', passwordValidation.errors);
      return NextResponse.json<ApiResponse>({
        success: false,
        error: passwordValidation.errors.join(', ')
      }, { status: 400 });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
    if (name.length < 2 || name.length > 50) {
      console.error('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–º—è');
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤'
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email:', email);
    const existingUser = await prisma.user.findUnique({
      where: { email }
    });

    if (existingUser) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
      }, { status: 409 });
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î...');
    const user = await createUserWithProgress({
      email,
      name,
      password
    });

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', user.email);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    const token = generateToken(user);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const response: ApiResponse<AuthResponse> = {
      success: true,
      data: {
        token,
        user: {
          id: user.id,
          name: user.name,
          email: user.email,
          joinDate: user.joinDate,
          lastActiveDate: user.joinDate,
          streak: 0,
          status: user.status,
        },
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'
      },
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'
    };

    return NextResponse.json(response, { status: 201 });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    return NextResponse.json<ApiResponse>({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
} 