import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '../../../../lib/prisma';
import { generateToken, verifyPassword } from '../../../../lib/auth';
import { LoginRequest, AuthResponse, ApiResponse } from '../../../../types/api';
import { RateLimiter } from '../../../../lib/rateLimiter';

export async function POST(request: NextRequest) {
  console.log('üöÄ Backend API /auth/login –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å');
  
  try {
    const body: LoginRequest = await request.json();
    console.log('üì¶ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤—Ö–æ–¥–∞:', { ...body, password: '[–°–ö–†–´–¢–û]' });
    
    const { email, password } = body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!email || !password) {
      console.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤');
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ù–µ–¥–æ—Å—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: email, password'
      }, { status: 400 });
    }

    // –ü–æ–ª—É—á–∞–µ–º IP –¥–ª—è rate limiting
    const clientIP = request.headers.get('x-forwarded-for') || 
                     request.headers.get('x-real-ip') || 
                     'unknown';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting (–ø–æ IP + email)
    const rateLimitKey = `${clientIP}:${email}`;
    const rateLimitCheck = RateLimiter.isAllowed(rateLimitKey);
    
    if (!rateLimitCheck.allowed) {
      console.warn('üö® Rate limit exceeded:', { email, ip: clientIP, message: rateLimitCheck.message });
      return NextResponse.json<ApiResponse>({
        success: false,
        error: rateLimitCheck.message || '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞'
      }, { status: 429 });
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞ (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞—Ç–∞–∫)
    console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', { 
      email, 
      ip: clientIP,
      userAgent: request.headers.get('user-agent') || 'unknown',
      timestamp: new Date().toISOString()
    });

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email:', email);
    const user = await prisma.user.findUnique({
      where: { email },
      select: {
        id: true,
        email: true,
        name: true,
        passwordHash: true,
        salt: true,
        status: true,
        joinDate: true,
        lastActiveDate: true,
        streak: true,
        avatar: true,
        currentSubscription: true
      }
    });

    // –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞—Ä–æ–ª—è —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å timing attacks
    let isPasswordValid = false;
    
    if (user && user.status === 'ACTIVE') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
      console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      isPasswordValid = await verifyPassword(password, user.passwordHash, user.salt);
    } else {
      // –î–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã–ø–æ–ª–Ω—è–µ–º "—Ñ–∏–∫—Ç–∏–≤–Ω—É—é" –ø—Ä–æ–≤–µ—Ä–∫—É
      // —á—Ç–æ–±—ã –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –±—ã–ª–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º
      console.log('üîê –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞—Ä–æ–ª—è –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç timing attacks...');
      const dummyHash = '$2b$10$dummyHashToPreventTimingAttacks';
      const dummySalt = '$2b$10$dummySaltToPreventTimingAttacks';
      await verifyPassword(password, dummyHash, dummySalt);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!user) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (—Å–∫—Ä—ã–≤–∞–µ–º –æ—Ç –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞)');
      RateLimiter.recordFailedAttempt(rateLimitKey);
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
      }, { status: 401 });
    }

    if (user.status !== 'ACTIVE') {
      console.error('‚ùå –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
      RateLimiter.recordFailedAttempt(rateLimitKey);
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
      }, { status: 401 });
    }

    if (!isPasswordValid) {
      console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å (—Å–∫—Ä—ã–≤–∞–µ–º –æ—Ç –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞)');
      RateLimiter.recordFailedAttempt(rateLimitKey);
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
      }, { status: 401 });
    }

    console.log('‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π');

    // –û–±–Ω–æ–≤–ª—è–µ–º lastActiveDate
    await prisma.user.update({
      where: { id: user.id },
      data: { lastActiveDate: new Date() }
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    console.log('üé´ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞...');
    const token = generateToken(user);

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.email);

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ
    RateLimiter.recordSuccessfulLogin(rateLimitKey);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const response: ApiResponse<AuthResponse> = {
      success: true,
      data: {
        token,
        user: {
          id: user.id,
          email: user.email,
          name: user.name,
          joinDate: user.joinDate,
          currentSubscription: user.currentSubscription,
          lastActiveDate: user.lastActiveDate,
          streak: user.streak,
          avatar: user.avatar,
          status: user.status
        },
        message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É'
      },
      message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É'
    };

    return NextResponse.json(response);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
    return NextResponse.json<ApiResponse>({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
} 