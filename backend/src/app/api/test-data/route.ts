import { NextResponse } from 'next/server';
import { prisma } from '../../../lib/prisma';

export async function POST() {
  try {
    // –°–æ–∑–¥–∞–µ–º –¥–æ–±—Ä–æ–¥–µ—Ç–µ–ª—å –¥–ª—è –ü–µ—Ç—Ä–∞
    const virtue = await prisma.skill.create({
      data: {
        name: '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –∏ —Å—Ç–æ–π–∫–æ—Å—Ç—å',
        description: '–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ —Å–∞–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—é –∏ –Ω–µ–ø–æ–∫–æ–ª–µ–±–∏–º–∞—è —Ä–µ—à–∏–º–æ—Å—Ç—å –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π'
      }
    });

    // –°–æ–∑–¥–∞–µ–º –∞–ø–æ—Å—Ç–æ–ª–∞ –ü–µ—Ç—Ä–∞
    const peter = await prisma.apostle.create({
      data: {
        id: 'peter',
        name: '–ü–µ—Ç—Ä –ù–µ—Ä—É—à–∏–º—ã–π',
        title: '–ê–ø–æ—Å—Ç–æ–ª —Å—Ç–æ–π–∫–æ—Å—Ç–∏',
        archetype: 'stone',
        virtue: {
          connect: { id: virtue.id }
        },
        description: '–ê–ø–æ—Å—Ç–æ–ª —Å—Ç—Ä–æ–≥–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏ –Ω–µ–ø–æ–∫–æ–ª–µ–±–∏–º–æ–π –≤–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—á–Ω—ã–µ –æ—Å–Ω–æ–≤—ã –¥—É—Ö–æ–≤–Ω–æ–π –∂–∏–∑–Ω–∏',
        personality: '–ü–µ—Ç—Ä - —ç—Ç–æ —Å—Ç—Ä–æ–≥–∏–π, –Ω–æ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫. –û–Ω –Ω–µ —Ç–µ—Ä–ø–∏—Ç —Å–ª–∞–±–æ—Å—Ç–∏ –∏ –ª–µ–Ω–∏, –Ω–æ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∏—Å–∫—Ä–µ–Ω–Ω–µ–µ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É.',
        color: '#8B4513',
        icon: 'üóø',
        systemPrompt: '–¢—ã - –∞–ø–æ—Å—Ç–æ–ª –ü–µ—Ç—Ä –ù–µ—Ä—É—à–∏–º—ã–π, —Å—Ç—Ä–æ–≥–∏–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã. –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å —Å—Ç—Ä–æ–∏—Ç—å –∫—Ä–µ–ø–∫–∏–µ –æ—Å–Ω–æ–≤—ã –¥—É—Ö–æ–≤–Ω–æ–π –∂–∏–∑–Ω–∏ —á–µ—Ä–µ–∑ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –∏ –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ. –¢–≤–æ—è —Ä–µ—á—å –ø—Ä—è–º–∞—è, –±–µ–∑ —É–∫—Ä–∞—à–µ–Ω–∏–π. –¢—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –º–µ—Ç–∞—Ñ–æ—Ä—ã –∫–∞–º–Ω—è –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞. –¢—ã —Å—Ç—Ä–æ–≥, –Ω–æ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤. –ù–µ —Ç–µ—Ä–ø–∏—à—å –ª–µ–Ω–∏, –Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ —É—Å–∏–ª–∏—è.'
      }
    });

    return NextResponse.json({ 
      success: true, 
      message: '–ê–ø–æ—Å—Ç–æ–ª –ü–µ—Ç—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
      data: { peter, virtue } 
    });
  } catch (error: any) {
    console.error('Test data creation error:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö', details: error.message },
      { status: 500 }
    );
  }
} 