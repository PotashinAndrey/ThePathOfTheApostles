import { NextResponse } from 'next/server';
import { prisma } from '../../../lib/prisma';

export async function POST() {
  try {
    // –°–æ–∑–¥–∞–µ–º –∞–ø–æ—Å—Ç–æ–ª–∞ –ü–µ—Ç—Ä–∞
    const peter = await prisma.apostle.create({
      data: {
        id: 'peter',
        name: '–ü–µ—Ç—Ä –ù–µ—Ä—É—à–∏–º—ã–π',
        archetype: 'stone',
        virtue: 'discipline and steadfastness',
        description: '–ê–ø–æ—Å—Ç–æ–ª —Å—Ç—Ä–æ–≥–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏ –Ω–µ–ø–æ–∫–æ–ª–µ–±–∏–º–æ–π –≤–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—á–Ω—ã–µ –æ—Å–Ω–æ–≤—ã –¥—É—Ö–æ–≤–Ω–æ–π –∂–∏–∑–Ω–∏',
        personality: '–ü–µ—Ç—Ä - —ç—Ç–æ —Å—Ç—Ä–æ–≥–∏–π, –Ω–æ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫. –û–Ω –Ω–µ —Ç–µ—Ä–ø–∏—Ç —Å–ª–∞–±–æ—Å—Ç–∏ –∏ –ª–µ–Ω–∏, –Ω–æ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∏—Å–∫—Ä–µ–Ω–Ω–µ–µ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É.',
        color: '#8B4513',
        icon: 'üóø',
        systemPrompt: '–¢—ã - –∞–ø–æ—Å—Ç–æ–ª –ü–µ—Ç—Ä –ù–µ—Ä—É—à–∏–º—ã–π, —Å—Ç—Ä–æ–≥–∏–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã. –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å —Å—Ç—Ä–æ–∏—Ç—å –∫—Ä–µ–ø–∫–∏–µ –æ—Å–Ω–æ–≤—ã –¥—É—Ö–æ–≤–Ω–æ–π –∂–∏–∑–Ω–∏ —á–µ—Ä–µ–∑ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –∏ –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ. –¢–≤–æ—è —Ä–µ—á—å –ø—Ä—è–º–∞—è, –±–µ–∑ —É–∫—Ä–∞—à–µ–Ω–∏–π. –¢—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –º–µ—Ç–∞—Ñ–æ—Ä—ã –∫–∞–º–Ω—è –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞. –¢—ã —Å—Ç—Ä–æ–≥, –Ω–æ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤. –ù–µ —Ç–µ—Ä–ø–∏—à—å –ª–µ–Ω–∏, –Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ —É—Å–∏–ª–∏—è.',
        welcomeMessage: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –∏—â—É—â–∏–π. –Ø - –ü–µ—Ç—Ä, —Ç–≤–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –≤ –ø—É—Ç–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã. –ì–æ—Ç–æ–≤ –ª–∏ —Ç—ã —Å—Ç—Ä–æ–∏—Ç—å –Ω–∞ –∫–∞–º–Ω–µ, –∞ –Ω–µ –Ω–∞ –ø–µ—Å–∫–µ?',
        traits: ['–ù–µ—Ä—É—à–∏–º–æ—Å—Ç—å', '–ü—Ä—è–º–æ—Ç–∞', '–°—Ç—Ä–æ–≥–æ—Å—Ç—å', '–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å', '–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ'],
        strengths: ['–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞', '–°—Ç–æ–π–∫–æ—Å—Ç—å', '–°—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ—Å—Ç—å', '–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å', '–ß–µ—Å—Ç–Ω–æ—Å—Ç—å'],
        keywords: ['–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞', '—Å—Ç–æ–π–∫–æ—Å—Ç—å', '–ø—Ä–∏–≤—ã—á–∫–∏', '–ø–æ—Ä—è–¥–æ–∫', '–ª–µ–Ω—å', '—Å–ª–∞–±–æ—Å—Ç—å', '—Å–∏–ª–∞', '–∫–∞–º–µ–Ω—å', '–æ—Å–Ω–æ–≤–∞', '—Å—Ç—Ä–æ–∏—Ç—å']
      }
    });

    // –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ü–µ—Ç—Ä–∞
    const tasks = [
      {
        title: '–ö–ª—è—Ç–≤–∞ —Å–∞–º–æ–º—É —Å–µ–±–µ',
        description: '–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –ø—Ä–æ—Å—Ç—É—é –ø—Ä–∏–≤—ã—á–∫—É –∏ –ø–æ–∫–ª—è–Ω–∏—Å—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –µ—ë 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Ç—Ä–µ–Ω–Ω—è—è –º–æ–ª–∏—Ç–≤–∞, –∑–∞—Ä—è–¥–∫–∞ –∏–ª–∏ —á—Ç–µ–Ω–∏–µ –¥—É—Ö–æ–≤–Ω–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã.',
        day: 1,
        type: 'ritual',
        duration: '15 –º–∏–Ω—É—Ç',
        difficulty: 'easy',
        scripture: '–ú–∞—Ç—Ñ–µ—è 5:37 - "–î–∞ –±—É–¥–µ—Ç —Å–ª–æ–≤–æ –≤–∞—à–µ: –¥–∞, –¥–∞; –Ω–µ—Ç, –Ω–µ—Ç"',
        tips: ['–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–º–æ–µ', '–ó–∞–ø–∏—à–∏ –∫–ª—è—Ç–≤—É –Ω–∞ –±—É–º–∞–≥–µ', '–ü—Ä–æ–∏–∑–Ω–µ—Å–∏ –µ—ë –≤—Å–ª—É—Ö'],
        apostleId: 'peter'
      },
      {
        title: '–£—Ç—Ä–µ–Ω–Ω—è—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞',
        description: '–í—Å—Ç–∞–Ω—å –Ω–∞ 15 –º–∏–Ω—É—Ç —Ä–∞–Ω—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ –∏ –ø–æ—Å–≤—è—Ç–∏ —ç—Ç–æ –≤—Ä–µ–º—è –º–æ–ª–∏—Ç–≤–µ –∏–ª–∏ –º–µ–¥–∏—Ç–∞—Ü–∏–∏. –ù–∞—á–Ω–∏ —Å—Ç—Ä–æ–∏—Ç—å —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –¥–Ω—è —Å –¥—É—Ö–æ–≤–Ω–æ–≥–æ –∫–∞–º–Ω—è.',
        day: 2,
        type: 'practice',
        duration: '15 –º–∏–Ω—É—Ç',
        difficulty: 'easy',
        scripture: '–ü—Å–∞–ª–æ–º 5:3 - "–ì–æ—Å–ø–æ–¥–∏! —Ä–∞–Ω–æ —É—Å–ª—ã—à—å –≥–æ–ª–æ—Å –º–æ–π"',
        tips: ['–ü—Ä–∏–≥–æ—Ç–æ–≤—å –±—É–¥–∏–ª—å–Ω–∏–∫ —Å –≤–µ—á–µ—Ä–∞', '–ù–µ –≤–∫–ª—é—á–∞–π —Ç–µ–ª–µ—Ñ–æ–Ω –ø–µ—Ä–≤—ã–µ 15 –º–∏–Ω—É—Ç', '–°–æ–∑–¥–∞–π —Ä–∏—Ç—É–∞–ª –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è'],
        apostleId: 'peter'
      }
    ];

    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –∏–∑ —Å—Ö–µ–º—ã
    const createdTasks = [];
    for (const task of tasks) {
      const createdTask = await prisma.weeklyTask.create({ data: task });
      createdTasks.push(createdTask);
    }

    return NextResponse.json({ 
      success: true, 
      message: '–î–∞–Ω–Ω—ã–µ –ü–µ—Ç—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã',
      data: { peter, tasks: createdTasks } 
    });
  } catch (error: any) {
    console.error('Test data creation error:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö', details: error.message },
      { status: 500 }
    );
  }
} 