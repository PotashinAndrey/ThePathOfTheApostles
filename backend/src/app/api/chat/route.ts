import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '../../../lib/prisma';
import { generateApostleResponse } from '../../../lib/openai';

export async function POST(request: NextRequest) {
  console.log('üöÄ Backend API /chat –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å');
  
  try {
    const body = await request.json();
    console.log('üì¶ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', body);
    
    const { apostleId, message, context, userId, additionalContext } = body;

    console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:');
    console.log('- apostleId:', apostleId);
    console.log('- message:', message);
    console.log('- context:', context);
    console.log('- userId:', userId);
    console.log('- additionalContext:', additionalContext);

    if (!apostleId || !message) {
      console.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤');
      return NextResponse.json(
        { error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç apostleId –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ' },
        { status: 400 }
      );
    }

    console.log('üîç –ü–æ–∏—Å–∫ –∞–ø–æ—Å—Ç–æ–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    // Get apostle data
    const apostle = await prisma.apostle.findUnique({
      where: { id: apostleId },
    });

    console.log('üë§ –ù–∞–π–¥–µ–Ω –∞–ø–æ—Å—Ç–æ–ª:', apostle ? apostle.name : '–Ω–µ –Ω–∞–π–¥–µ–Ω');

    if (!apostle) {
      console.error('‚ùå –ê–ø–æ—Å—Ç–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', apostleId);
      return NextResponse.json(
        { error: '–ê–ø–æ—Å—Ç–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    let enhancedContext = context || [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
    if (additionalContext) {
      enhancedContext.unshift(`[–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${additionalContext}]`);
    }

    console.log('ü§ñ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI:', enhancedContext);

    // Generate AI response with enhanced system prompt
    const systemPrompt = apostle.systemPrompt || `–¢—ã - ${apostle.name}, –∞–ø–æ—Å—Ç–æ–ª ${apostle.virtue}. –¢–≤–æ–π –∞—Ä—Ö–µ—Ç–∏–ø - ${apostle.archetype}. ${apostle.personality}`;
    
    console.log('üìù System prompt:', systemPrompt);
    console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI...');
    
    const aiResponse = await generateApostleResponse(
      apostleId,
      message,
      enhancedContext,
      systemPrompt
    );

    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI:', aiResponse);

    // Save chat message if userId is provided
    if (userId) {
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      console.log('üë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î:', userId);
      
      let user = await prisma.user.findUnique({
        where: { id: userId }
      });
      
      if (!user) {
        console.log('üÜï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ...');
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ userId (dev-user-timestamp –∏–ª–∏ user-timestamp-random)
        const isDevUser = userId.startsWith('dev-user-');
        const email = isDevUser ? 'dev@apostles.app' : `user-${Date.now()}@apostles.app`;
        const name = isDevUser ? '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        
        user = await prisma.user.create({
          data: {
            id: userId,
            email: email,
            name: name,
            currentApostleId: apostleId, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∞–ø–æ—Å—Ç–æ–ª–∞
          }
        });
        
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ –ë–î:', user);
      } else {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î:', user.name);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º lastActiveDate
        await prisma.user.update({
          where: { id: userId },
          data: { 
            lastActiveDate: new Date(),
            currentApostleId: apostleId // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∞–ø–æ—Å—Ç–æ–ª–∞
          }
        });
      }
      
      // –¢–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
      await prisma.chatMessage.createMany({
        data: [
          {
            userId,
            apostleId,
            role: 'user',
            content: message,
          },
          {
            userId,
            apostleId,
            role: 'assistant',
            content: aiResponse,
          },
        ],
      });
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }

    const response = {
      message: aiResponse,
      apostleId,
      timestamp: new Date().toISOString(),
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É:', response);

    return NextResponse.json(response);
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ Chat API:', error);
    console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      message: (error as Error)?.message,
      stack: (error as Error)?.stack,
      name: (error as Error)?.name
    });
    
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
} 