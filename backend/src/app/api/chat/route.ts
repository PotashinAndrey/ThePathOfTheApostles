import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '../../../lib/prisma';
import { generateApostleResponse } from '../../../lib/openai';
import { requireAuth } from '../../../lib/auth';
import { ApiResponse } from '../../../types/api';

export async function POST(request: NextRequest) {
  console.log('üöÄ Backend API /chat –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authUser = await requireAuth(request);
    if (!authUser) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      }, { status: 401 });
    }

    const body = await request.json();
    console.log('üì¶ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', body);
    console.log('üë§ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', authUser.email);
    
    const { apostleId, message, context, additionalContext, chatId } = body;

    console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:');
    console.log('- apostleId:', apostleId);
    console.log('- message:', message);
    console.log('- context:', context);
    console.log('- chatId:', chatId);
    console.log('- userId (–∏–∑ —Ç–æ–∫–µ–Ω–∞):', authUser.id);
    console.log('- additionalContext:', additionalContext);

    if (!apostleId || !message) {
      console.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤');
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç apostleId –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ'
      }, { status: 400 });
    }

    console.log('üîç –ü–æ–∏—Å–∫ –∞–ø–æ—Å—Ç–æ–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    // Get apostle data
    const apostle = await prisma.apostle.findUnique({
      where: { id: apostleId },
      include: {
        virtue: true
      }
    });

    console.log('üë§ –ù–∞–π–¥–µ–Ω –∞–ø–æ—Å—Ç–æ–ª:', apostle ? apostle.name : '–Ω–µ –Ω–∞–π–¥–µ–Ω');

    if (!apostle) {
      console.error('‚ùå –ê–ø–æ—Å—Ç–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', apostleId);
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ê–ø–æ—Å—Ç–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 });
    }

    // –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç
    let chat;
    if (chatId) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      chat = await prisma.chat.findFirst({
        where: {
          id: chatId,
          userId: authUser.id
        }
      });
      
      if (!chat) {
        console.error('‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
        return NextResponse.json<ApiResponse>({
          success: false,
          error: '–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }, { status: 404 });
      }
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
      chat = await prisma.chat.create({
        data: {
          name: `–ë–µ—Å–µ–¥–∞ —Å ${apostle.name}`,
          userId: authUser.id,
          apostleId: apostleId
        }
      });
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç:', chat.id);
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    let enhancedContext = context || [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
    if (additionalContext) {
      enhancedContext.unshift(`[–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${additionalContext}]`);
    }

    console.log('ü§ñ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI:', enhancedContext);

    // Generate AI response with enhanced system prompt
    const systemPrompt = apostle.systemPrompt || `–¢—ã - ${apostle.name}, –∞–ø–æ—Å—Ç–æ–ª ${apostle.virtue?.name || '–º—É–¥—Ä–æ—Å—Ç–∏'}. –¢–≤–æ–π –∞—Ä—Ö–µ—Ç–∏–ø - ${apostle.archetype}. ${apostle.personality}`;
    
    console.log('üìù System prompt:', systemPrompt);
    console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI...');
    
    const aiResponse = await generateApostleResponse(
      apostleId,
      message,
      enhancedContext,
      systemPrompt
    );

    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI:', aiResponse);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º lastActiveDate –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.user.update({
      where: { id: authUser.id },
      data: { 
        lastActiveDate: new Date()
      }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
    await prisma.chatMessage.createMany({
      data: [
        {
          chatId: chat.id,
          apostleId: apostleId,
          sender: 'USER',
          content: message,
        },
        {
          chatId: chat.id,
          apostleId: apostleId,
          sender: 'APOSTLE',
          content: aiResponse,
        },
      ],
    });
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');

    const response = {
      success: true,
      data: {
        message: aiResponse,
        apostleId,
        chatId: chat.id,
        timestamp: new Date().toISOString(),
      }
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É:', response);

    return NextResponse.json<ApiResponse>(response);
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ Chat API:', error);
    console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      message: (error as Error)?.message,
      stack: (error as Error)?.stack,
      name: (error as Error)?.name
    });
    
    return NextResponse.json<ApiResponse>({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
} 