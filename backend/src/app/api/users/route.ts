import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '../../../lib/prisma';

// GET /api/users?id=userId - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function GET(request: NextRequest) {
  console.log('üöÄ Backend API /users GET –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å');
  
  try {
    const { searchParams } = new URL(request.url);
    const userId = searchParams.get('id');
    
    console.log('üîç –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID:', userId);

    if (!userId) {
      console.error('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return NextResponse.json(
        { error: '–ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
        { status: 400 }
      );
    }

    const user = await prisma.user.findUnique({
      where: { id: userId },
      include: {
        chatMessages: {
          orderBy: { timestamp: 'desc' },
          take: 10, // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        },
        missions: {
          orderBy: { startDate: 'desc' },
          take: 5, // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏—Å—Å–∏–π
        }
      }
    });

    if (!user) {
      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', userId);
      return NextResponse.json(
        { error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.name);
    return NextResponse.json(user);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ GET /users:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// POST /api/users - —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function POST(request: NextRequest) {
  console.log('üöÄ Backend API /users POST –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å');
  
  try {
    const body = await request.json();
    console.log('üì¶ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', body);
    
    const { id, email, name, currentApostleId } = body;

    if (!id || !email || !name) {
      console.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤');
      return NextResponse.json(
        { error: '–ù–µ–¥–æ—Å—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: id, email, name' },
        { status: 400 }
      );
    }

    console.log('üë§ –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { id, email, name });

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const user = await prisma.user.upsert({
      where: { id },
      update: {
        name,
        currentApostleId,
        lastActiveDate: new Date(),
      },
      create: {
        id,
        email,
        name,
        currentApostleId,
        joinDate: new Date(),
        lastActiveDate: new Date(),
      },
    });

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω:', user);
    return NextResponse.json(user);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ POST /users:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
} 