import { NextRequest, NextResponse } from 'next/server';
import { requireAuth } from '../../../../lib/auth';
import { prisma } from '../../../../lib/prisma';
import { UserProfileResponse, ApiResponse } from '../../../../types/api';

export async function GET(request: NextRequest) {
  console.log('üöÄ Backend API /user/profile –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authUser = await requireAuth(request);
    if (!authUser) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      }, { status: 401 });
    }

    console.log('üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', authUser.email);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    const user = await prisma.user.findUnique({
      where: { id: authUser.id },
      select: {
        id: true,
        name: true,
        email: true,
        joinDate: true,
        lastActiveDate: true,
        streak: true,
        avatar: true,
        status: true,
        currentSubscription: true
      }
    });

    if (!user) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 });
    }

    // –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    const profile: UserProfileResponse = {
      id: user.id,
      name: user.name,
      email: user.email,
      joinDate: user.joinDate,
      currentSubscription: user.currentSubscription,
      lastActiveDate: user.lastActiveDate,
      streak: user.streak,
      avatar: user.avatar,
      status: user.status,
      totalChallengesCompleted: 0, // –ó–∞–≥–ª—É—à–∫–∞, –ø–æ—Ç–æ–º –ø–æ–¥—Å—á–∏—Ç–∞–µ–º
      totalPathsCompleted: 0, // –ó–∞–≥–ª—É—à–∫–∞, –ø–æ—Ç–æ–º –ø–æ–¥—Å—á–∏—Ç–∞–µ–º
      achievements: [], // –ó–∞–≥–ª—É—à–∫–∞, –ø–æ—Ç–æ–º –ø–æ–ª—É—á–∏–º –∏–∑ –ë–î
      currentPath: undefined // –ó–∞–≥–ª—É—à–∫–∞, –ø–æ—Ç–æ–º –ø–æ–ª—É—á–∏–º –∏–∑ –ë–î
    };

    console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω');
    
    return NextResponse.json<ApiResponse<UserProfileResponse>>({
      success: true,
      data: profile
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
    return NextResponse.json<ApiResponse>({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
}

// PUT /api/user/profile - –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
export async function PUT(request: NextRequest) {
  console.log('üöÄ Backend API /user/profile PUT –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authUser = await requireAuth(request);
    if (!authUser) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      }, { status: 401 });
    }

    const body = await request.json();
    const { name, avatar } = body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (name && (name.length < 2 || name.length > 50)) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤'
      }, { status: 400 });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    const updatedUser = await prisma.user.update({
      where: { id: authUser.id },
      data: {
        ...(name && { name }),
        ...(avatar && { avatar }),
        lastActiveDate: new Date()
      },
      select: {
        id: true,
        name: true,
        email: true,
        joinDate: true,
        lastActiveDate: true,
        streak: true,
        avatar: true,
        status: true,
        currentSubscription: true
      }
    });

    const profile: UserProfileResponse = {
      id: updatedUser.id,
      name: updatedUser.name,
      email: updatedUser.email,
      joinDate: updatedUser.joinDate,
      currentSubscription: updatedUser.currentSubscription,
      lastActiveDate: updatedUser.lastActiveDate,
      streak: updatedUser.streak,
      avatar: updatedUser.avatar,
      status: updatedUser.status,
      totalChallengesCompleted: 0,
      totalPathsCompleted: 0,
      achievements: [],
      currentPath: undefined
    };

    console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω');
    
    return NextResponse.json<ApiResponse<UserProfileResponse>>({
      success: true,
      data: profile,
      message: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
    return NextResponse.json<ApiResponse>({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
} 