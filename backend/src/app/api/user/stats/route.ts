import { NextRequest, NextResponse } from 'next/server';
import { requireAuth } from '../../../../lib/auth';
import { prisma } from '../../../../lib/prisma';
import { UserStatsResponse, ApiResponse } from '../../../../types/api';

export async function GET(request: NextRequest) {
  console.log('üöÄ Backend API /user/stats –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authUser = await requireAuth(request);
    if (!authUser) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      }, { status: 401 });
    }

    console.log('üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', authUser.email);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    const user = await prisma.user.findUnique({
      where: { id: authUser.id },
      include: {
        userProgress: {
          include: {
            completedChallenges: true,
            userPaths: {
              include: {
                paths: true
              }
            }
          }
        }
      }
    });

    if (!user) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const activeChallenges = await prisma.challenge.findMany({
      where: {
        id: {
          in: user.userProgress?.completedChallenges?.currentChallengeId ? 
            [user.userProgress.completedChallenges.currentChallengeId] : []
        }
      },
      include: {
        apostle: {
          include: {
            virtue: true
          }
        }
      }
    });

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å
    const activePathIds = user.userProgress?.userPaths?.activePathIds || [];
    const currentPath = activePathIds.length > 0 ? await prisma.path.findFirst({
      where: { id: activePathIds[0] },
      include: {
        challenges: {
          include: {
            challenge: {
              include: {
                apostle: {
                  include: {
                    virtue: true
                  }
                }
              }
            }
          },
          orderBy: {
            order: 'asc'
          }
        }
      }
    }) : null;

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    const stats: UserStatsResponse = {
      streak: user.streak,
      totalDays: user.streak, // –ü–æ–∫–∞ —á—Ç–æ —Ä–∞–≤–Ω–æ streak
      challengesCompleted: user.userProgress?.completedChallenges?.completedChallengeIds.length || 0,
      pathsCompleted: user.userProgress?.userPaths?.completedPathIds.length || 0,
      currentPath: currentPath ? {
        id: currentPath.id,
        name: currentPath.name,
        description: currentPath.description,
        icon: currentPath.icon,
        progress: 0, // –ü–æ–∫–∞ —á—Ç–æ 0, –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å
        totalChallenges: currentPath.challenges.length,
        completedChallenges: 0, // –ü–æ–∫–∞ —á—Ç–æ 0, –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å
        challenges: currentPath.challenges.map(pc => ({
          id: pc.challenge.id,
          name: pc.challenge.name,
          description: pc.challenge.description,
          icon: pc.challenge.icon,
          apostle: {
            id: pc.challenge.apostle.id,
            name: pc.challenge.apostle.name,
            title: pc.challenge.apostle.title,
            description: pc.challenge.apostle.description,
            archetype: pc.challenge.apostle.archetype,
            personality: pc.challenge.apostle.personality,
            icon: pc.challenge.apostle.icon,
            color: pc.challenge.apostle.color,
            virtue: pc.challenge.apostle.virtue ? {
              id: pc.challenge.apostle.virtue.id,
              name: pc.challenge.apostle.virtue.name,
              description: pc.challenge.apostle.virtue.description
            } : undefined
          },
          isCompleted: false, // –ü–æ–∫–∞ —á—Ç–æ false, –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å
          isActive: false, // –ü–æ–∫–∞ —á—Ç–æ false, –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å
          order: pc.order
        }))
      } : undefined,
      activeChallenges: activeChallenges.map(challenge => ({
        id: challenge.id,
        name: challenge.name,
        description: challenge.description,
        icon: challenge.icon,
        apostle: {
          id: challenge.apostle.id,
          name: challenge.apostle.name,
          title: challenge.apostle.title,
          description: challenge.apostle.description,
          archetype: challenge.apostle.archetype,
          personality: challenge.apostle.personality,
          icon: challenge.apostle.icon,
          color: challenge.apostle.color,
          virtue: challenge.apostle.virtue ? {
            id: challenge.apostle.virtue.id,
            name: challenge.apostle.virtue.name,
            description: challenge.apostle.virtue.description
          } : undefined
        },
        isCompleted: false,
        isActive: true
      }))
    };

    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω–∞');
    return NextResponse.json<ApiResponse<UserStatsResponse>>({
      success: true,
      data: stats
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    return NextResponse.json<ApiResponse>({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
} 