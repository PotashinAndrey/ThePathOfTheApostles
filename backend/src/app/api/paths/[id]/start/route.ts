import { NextRequest, NextResponse } from 'next/server';
import { requireAuth } from '../../../../../lib/auth';
import { prisma } from '../../../../../lib/prisma';
import { ApiResponse } from '../../../../../types/api';

// POST /api/paths/[id]/start - –Ω–∞—á–∞—Ç—å –ø—É—Ç—å
export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  console.log(`üöÄ –ù–∞—á–∞–ª–æ –ø—É—Ç–∏: ${params.id}`);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authUser = await requireAuth(request);
    if (!authUser) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      }, { status: 401 });
    }

    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${authUser.email}`);

    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å
    const path = await prisma.path.findUnique({
      where: { id: params.id }
    });

    if (!path) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º UserMeta –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user = await prisma.user.findUnique({
      where: { id: authUser.id },
      include: {
        meta: {
          include: {
            paths: true
          }
        }
      }
    });

    if (!user) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 });
    }

    // –°–æ–∑–¥–∞–µ–º UserMeta –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!user.meta) {
      // –°–æ–∑–¥–∞–µ–º UserPathsList
      const userPaths = await prisma.userPathsList.create({
        data: {
          userId: authUser.id,
          activePathIds: [path.id],
          completedPathIds: []
        }
      });

      // –°–æ–∑–¥–∞–µ–º UserMeta
      const userMeta = await prisma.userMeta.create({
        data: {
          completedTasks: [],
          activeTasks: [],
          pathsId: userPaths.id,
          userChatsList: []
        }
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ User
      await prisma.user.update({
        where: { id: authUser.id },
        data: { metaId: userMeta.id }
      });

      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –º–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—É—Ç—å');
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø—É—Ç—å
      const activePaths = user.meta.paths?.activePathIds || [];
      if (activePaths.includes(path.id)) {
        return NextResponse.json<ApiResponse>({
          success: false,
          error: '–ü—É—Ç—å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω'
        }, { status: 400 });
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∞–∫—Ç–∏–≤–Ω—ã–º
      if (user.meta.paths) {
        await prisma.userPathsList.update({
          where: { id: user.meta.paths.id },
          data: {
            activePathIds: [...activePaths, path.id]
          }
        });
      } else {
        // –°–æ–∑–¥–∞–µ–º UserPathsList –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const userPaths = await prisma.userPathsList.create({
          data: {
            userId: authUser.id,
            activePathIds: [path.id],
            completedPathIds: []
          }
        });

        await prisma.userMeta.update({
          where: { id: user.meta.id },
          data: { pathsId: userPaths.id }
        });
      }

      console.log('‚úÖ –ü—É—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∞–∫—Ç–∏–≤–Ω—ã–º');
    }

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø—ã—Ç–∞–Ω–∏—è
    const firstTaskWrapper = await activateFirstTask(authUser.id, path);

    return NextResponse.json<ApiResponse>({
      success: true,
      data: {
        message: '–ü—É—Ç—å —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω',
        pathId: path.id,
        firstTaskWrapper: firstTaskWrapper
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—É—Ç–∏:', error);
    return NextResponse.json<ApiResponse>({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
async function activateFirstTask(userId: string, path: any) {
  try {
    console.log('üéØ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø—É—Ç–∏');

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ –ø—É—Ç–∏
    if (!path.challenges || path.challenges.length === 0) {
      console.log('‚ö†Ô∏è –£ –ø—É—Ç–∏ –Ω–µ—Ç –∏—Å–ø—ã—Ç–∞–Ω–∏–π');
      return null;
    }

    const firstChallengeId = path.challenges[0];
    const challenge = await prisma.challenge.findUnique({
      where: { id: firstChallengeId },
      include: {
        apostle: {
          include: {
            virtue: true
          }
        }
      }
    });

    if (!challenge || !challenge.orderedTasks || challenge.orderedTasks.length === 0) {
      console.log('‚ö†Ô∏è –£ –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π');
      return null;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è
    const firstTaskWrapperId = challenge.orderedTasks[0];
    const taskWrapper = await prisma.taskWrapper.findUnique({
      where: { id: firstTaskWrapperId },
      include: {
        task: true,
        apostle: {
          include: {
            virtue: true
          }
        }
      }
    });

    if (!taskWrapper) {
      console.log('‚ö†Ô∏è –ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return null;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∫ –∞–∫—Ç–∏–≤–Ω—ã–º –≤ UserMeta
    const user = await prisma.user.findUnique({
      where: { id: userId },
      include: { meta: true }
    });

    if (user?.meta) {
      const currentActiveTasks = user.meta.activeTasks || [];
      if (!currentActiveTasks.includes(taskWrapper.id)) {
        await prisma.userMeta.update({
          where: { id: user.meta.id },
          data: {
            activeTasks: [...currentActiveTasks, taskWrapper.id]
          }
        });
      }
    }

    console.log(`‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: ${taskWrapper.task.name}`);

    return {
      id: taskWrapper.id,
      challengeId: taskWrapper.challengeId,
      task: {
        id: taskWrapper.task.id,
        name: taskWrapper.task.name,
        description: taskWrapper.task.description
      },
      order: taskWrapper.order,
      apostle: taskWrapper.apostle ? {
        id: taskWrapper.apostle.id,
        name: taskWrapper.apostle.name,
        title: taskWrapper.apostle.title,
        icon: taskWrapper.apostle.icon,
        color: taskWrapper.apostle.color
      } : null
    };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:', error);
    return null;
  }
} 