import { NextRequest, NextResponse } from 'next/server';
import { requireAuth } from '../../../lib/auth';
import { prisma } from '../../../lib/prisma';
import { TaskWrapperInfo, ApiResponse } from '../../../types/api';

// GET /api/task-wrappers - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ TaskWrapper –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function GET(request: NextRequest) {
  console.log('üöÄ Backend API /task-wrappers –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authUser = await requireAuth(request);
    if (!authUser) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      }, { status: 401 });
    }

    console.log('üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ TaskWrapper –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', authUser.email);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    const user = await prisma.user.findUnique({
      where: { id: authUser.id },
      include: {
        meta: {
          include: {
            paths: true
          }
        }
      }
    });

    if (!user || !user.meta || !user.meta.paths) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—É—Ç–µ–π'
      }, { status: 404 });
    }

    const activeTaskWrapperIds = user.meta.activeTasks;
    const completedTaskWrapperIds = user.meta.completedTasks;
    const activePathIds = user.meta.paths.activePathIds;

    console.log(`üõ§Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${activePathIds.length}`);

    if (activePathIds.length === 0) {
      return NextResponse.json<ApiResponse<TaskWrapperInfo[]>>({
        success: true,
        data: []
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏ —Å–æ –≤—Å–µ–º–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const paths = await prisma.path.findMany({
      where: {
        id: { in: activePathIds }
      }
    });

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ Challenge –¥–ª—è —ç—Ç–∏—Ö –ø—É—Ç–µ–π
    const allChallengeIds: string[] = [];
    paths.forEach(path => {
      allChallengeIds.push(...path.challenges);
    });

    console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ Challenge: ${allChallengeIds.length}`);

    if (allChallengeIds.length === 0) {
      return NextResponse.json<ApiResponse<TaskWrapperInfo[]>>({
        success: true,
        data: []
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ Challenge —Å TaskWrapper'–∞–º–∏
    const challenges = await prisma.challenge.findMany({
      where: {
        id: { in: allChallengeIds }
      },
      include: {
        apostle: {
          include: {
            virtue: true
          }
        }
      }
    });

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ TaskWrapper –¥–ª—è —ç—Ç–∏—Ö Challenge
    const allTaskWrapperIds: string[] = [];
    challenges.forEach(challenge => {
      allTaskWrapperIds.push(...challenge.orderedTasks);
    });

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ TaskWrapper IDs: ${allTaskWrapperIds.length}`);

    if (allTaskWrapperIds.length === 0) {
      return NextResponse.json<ApiResponse<TaskWrapperInfo[]>>({
        success: true,
        data: []
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ TaskWrapper —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    const allTaskWrappers = await prisma.taskWrapper.findMany({
      where: {
        id: { in: allTaskWrapperIds }
      },
      include: {
        task: true,
        apostle: {
          include: {
            virtue: true
          }
        }
      },
      orderBy: {
        order: 'asc'
      }
    });

    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ TaskWrapper: ${allTaskWrappers.length}`);

    // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ Challenge -> Apostle –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    const challengeMap = new Map(challenges.map(c => [c.id, c]));

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç API
    const taskWrapperInfos: TaskWrapperInfo[] = allTaskWrappers.map(tw => {
      // –ò—â–µ–º challenge –¥–ª—è —ç—Ç–æ–≥–æ TaskWrapper
      const challenge = challenges.find(c => c.orderedTasks.includes(tw.id));
      const apostle = tw.apostle || challenge?.apostle;
      
      return {
        id: tw.id,
        challengeId: challenge?.id || '',
        task: {
          id: tw.task.id,
          name: tw.task.name,
          description: tw.task.description
        },
        icon: tw.icon,
        order: tw.order,
        apostle: apostle ? {
          id: apostle.id,
          name: apostle.name,
          title: apostle.title,
          description: apostle.description,
          archetype: apostle.archetype,
          personality: apostle.personality,
          icon: apostle.icon,
          color: apostle.color,
          virtue: apostle.virtue ? {
            id: apostle.virtue.id,
            name: apostle.virtue.name,
            description: apostle.virtue.description
          } : undefined
        } : undefined,
        isCompleted: completedTaskWrapperIds.includes(tw.id),
        isActive: activeTaskWrapperIds.includes(tw.id)
      };
    });

    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ TaskWrapper:', taskWrapperInfos.length);
    
    return NextResponse.json<ApiResponse<TaskWrapperInfo[]>>({
      success: true,
      data: taskWrapperInfos
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TaskWrapper:', error);
    return NextResponse.json<ApiResponse>({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
} 