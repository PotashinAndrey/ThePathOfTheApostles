import { NextRequest, NextResponse } from 'next/server';
import { requireAuth } from '../../../../../lib/auth';
import { prisma } from '../../../../../lib/prisma';
import { ApiResponse } from '../../../../../types/api';

// POST /api/task-wrappers/[id]/skip - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å TaskWrapper
export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  console.log('üöÄ Backend API /task-wrappers/[id]/skip –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å –¥–ª—è:', params.id);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authUser = await requireAuth(request);
    if (!authUser) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      }, { status: 401 });
    }

    const body = await request.json();
    const reason = body.reason || '–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º';

    // –ü–æ–ª—É—á–∞–µ–º TaskWrapper
    const taskWrapper = await prisma.taskWrapper.findUnique({
      where: { id: params.id },
      include: {
        task: true
      }
    });

    if (!taskWrapper) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: 'TaskWrapper –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    const user = await prisma.user.findUnique({
      where: { id: authUser.id },
      include: { meta: true }
    });

    if (!user || !user.meta) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 });
    }

    const currentActiveTasks = user.meta.activeTasks;
    const currentCompletedTasks = user.meta.completedTasks;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å TaskWrapper
    if (!currentActiveTasks.includes(params.id)) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: 'TaskWrapper –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∑–∞–¥–∞–Ω–∏–µ.'
      }, { status: 400 });
    }

    if (currentCompletedTasks.includes(params.id)) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: 'TaskWrapper —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω'
      }, { status: 400 });
    }

    // –£–±–∏—Ä–∞–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö (–Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
    const updatedActiveTasks = currentActiveTasks.filter(id => id !== params.id);

    // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await prisma.$transaction([
      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–ø—É—Å–∫–∞
      prisma.taskWrapperResult.create({
        data: {
          taskWrapperId: params.id,
          userId: authUser.id,
          content: reason,
          result: '–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ'
        }
      }),
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      prisma.userMeta.update({
        where: { id: user.meta.id },
        data: {
          activeTasks: updatedActiveTasks
        }
      }),
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      prisma.user.update({
        where: { id: authUser.id },
        data: {
          lastActiveDate: new Date()
        }
      })
    ]);

    console.log('‚úÖ TaskWrapper –ø—Ä–æ–ø—É—â–µ–Ω:', taskWrapper.task.name);

    return NextResponse.json<ApiResponse>({
      success: true,
      message: `–ó–∞–¥–∞–Ω–∏–µ "${taskWrapper.task.name}" –ø—Ä–æ–ø—É—â–µ–Ω–æ`,
      data: {
        taskWrapperId: params.id,
        taskName: taskWrapper.task.name,
        skippedAt: new Date().toISOString(),
        reason: reason
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ TaskWrapper:', error);
    return NextResponse.json<ApiResponse>({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
} 