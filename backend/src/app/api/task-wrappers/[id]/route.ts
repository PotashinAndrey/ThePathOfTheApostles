import { NextRequest, NextResponse } from 'next/server';
import { requireAuth } from '../../../../lib/auth';
import { prisma } from '../../../../lib/prisma';
import { TaskWrapperInfo, ApiResponse } from '../../../../types/api';

// GET /api/task-wrappers/[id] - –ø–æ–ª—É—á–∏—Ç—å TaskWrapper –ø–æ ID
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  console.log('üöÄ Backend API /task-wrappers/[id] GET –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å –¥–ª—è:', params.id);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authUser = await requireAuth(request);
    if (!authUser) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      }, { status: 401 });
    }

    // –ü–æ–ª—É—á–∞–µ–º TaskWrapper —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    const taskWrapper = await prisma.taskWrapper.findUnique({
      where: { id: params.id },
      include: {
        task: true,
        apostle: {
          include: {
            virtue: true
          }
        }
      }
    });

    if (!taskWrapper) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: 'TaskWrapper –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 });
    }

    // –ü–æ–ª—É—á–∞–µ–º Challenge –∏ Apostle –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const challenge = await prisma.challenge.findUnique({
      where: { id: taskWrapper.challengeId },
      include: {
        apostle: {
          include: {
            virtue: true
          }
        }
      }
    });

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è
    const user = await prisma.user.findUnique({
      where: { id: authUser.id },
      include: { meta: true }
    });

    if (!user || !user.meta) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 });
    }

    const apostle = taskWrapper.apostle || challenge?.apostle;
    const isCompleted = user.meta.completedTasks.includes(taskWrapper.id);
    const isActive = user.meta.activeTasks.includes(taskWrapper.id);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç API
    const taskWrapperInfo: TaskWrapperInfo = {
      id: taskWrapper.id,
      challengeId: taskWrapper.challengeId,
      task: {
        id: taskWrapper.task.id,
        name: taskWrapper.task.name,
        description: taskWrapper.task.description
      },
      icon: taskWrapper.icon,
      order: taskWrapper.order,
      apostle: apostle ? {
        id: apostle.id,
        name: apostle.name,
        title: apostle.title,
        description: apostle.description,
        archetype: apostle.archetype,
        personality: apostle.personality,
        icon: apostle.icon,
        color: apostle.color,
        virtue: apostle.virtue ? {
          id: apostle.virtue.id,
          name: apostle.virtue.name,
          description: apostle.virtue.description
        } : undefined
      } : undefined,
      isCompleted,
      isActive
    };

    console.log('‚úÖ TaskWrapper –ø–æ–ª—É—á–µ–Ω');
    
    return NextResponse.json<ApiResponse<TaskWrapperInfo>>({
      success: true,
      data: taskWrapperInfo
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TaskWrapper:', error);
    return NextResponse.json<ApiResponse>({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
}

// POST /api/task-wrappers/[id]/activate - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å TaskWrapper
export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  console.log('üöÄ Backend API /task-wrappers/[id]/activate –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å –¥–ª—è:', params.id);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authUser = await requireAuth(request);
    if (!authUser) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      }, { status: 401 });
    }

    const body = await request.json();
    const action = body.action; // 'activate', 'complete', 'skip'

    // –ü–æ–ª—É—á–∞–µ–º TaskWrapper
    const taskWrapper = await prisma.taskWrapper.findUnique({
      where: { id: params.id },
      include: {
        task: true
      }
    });

    if (!taskWrapper) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: 'TaskWrapper –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    const user = await prisma.user.findUnique({
      where: { id: authUser.id },
      include: { meta: true }
    });

    if (!user || !user.meta) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 });
    }

    const currentActiveTasks = user.meta.activeTasks;
    const currentCompletedTasks = user.meta.completedTasks;

    if (action === 'activate') {
      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º TaskWrapper
      if (currentActiveTasks.includes(params.id)) {
        return NextResponse.json<ApiResponse>({
          success: false,
          error: 'TaskWrapper —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'
        }, { status: 400 });
      }

      if (currentCompletedTasks.includes(params.id)) {
        return NextResponse.json<ApiResponse>({
          success: false,
          error: 'TaskWrapper —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω'
        }, { status: 400 });
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö
      const updatedActiveTasks = [...currentActiveTasks, params.id];

      await prisma.userMeta.update({
        where: { id: user.meta.id },
        data: {
          activeTasks: updatedActiveTasks
        }
      });

      console.log('‚úÖ TaskWrapper –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');

      return NextResponse.json<ApiResponse>({
        success: true,
        message: 'TaskWrapper —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'
      });

    } else if (action === 'complete') {
      // –ó–∞–≤–µ—Ä—à–∞–µ–º TaskWrapper
      if (!currentActiveTasks.includes(params.id)) {
        return NextResponse.json<ApiResponse>({
          success: false,
          error: 'TaskWrapper –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'
        }, { status: 400 });
      }

      if (currentCompletedTasks.includes(params.id)) {
        return NextResponse.json<ApiResponse>({
          success: false,
          error: 'TaskWrapper —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω'
        }, { status: 400 });
      }

      // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
      const updatedActiveTasks = currentActiveTasks.filter(id => id !== params.id);
      const updatedCompletedTasks = [...currentCompletedTasks, params.id];

      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      const content = body.content || '–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ';
      await prisma.taskWrapperResult.create({
        data: {
          taskWrapperId: params.id,
          userId: authUser.id,
          content: content,
          result: '–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
        }
      });

      await prisma.userMeta.update({
        where: { id: user.meta.id },
        data: {
          activeTasks: updatedActiveTasks,
          completedTasks: updatedCompletedTasks
        }
      });

      console.log('‚úÖ TaskWrapper –∑–∞–≤–µ—Ä—à–µ–Ω');

      return NextResponse.json<ApiResponse>({
        success: true,
        message: 'TaskWrapper —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω'
      });

    } else if (action === 'skip') {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º TaskWrapper
      if (!currentActiveTasks.includes(params.id)) {
        return NextResponse.json<ApiResponse>({
          success: false,
          error: 'TaskWrapper –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'
        }, { status: 400 });
      }

      if (currentCompletedTasks.includes(params.id)) {
        return NextResponse.json<ApiResponse>({
          success: false,
          error: 'TaskWrapper —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω'
        }, { status: 400 });
      }

      // –£–±–∏—Ä–∞–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö (–Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
      const updatedActiveTasks = currentActiveTasks.filter(id => id !== params.id);

      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–ø—É—Å–∫–∞
      const reason = body.reason || '–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º';
      await prisma.taskWrapperResult.create({
        data: {
          taskWrapperId: params.id,
          userId: authUser.id,
          content: reason,
          result: '–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ'
        }
      });

      await prisma.userMeta.update({
        where: { id: user.meta.id },
        data: {
          activeTasks: updatedActiveTasks
        }
      });

      console.log('‚úÖ TaskWrapper –ø—Ä–æ–ø—É—â–µ–Ω');

      return NextResponse.json<ApiResponse>({
        success: true,
        message: 'TaskWrapper –ø—Ä–æ–ø—É—â–µ–Ω'
      });

    } else {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'
      }, { status: 400 });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å TaskWrapper:', error);
    return NextResponse.json<ApiResponse>({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
} 