import { NextRequest, NextResponse } from 'next/server';
import { requireAuth } from '../../../../../lib/auth';
import { prisma } from '../../../../../lib/prisma';
import { ApiResponse } from '../../../../../types/api';

// POST /api/task-wrappers/[id]/activate - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å TaskWrapper
export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  console.log('üöÄ Backend API /task-wrappers/[id]/activate –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å –¥–ª—è:', params.id);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authUser = await requireAuth(request);
    if (!authUser) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      }, { status: 401 });
    }

    // –ü–æ–ª—É—á–∞–µ–º TaskWrapper
    const taskWrapper = await prisma.taskWrapper.findUnique({
      where: { id: params.id },
      include: {
        task: true
      }
    });

    if (!taskWrapper) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: 'TaskWrapper –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    const user = await prisma.user.findUnique({
      where: { id: authUser.id },
      include: { meta: true }
    });

    if (!user || !user.meta) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 });
    }

    const currentActiveTasks = user.meta.activeTasks;
    const currentCompletedTasks = user.meta.completedTasks;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å TaskWrapper
    if (currentActiveTasks.includes(params.id)) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: 'TaskWrapper —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'
      }, { status: 400 });
    }

    if (currentCompletedTasks.includes(params.id)) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: 'TaskWrapper —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω'
      }, { status: 400 });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    const updatedActiveTasks = [...currentActiveTasks, params.id];

    await prisma.userMeta.update({
      where: { id: user.meta.id },
      data: {
        activeTasks: updatedActiveTasks
      }
    });

    console.log('‚úÖ TaskWrapper –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:', taskWrapper.task.name);

    return NextResponse.json<ApiResponse>({
      success: true,
      message: `–ó–∞–¥–∞–Ω–∏–µ "${taskWrapper.task.name}" —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ`,
      data: {
        taskWrapperId: params.id,
        taskName: taskWrapper.task.name
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ TaskWrapper:', error);
    return NextResponse.json<ApiResponse>({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
} 