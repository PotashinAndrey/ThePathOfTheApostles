import { NextRequest, NextResponse } from 'next/server';
import { requireAuth } from '../../../../lib/auth';
import { prisma } from '../../../../lib/prisma';
import { DailyTaskInfo, ApiResponse } from '../../../../types/api';

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    console.log(`üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: ${params.id}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const user = await requireAuth(request);
    if (!user) {
      return NextResponse.json<ApiResponse>(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ
    const mockTask: DailyTaskInfo = {
      id: params.id,
      name: '–ü—Ä–∏–Ω—è—Ç–∏–µ –≤—ã–∑–æ–≤–∞',
      description: '–ù–∞–π–¥–∏ –æ–¥–Ω—É –ø—Ä–∏–≤—ã—á–∫—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±–µ –º–µ—à–∞–µ—Ç, –∏ –æ—Ç–∫–∞–∂–∏—Å—å –æ—Ç –Ω–µ—ë –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å.',
      apostleId: 'peter',
      apostle: {
        id: 'peter',
        name: '–ü—ë—Ç—Ä',
        title: '–ê–ø–æ—Å—Ç–æ–ª —Å—Ç–æ–π–∫–æ—Å—Ç–∏',
        description: '–£—á–∏—Ç–µ–ª—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–∏–ª—ã',
        archetype: '–°—Ç–æ–π–∫–∏–π',
        personality: '–ú—É–¥—Ä—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫',
        icon: 'üóø',
        color: '#8B4513',
      },
      dayNumber: 1,
      status: 'active',
      createdAt: new Date(),
      motivationalPhrase: '–ü—É—Ç—å –≤ —Ç—ã—Å—è—á—É –º–∏–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞. –°–¥–µ–ª–∞–π –µ–≥–æ —Å–µ–≥–æ–¥–Ω—è.',
    };

    console.log('‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è');

    return NextResponse.json<ApiResponse<DailyTaskInfo>>({
      success: true,
      data: mockTask,
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:', error);
    return NextResponse.json<ApiResponse>(
      { success: false, error: 'Internal Server Error' },
      { status: 500 }
    );
  }
} 