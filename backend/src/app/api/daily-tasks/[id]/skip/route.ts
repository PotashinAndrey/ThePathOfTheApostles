import { NextRequest, NextResponse } from 'next/server';
import { requireAuth } from '../../../../../lib/auth';
import { prisma } from '../../../../../lib/prisma';
import { ApiResponse, SkipDailyTaskRequest } from '../../../../../types/api';

export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: ${params.id}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const user = await requireAuth(request);
    if (!user) {
      return NextResponse.json<ApiResponse>(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      );
    }

    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email}`);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    const body = await request.json() as SkipDailyTaskRequest;
    const { reason } = body;

    // –ò—â–µ–º –∑–∞–¥–∞–Ω–∏–µ –ø–æ ID
    const dailyTask = await prisma.dailyTask.findUnique({
      where: { id: params.id },
      include: {
        apostle: true
      }
    });

    if (!dailyTask) {
      return NextResponse.json<ApiResponse>(
        { success: false, error: 'Daily task not found' },
        { status: 404 }
      );
    }

    // –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º UserDailyTask –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–¥–∞–Ω–∏—è
    let userDailyTask = await prisma.userDailyTask.findUnique({
      where: {
        userId_dailyTaskId: {
          userId: user.id,
          dailyTaskId: params.id
        }
      }
    });

    if (!userDailyTask) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      userDailyTask = await prisma.userDailyTask.create({
        data: {
          userId: user.id,
          dailyTaskId: params.id,
          status: 'SKIPPED',
          activatedAt: new Date(),
          skippedAt: new Date(),
          notes: reason || '–ü—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
        }
      });
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      userDailyTask = await prisma.userDailyTask.update({
        where: {
          userId_dailyTaskId: {
            userId: user.id,
            dailyTaskId: params.id
          }
        },
        data: {
          status: 'SKIPPED',
          skippedAt: new Date(),
          notes: reason || userDailyTask.notes || '–ü—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
        }
      });
    }

    console.log('‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ');

    return NextResponse.json<ApiResponse>({
      success: true,
      message: 'Task skipped successfully'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–¥–∞–Ω–∏—è:', error);
    return NextResponse.json<ApiResponse>(
      { success: false, error: 'Internal Server Error' },
      { status: 500 }
    );
  }
} 