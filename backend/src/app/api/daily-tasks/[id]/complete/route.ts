import { NextRequest, NextResponse } from 'next/server';
import { requireAuth } from '../../../../../lib/auth';
import { prisma } from '../../../../../lib/prisma';
import { ApiResponse, CompleteDailyTaskRequest } from '../../../../../types/api';

export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    console.log(`üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: ${params.id}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const user = await requireAuth(request);
    if (!user) {
      return NextResponse.json<ApiResponse>(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      );
    }

    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email}`);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    const body = await request.json() as CompleteDailyTaskRequest;
    const { content, notes } = body;

    // –ò—â–µ–º –∑–∞–¥–∞–Ω–∏–µ –ø–æ ID
    const dailyTask = await prisma.dailyTask.findUnique({
      where: { id: params.id },
      include: {
        apostle: true
      }
    });

    if (!dailyTask) {
      return NextResponse.json<ApiResponse>(
        { success: false, error: 'Daily task not found' },
        { status: 404 }
      );
    }

    // –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º UserDailyTask –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–¥–∞–Ω–∏—è
    let userDailyTask = await prisma.userDailyTask.findUnique({
      where: {
        userId_dailyTaskId: {
          userId: user.id,
          dailyTaskId: params.id
        }
      }
    });

    if (!userDailyTask) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      userDailyTask = await prisma.userDailyTask.create({
        data: {
          userId: user.id,
          dailyTaskId: params.id,
          status: 'COMPLETED',
          activatedAt: new Date(),
          completedAt: new Date(),
          content: content || '',
          notes: notes || ''
        }
      });
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      userDailyTask = await prisma.userDailyTask.update({
        where: {
          userId_dailyTaskId: {
            userId: user.id,
            dailyTaskId: params.id
          }
        },
        data: {
          status: 'COMPLETED',
          completedAt: new Date(),
          content: content || userDailyTask.content,
          notes: notes || userDailyTask.notes
        }
      });
    }

    console.log('‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ');

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
    await activateNextTask(user.id, dailyTask.apostleId, dailyTask.dayNumber);

    // –û–±–Ω–æ–≤–ª—è–µ–º streak –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await updateUserStreak(user.id);

    return NextResponse.json<ApiResponse>({
      success: true,
      message: 'Task completed successfully'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:', error);
    return NextResponse.json<ApiResponse>(
      { success: false, error: 'Internal Server Error' },
      { status: 500 }
    );
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
async function activateNextTask(userId: string, apostleId: string, currentDay: number) {
  try {
    console.log(`üîÑ –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∞–ø–æ—Å—Ç–æ–ª–∞ ${apostleId}, —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å: ${currentDay}`);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
    const nextDay = currentDay + 1;
    
    if (nextDay <= 7) {
      // –ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –∂–µ –∞–ø–æ—Å—Ç–æ–ª–∞
      const nextDailyTask = await prisma.dailyTask.findFirst({
        where: {
          apostleId: apostleId,
          dayNumber: nextDay
        }
      });

      if (nextDailyTask) {
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º UserDailyTask –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        await prisma.userDailyTask.upsert({
          where: {
            userId_dailyTaskId: {
              userId: userId,
              dailyTaskId: nextDailyTask.id
            }
          },
          update: {
            status: 'ACTIVE',
            activatedAt: new Date()
          },
          create: {
            userId: userId,
            dailyTaskId: nextDailyTask.id,
            status: 'ACTIVE',
            activatedAt: new Date()
          }
        });

        console.log(`‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ: –¥–µ–Ω—å ${nextDay}`);
      }
    } else {
      // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å (7), –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–ø–æ—Å—Ç–æ–ª–∞
      console.log('üéâ –ù–µ–¥–µ–ª—è –∞–ø–æ—Å—Ç–æ–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ú–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–ø–æ—Å—Ç–æ–ª–∞.');
      
      // TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–ø–æ—Å—Ç–æ–ª—É
      // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:', error);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è streak –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function updateUserStreak(userId: string) {
  try {
    console.log(`üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ streak –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);

    const user = await prisma.user.findUnique({
      where: { id: userId }
    });

    if (!user) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è streak');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–Ω–∏—è –≤—á–µ—Ä–∞
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    yesterday.setHours(0, 0, 0, 0);

    const tomorrowYesterday = new Date(yesterday);
    tomorrowYesterday.setDate(tomorrowYesterday.getDate() + 1);

    const completedYesterday = await prisma.userDailyTask.findFirst({
      where: {
        userId: userId,
        status: 'COMPLETED',
        completedAt: {
          gte: yesterday,
          lt: tomorrowYesterday
        }
      }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º streak
    const newStreak = completedYesterday ? user.streak + 1 : 1;

    await prisma.user.update({
      where: { id: userId },
      data: {
        streak: newStreak,
        lastActiveDate: new Date()
      }
    });

    console.log(`‚úÖ Streak –æ–±–Ω–æ–≤–ª–µ–Ω: ${newStreak} –¥–Ω–µ–π`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è streak:', error);
  }
} 