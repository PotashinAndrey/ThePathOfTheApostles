import { NextRequest, NextResponse } from 'next/server';
import { requireAuth } from '../../../../lib/auth';
import { prisma } from '../../../../lib/prisma';
import { ActiveTaskResponse, ApiResponse } from '../../../../types/api';

export async function GET(request: NextRequest) {
  try {
    console.log('üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const user = await requireAuth(request);
    if (!user) {
      return NextResponse.json<ApiResponse>(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      );
    }

    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email}`);

    // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const activeUserTask = await prisma.userDailyTask.findFirst({
      where: {
        userId: user.id,
        status: 'ACTIVE'
      },
      include: {
        dailyTask: {
          include: {
            apostle: {
              include: {
                virtue: true
              }
            }
          }
        }
      }
    });

    if (!activeUserTask) {
      console.log('‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è');
      
      return NextResponse.json<ApiResponse<ActiveTaskResponse>>({
        success: true,
        data: {
          hasActiveTask: false,
          currentTask: null,
          nextTask: null,
          apostleProgress: {
            apostleId: 'peter',
            currentDay: 1,
            completedTasks: 0,
            totalTasks: 7
          }
        }
      });
    }

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    await activatePathForUser(user.id);

    // –°—á–∏—Ç–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∞–ø–æ—Å—Ç–æ–ª—É
    const completedTasksCount = await prisma.userDailyTask.count({
      where: {
        userId: user.id,
        dailyTask: {
          apostleId: activeUserTask.dailyTask.apostleId
        },
        status: 'COMPLETED'
      }
    });

    const totalTasksCount = await prisma.dailyTask.count({
      where: {
        apostleId: activeUserTask.dailyTask.apostleId
      }
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const currentTask = {
      id: activeUserTask.dailyTask.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      name: activeUserTask.dailyTask.name,
      description: activeUserTask.dailyTask.description,
      apostleId: activeUserTask.dailyTask.apostleId,
      apostle: {
        id: activeUserTask.dailyTask.apostle.id,
        name: activeUserTask.dailyTask.apostle.name,
        title: activeUserTask.dailyTask.apostle.title,
        description: activeUserTask.dailyTask.apostle.description,
        archetype: activeUserTask.dailyTask.apostle.archetype,
        personality: activeUserTask.dailyTask.apostle.personality,
        icon: activeUserTask.dailyTask.apostle.icon,
        color: activeUserTask.dailyTask.apostle.color,
        virtue: activeUserTask.dailyTask.apostle.virtue ? {
          id: activeUserTask.dailyTask.apostle.virtue.id,
          name: activeUserTask.dailyTask.apostle.virtue.name,
          description: activeUserTask.dailyTask.apostle.virtue.description
        } : undefined
      },
      dayNumber: activeUserTask.dailyTask.dayNumber,
      status: 'active' as const,
      createdAt: activeUserTask.dailyTask.createdAt,
      activatedAt: activeUserTask.activatedAt,
      motivationalPhrase: activeUserTask.dailyTask.motivationalPhrase,
    };

    const response: ActiveTaskResponse = {
      hasActiveTask: true,
      currentTask: currentTask,
      nextTask: undefined, // TODO: –ú–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      apostleProgress: {
        apostleId: activeUserTask.dailyTask.apostleId,
        currentDay: activeUserTask.dailyTask.dayNumber,
        completedTasks: completedTasksCount,
        totalTasks: totalTasksCount,
      },
    };

    console.log('‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:', currentTask.id);

    return NextResponse.json<ApiResponse<ActiveTaskResponse>>({
      success: true,
      data: response,
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:', error);
    return NextResponse.json<ApiResponse>(
      { success: false, error: 'Internal Server Error' },
      { status: 500 }
    );
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—É—Ç–∏ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏
async function activatePathForUser(userId: string) {
  try {
    // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å
    let mainPath = await prisma.path.findFirst({
      where: {
        name: '–û—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å'
      }
    });

    if (!mainPath) {
      console.log('‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ');
      
      mainPath = await prisma.path.create({
        data: {
          name: '–û—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å',
          description: '–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏ –æ—Ç –∞–ø–æ—Å—Ç–æ–ª–æ–≤',
          icon: 'üõ§Ô∏è'
        }
      });
    }

    await activateUserPath(userId, mainPath.id);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—É—Ç–∏:', error);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—É—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function activateUserPath(userId: string, pathId: string) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    const user = await prisma.user.findUnique({
      where: { id: userId },
      include: {
        userProgress: {
          include: {
            userPaths: true
          }
        }
      }
    });

    if (!user) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', userId);
      return;
    }

    if (!user.userProgress) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π UserProgress
      const newUserPaths = await prisma.userPathsList.create({
        data: {
          userId: userId,
          activePathIds: [pathId],
          completedPathIds: []
        }
      });

      const newUserProgress = await prisma.userProgress.create({
        data: {
          userPathsId: newUserPaths.id
        }
      });

      // –°–≤—è–∑—ã–≤–∞–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
      await prisma.user.update({
        where: { id: userId },
        data: { userProgressId: newUserProgress.id }
      });

      console.log('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—É—Ç—å:', pathId);
      return;
    }

    if (!user.userProgress.userPaths) {
      // –°–æ–∑–¥–∞–µ–º UserPathsList
      const newUserPaths = await prisma.userPathsList.create({
        data: {
          userId: userId,
          activePathIds: [pathId],
          completedPathIds: []
        }
      });

      await prisma.userProgress.update({
        where: { id: user.userProgress.id },
        data: { userPathsId: newUserPaths.id }
      });

      console.log('‚úÖ –°–æ–∑–¥–∞–Ω UserPathsList –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—É—Ç—å:', pathId);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø—É—Ç—å
    const isPathActive = user.userProgress.userPaths.activePathIds.includes(pathId);
    if (!isPathActive) {
      await prisma.userPathsList.update({
        where: { id: user.userProgress.userPaths.id },
        data: {
          activePathIds: [...user.userProgress.userPaths.activePathIds, pathId]
        }
      });

      console.log('‚úÖ –ü—É—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:', pathId);
    } else {
      console.log('‚ÑπÔ∏è –ü—É—Ç—å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω:', pathId);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—É—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  }
} 