import { NextRequest, NextResponse } from 'next/server';
import { requireAuth } from '../../../../../lib/auth';
import { prisma } from '../../../../../lib/prisma';
import { DailyTaskInfo, ApiResponse } from '../../../../../types/api';

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    console.log(`üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –∞–ø–æ—Å—Ç–æ–ª–∞: ${params.id}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    const user = await requireAuth(request);
    if (!user) {
      return NextResponse.json<ApiResponse>(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ü–µ—Ç—Ä–∞
    if (params.id === 'peter') {
      const mockTasks: DailyTaskInfo[] = [
        {
          id: 'peter-day-1',
          name: '–ü—Ä–∏–Ω—è—Ç–∏–µ –≤—ã–∑–æ–≤–∞',
          description: '–ù–∞–π–¥–∏ –æ–¥–Ω—É –ø—Ä–∏–≤—ã—á–∫—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±–µ –º–µ—à–∞–µ—Ç, –∏ –æ—Ç–∫–∞–∂–∏—Å—å –æ—Ç –Ω–µ—ë –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å.',
          apostleId: 'peter',
          apostle: {
            id: 'peter',
            name: '–ü—ë—Ç—Ä',
            title: '–ê–ø–æ—Å—Ç–æ–ª —Å—Ç–æ–π–∫–æ—Å—Ç–∏',
            description: '–£—á–∏—Ç–µ–ª—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–∏–ª—ã',
            archetype: '–°—Ç–æ–π–∫–∏–π',
            personality: '–ú—É–¥—Ä—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫',
            icon: 'üóø',
            color: '#8B4513',
          },
          dayNumber: 1,
          status: 'active',
          createdAt: new Date(),
          motivationalPhrase: '–ü—É—Ç—å –≤ —Ç—ã—Å—è—á—É –º–∏–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞. –°–¥–µ–ª–∞–π –µ–≥–æ —Å–µ–≥–æ–¥–Ω—è.',
        },
        // –î–æ–±–∞–≤–∏–º –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        {
          id: 'peter-day-2',
          name: '–¢–µ–ª–æ - —Ö—Ä–∞–º —Å–∏–ª—ã',
          description: '–í—ã–ø–æ–ª–Ω–∏ –ø—Ä–æ—Å—Ç–æ–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—Ä–µ–±—É–µ—Ç –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏.',
          apostleId: 'peter',
          apostle: {
            id: 'peter',
            name: '–ü—ë—Ç—Ä',
            title: '–ê–ø–æ—Å—Ç–æ–ª —Å—Ç–æ–π–∫–æ—Å—Ç–∏',
            description: '–£—á–∏—Ç–µ–ª—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–∏–ª—ã',
            archetype: '–°—Ç–æ–π–∫–∏–π',
            personality: '–ú—É–¥—Ä—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫',
            icon: 'üóø',
            color: '#8B4513',
          },
          dayNumber: 2,
          status: 'pending',
          createdAt: new Date(),
          motivationalPhrase: '–¢–µ–ª–æ –º–æ–∂–µ—Ç –≤—ã–Ω–µ—Å—Ç–∏ –ø–æ—á—Ç–∏ –≤—Å—ë. –≠—Ç–æ —Ä–∞–∑—É–º –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å.',
        },
      ];

      console.log('‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º mock –∑–∞–¥–∞–Ω–∏—è –ü–µ—Ç—Ä–∞');

      return NextResponse.json<ApiResponse<DailyTaskInfo[]>>({
        success: true,
        data: mockTasks,
      });
    }

    // –î–ª—è –¥—Ä—É–≥–∏—Ö –∞–ø–æ—Å—Ç–æ–ª–æ–≤ –ø–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    return NextResponse.json<ApiResponse<DailyTaskInfo[]>>({
      success: true,
      data: [],
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –∞–ø–æ—Å—Ç–æ–ª–∞:', error);
    return NextResponse.json<ApiResponse>(
      { success: false, error: 'Internal Server Error' },
      { status: 500 }
    );
  }
} 