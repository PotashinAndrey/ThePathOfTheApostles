import React, { useEffect, useState } from 'react';
import { View, Text, ActivityIndicator, StyleSheet } from 'react-native';
import { useUserStore } from '../stores/userStore';
import { useThemeStore } from '../stores/themeStore';
import { useAuthInterceptor } from '../hooks/useAuthInterceptor';

interface AuthGuardProps {
  children: React.ReactNode;
}

export const AuthGuard: React.FC<AuthGuardProps> = ({ children }) => {
  const { theme } = useThemeStore();
  const { isAuthenticated, checkTokenExpiry, logout, isLoading, setLoading } = useUserStore();
  const { checkAuth } = useAuthInterceptor(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ API
  const [isInitializing, setIsInitializing] = useState(true);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    const initializeAuth = async () => {
      console.log('üîê AuthGuard: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      setLoading(true);
      
      try {
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        await new Promise(resolve => setTimeout(resolve, 500));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        const tokenValid = checkTokenExpiry();
        console.log('üîê AuthGuard: –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω:', tokenValid);
        
        if (!tokenValid) {
          console.log('üîê AuthGuard: –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º logout');
          logout();
        }
        
      } catch (error) {
        console.error('‚ùå AuthGuard: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        logout(); // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º
      } finally {
        setLoading(false);
        setIsInitializing(false);
      }
    };

    initializeAuth();
  }, []);

  useEffect(() => {
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
    const interval = setInterval(() => {
      if (isAuthenticated()) {
        console.log('üîê AuthGuard: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞');
        checkTokenExpiry();
      }
    }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç

    return () => clearInterval(interval);
  }, [isAuthenticated, checkTokenExpiry]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –≤–æ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  if (isInitializing || isLoading) {
    return (
      <View style={[styles.loadingContainer, { backgroundColor: theme.colors.background }]}>
        <View style={styles.loadingContent}>
          <Text style={[styles.logo, { color: theme.colors.text }]}>
            üôè –ü—É—Ç—å –ê–ø–æ—Å—Ç–æ–ª–æ–≤
          </Text>
          <ActivityIndicator 
            size="large" 
            color={theme.colors.primary} 
            style={styles.loader}
          />
          <Text style={[styles.loadingText, { color: theme.colors.textSecondary }]}>
            –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...
          </Text>
        </View>
      </View>
    );
  }

  return <>{children}</>;
};

const styles = StyleSheet.create({
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  loadingContent: {
    alignItems: 'center',
  },
  logo: {
    fontSize: 32,
    fontWeight: 'bold',
    marginBottom: 30,
    textAlign: 'center',
  },
  loader: {
    marginBottom: 20,
  },
  loadingText: {
    fontSize: 16,
    textAlign: 'center',
  },
}); 