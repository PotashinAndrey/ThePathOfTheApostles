import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Alert,
  ActivityIndicator,
} from 'react-native';
import { useThemeStore } from '../stores/themeStore';
import { TaskWrapperInfo } from '../types/api';
import apiService from '../services/apiNew';

interface TaskWrapperCardProps {
  taskWrapper: TaskWrapperInfo;
  onPress?: (taskWrapper: TaskWrapperInfo) => void;
  onStatusChange?: () => void; // Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  showActions?: boolean; // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
}

export const TaskWrapperCard: React.FC<TaskWrapperCardProps> = ({
  taskWrapper,
  onPress,
  onStatusChange,
  showActions = true,
}) => {
  const { theme } = useThemeStore();
  const [isLoading, setIsLoading] = useState(false);

  const getStatusColor = () => {
    if (taskWrapper.isCompleted) return theme.colors.success;
    if (taskWrapper.isActive) return theme.colors.primary;
    if (taskWrapper.isAvailable) return theme.colors.textSecondary;
    return '#999999'; // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
  };

  const getStatusText = () => {
    if (taskWrapper.isCompleted) return '–í—ã–ø–æ–ª–Ω–µ–Ω–æ';
    if (taskWrapper.isActive) return '–ê–∫—Ç–∏–≤–Ω–æ';
    if (taskWrapper.isAvailable) return '–î–æ—Å—Ç—É–ø–Ω–æ';
    return '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ';
  };

  const getStatusIcon = () => {
    if (taskWrapper.isCompleted) return '‚úÖ';
    if (taskWrapper.isActive) return '‚ö°';
    if (taskWrapper.isAvailable) return 'üìã';
    return 'üîí';
  };

  const handleActivate = async () => {
    Alert.alert(
      '–ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ',
      `–í—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞–Ω–∏—è "${taskWrapper.task.name}"?`,
      [
        { text: '–ù–µ —Å–µ–π—á–∞—Å', style: 'cancel' },
        {
          text: '–ù–∞—á–∞—Ç—å',
          style: 'default',
          onPress: async () => {
            try {
              setIsLoading(true);
              await apiService.activateTaskWrapper(taskWrapper.id);
              
              Alert.alert(
                '–ó–∞–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ! üéØ',
                '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ. –£–¥–∞—á–∏!',
                [{ text: 'OK', onPress: onStatusChange }]
              );
            } catch (error) {
              console.error('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏—è:', error);
              Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ');
            } finally {
              setIsLoading(false);
            }
          }
        }
      ]
    );
  };

  const handleComplete = async () => {
    Alert.alert(
      '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ',
      `–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ "${taskWrapper.task.name}"?`,
      [
        { text: '–ù–µ—Ç', style: 'cancel' },
        {
          text: '–î–∞, –∑–∞–≤–µ—Ä—à–∏—Ç—å',
          style: 'default',
          onPress: async () => {
            try {
              setIsLoading(true);
              await apiService.completeTaskWrapper(taskWrapper.id);
              
              Alert.alert(
                '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ',
                '–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥—É—Ö–æ–≤–Ω—ã–π —Ä–æ—Å—Ç!',
                [{ text: 'OK', onPress: onStatusChange }]
              );
            } catch (error) {
              console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:', error);
              Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ');
            } finally {
              setIsLoading(false);
            }
          }
        }
      ]
    );
  };

  const handleSkip = async () => {
    Alert.alert(
      '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ',
      `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ "${taskWrapper.task.name}"? –≠—Ç–æ –Ω–µ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ.`,
      [
        { text: '–ù–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å', style: 'cancel' },
        {
          text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
          style: 'destructive',
          onPress: async () => {
            try {
              setIsLoading(true);
              await apiService.skipTaskWrapper(taskWrapper.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ');
              
              Alert.alert(
                '–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ',
                '–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥—É—Ö–æ–≤–Ω—ã–π –ø—É—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏.',
                [{ text: 'OK', onPress: onStatusChange }]
              );
            } catch (error) {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–¥–∞–Ω–∏—è:', error);
              Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ');
            } finally {
              setIsLoading(false);
            }
          }
        }
      ]
    );
  };

  return (
    <TouchableOpacity
      style={[
        styles.container,
        { 
          backgroundColor: theme.colors.surface,
          borderColor: getStatusColor() + '30',
        }
      ]}
      onPress={() => onPress?.(taskWrapper)}
      disabled={isLoading}
    >
      {/* Header */}
      <View style={styles.header}>
        <View style={styles.taskInfo}>
          <Text style={[styles.taskName, { color: theme.colors.text }]}>
            {taskWrapper.task.name}
          </Text>
          <Text style={[styles.taskOrder, { color: theme.colors.textSecondary }]}>
            –ó–∞–¥–∞–Ω–∏–µ {taskWrapper.order}
          </Text>
        </View>
        
        <View style={[
          styles.statusBadge,
          { backgroundColor: getStatusColor() + '20' }
        ]}>
          <Text style={[styles.statusIcon, { color: getStatusColor() }]}>
            {getStatusIcon()}
          </Text>
          <Text style={[
            styles.statusText,
            { color: getStatusColor() }
          ]}>
            {getStatusText()}
          </Text>
        </View>
      </View>

      {/* Task Description */}
      <Text style={[
        styles.taskDescription,
        { 
          color: theme.colors.textSecondary,
          textDecorationLine: taskWrapper.isCompleted ? 'line-through' : 'none',
        }
      ]}>
        {taskWrapper.task.description}
      </Text>

      {/* Apostle Info */}
      {taskWrapper.apostle && (
        <View style={styles.apostleInfo}>
          <Text style={styles.apostleIcon}>
            {taskWrapper.apostle.icon}
          </Text>
          <Text style={[styles.apostleName, { color: taskWrapper.apostle.color }]}>
            {taskWrapper.apostle.name}
          </Text>
        </View>
      )}

      {/* Action Buttons */}
      {showActions && !isLoading && (
        <View style={styles.actions}>
          {/* –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ */}
          {!taskWrapper.isAvailable && !taskWrapper.isCompleted && (
            <View style={[
              styles.blockedBadge,
              { backgroundColor: '#f5f5f5', borderColor: '#ddd', borderWidth: 1 }
            ]}>
              <Text style={[styles.blockedText, { color: '#999' }]}>
                üîí –ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
              </Text>
            </View>
          )}

          {/* –î–æ—Å—Ç—É–ø–Ω–æ–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–µ */}
          {taskWrapper.isAvailable && !taskWrapper.isActive && !taskWrapper.isCompleted && (
            <TouchableOpacity
              style={[
                styles.actionButton,
                styles.activateButton,
                { backgroundColor: taskWrapper.apostle?.color || theme.colors.primary }
              ]}
              onPress={handleActivate}
            >
              <Text style={styles.actionButtonText}>
                –ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ
              </Text>
            </TouchableOpacity>
          )}

          {/* –ê–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ */}
          {taskWrapper.isActive && !taskWrapper.isCompleted && (
            <View style={styles.activeActions}>
              <TouchableOpacity
                style={[
                  styles.actionButton,
                  styles.completeButton,
                  { backgroundColor: theme.colors.success }
                ]}
                onPress={handleComplete}
              >
                <Text style={styles.actionButtonText}>
                  –ó–∞–≤–µ—Ä—à–∏—Ç—å
                </Text>
              </TouchableOpacity>

              <TouchableOpacity
                style={[
                  styles.actionButton,
                  styles.skipButton,
                  { 
                    backgroundColor: 'transparent',
                    borderWidth: 1,
                    borderColor: theme.colors.textSecondary,
                  }
                ]}
                onPress={handleSkip}
              >
                <Text style={[
                  styles.actionButtonText,
                  { color: theme.colors.textSecondary }
                ]}>
                  –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
                </Text>
              </TouchableOpacity>
            </View>
          )}

          {/* –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ */}
          {taskWrapper.isCompleted && (
            <View style={[
              styles.completedBadge,
              { backgroundColor: theme.colors.success + '10' }
            ]}>
              <Text style={[styles.completedText, { color: theme.colors.success }]}>
                ‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!
              </Text>
            </View>
          )}
        </View>
      )}

      {/* Loading Indicator */}
      {isLoading && (
        <View style={styles.loadingOverlay}>
          <ActivityIndicator size="small" color={theme.colors.primary} />
          <Text style={[styles.loadingText, { color: theme.colors.textSecondary }]}>
            –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å...
          </Text>
        </View>
      )}
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 16,
    borderRadius: 16,
    marginHorizontal: 20,
    marginBottom: 12,
    borderWidth: 1,
  },
  
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 8,
  },
  
  taskInfo: {
    flex: 1,
    marginRight: 12,
  },
  
  taskName: {
    fontSize: 16,
    fontWeight: '600',
    lineHeight: 22,
  },
  
  taskOrder: {
    fontSize: 12,
    fontWeight: '500',
    marginTop: 2,
  },
  
  statusBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
    gap: 4,
  },
  
  statusIcon: {
    fontSize: 14,
  },
  
  statusText: {
    fontSize: 11,
    fontWeight: '600',
    textTransform: 'uppercase',
  },
  
  taskDescription: {
    fontSize: 14,
    lineHeight: 20,
    marginBottom: 12,
  },
  
  apostleInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
    marginBottom: 12,
  },
  
  apostleIcon: {
    fontSize: 16,
  },
  
  apostleName: {
    fontSize: 14,
    fontWeight: '500',
  },
  
  actions: {
    marginTop: 8,
  },
  
  activeActions: {
    flexDirection: 'row',
    gap: 12,
  },
  
  actionButton: {
    flex: 1,
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 12,
    alignItems: 'center',
  },
  
  activateButton: {
    // –°—Ç–∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
  },
  
  completeButton: {
    // –°—Ç–∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
  },
  
  skipButton: {
    // –°—Ç–∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
  },
  
  actionButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '600',
  },
  
  completedBadge: {
    padding: 12,
    borderRadius: 12,
    alignItems: 'center',
  },
  
  completedText: {
    fontSize: 14,
    fontWeight: '600',
  },

  blockedBadge: {
    padding: 12,
    borderRadius: 12,
    alignItems: 'center',
  },
  
  blockedText: {
    fontSize: 14,
    fontWeight: '500',
  },
  
  loadingOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(255, 255, 255, 0.9)',
    borderRadius: 16,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
  },
  
  loadingText: {
    fontSize: 12,
    fontWeight: '500',
  },
}); 