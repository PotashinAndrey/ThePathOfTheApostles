import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';
import { storage } from '../utils/storage';
import { Apostle } from '../constants/apostles';

interface User {
  id: string;
  email: string;
  name: string;
  currentApostle?: Apostle;
  joinDate: Date;
  lastActiveDate: Date;
}

interface Mission {
  id: string;
  title: string;
  description: string;
  apostleId: string;
  startDate: Date;
  endDate: Date;
  isCompleted: boolean;
  progress: number; // 0-100
}

interface UserState {
  user: User | null;
  token: string | null; // JWT —Ç–æ–∫–µ–Ω
  tokenExpiry: number | null; // –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ (timestamp)
  currentMission: Mission | null;
  missions: Mission[];
  totalDays: number;
  streak: number;
  isLoading: boolean; // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  setUser: (user: User, token?: string) => void;
  setToken: (token: string, expiryHours?: number) => void;
  setCurrentApostle: (apostle: Apostle) => void;
  setCurrentMission: (mission: Mission) => void;
  completeMission: (missionId: string) => void;
  addMission: (mission: Mission) => void;
  updateMissionProgress: (missionId: string, progress: number) => void;
  incrementStreak: () => void;
  resetStreak: () => void;
  logout: () => void;
  checkTokenExpiry: () => boolean;
  isAuthenticated: () => boolean;
  setLoading: (loading: boolean) => void;
}

// –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è
const decodeJWT = (token: string): { exp?: number } => {
  try {
    const payload = token.split('.')[1];
    const decoded = JSON.parse(atob(payload));
    return decoded;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JWT:', error);
    return {};
  }
};

export const useUserStore = create<UserState>()(
  persist(
    (set, get) => ({
      user: null,
      token: null,
      tokenExpiry: null,
      currentMission: null,
      missions: [],
      totalDays: 0,
      streak: 0,
      isLoading: false,
      
      setUser: (user: User, token?: string) => {
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ store:', user);
        console.log('üé´ –¢–æ–∫–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω:', !!token);
        
        let tokenExpiry = null;
        if (token) {
          const decoded = decodeJWT(token);
          tokenExpiry = decoded.exp ? decoded.exp * 1000 : null; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
          console.log('‚è∞ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç:', tokenExpiry ? new Date(tokenExpiry) : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
        }
        
        set(() => ({ 
          user,
          ...(token && { token, tokenExpiry }),
          isLoading: false
        }));
      },

      setToken: (token: string, expiryHours = 24) => {
        console.log('üé´ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ store');
        const decoded = decodeJWT(token);
        const tokenExpiry = decoded.exp 
          ? decoded.exp * 1000 // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –∏–∑ JWT
          : Date.now() + (expiryHours * 60 * 60 * 1000); // –ò–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–æ–µ
        
        console.log('‚è∞ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç:', new Date(tokenExpiry));
        set(() => ({ token, tokenExpiry }));
      },

      setLoading: (loading: boolean) => {
        set(() => ({ isLoading: loading }));
      },
      
      setCurrentApostle: (apostle: Apostle) =>
        set((state) => ({
          user: state.user ? { ...state.user, currentApostle: apostle } : null,
        })),
      
      setCurrentMission: (mission: Mission) =>
        set(() => ({ currentMission: mission })),
      
      completeMission: (missionId: string) =>
        set((state) => ({
          missions: state.missions.map((mission) =>
            mission.id === missionId
              ? { ...mission, isCompleted: true, progress: 100 }
              : mission
          ),
          currentMission:
            state.currentMission?.id === missionId
              ? { ...state.currentMission, isCompleted: true, progress: 100 }
              : state.currentMission,
        })),
      
      addMission: (mission: Mission) =>
        set((state) => ({
          missions: [...state.missions, mission],
        })),
      
      updateMissionProgress: (missionId: string, progress: number) =>
        set((state) => ({
          missions: state.missions.map((mission) =>
            mission.id === missionId ? { ...mission, progress } : mission
          ),
          currentMission:
            state.currentMission?.id === missionId
              ? { ...state.currentMission, progress }
              : state.currentMission,
        })),
      
      incrementStreak: () =>
        set((state) => ({
          streak: state.streak + 1,
          totalDays: state.totalDays + 1,
        })),
      
      resetStreak: () =>
        set(() => ({ streak: 0 })),
      
      logout: () => {
        console.log('üö™ –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
        set(() => ({
          user: null,
          token: null,
          tokenExpiry: null,
          currentMission: null,
          missions: [],
          totalDays: 0,
          streak: 0,
          isLoading: false,
        }));
      },

      checkTokenExpiry: () => {
        const state = get();
        if (!state.token || !state.tokenExpiry) {
          console.log('üîê –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è');
          return false;
        }
        
        const now = Date.now();
        const isExpired = now >= state.tokenExpiry;
        
        if (isExpired) {
          console.log('‚è∞ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–ª–æ–≥–∞—É—Ç');
          get().logout();
          return false;
        }
        
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        const timeToExpiry = state.tokenExpiry - now;
        const fiveMinutes = 5 * 60 * 1000;
        if (timeToExpiry <= fiveMinutes && timeToExpiry > 0) {
          console.warn('‚ö†Ô∏è –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑', Math.floor(timeToExpiry / 1000 / 60), '–º–∏–Ω—É—Ç');
        }
        
        return true;
      },

      isAuthenticated: () => {
        const state = get();
        const hasValidToken = !!state.token;
        const hasUser = !!state.user;
        const tokenNotExpired = state.checkTokenExpiry();
        
        const isAuth = hasValidToken && hasUser && tokenNotExpired;
        
        console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', { 
          hasValidToken, 
          hasUser, 
          tokenNotExpired, 
          result: isAuth 
        });
        
        return isAuth;
      },
    }),
    {
      name: 'user-storage',
      storage: createJSONStorage(() => storage),
      // –ò—Å–∫–ª—é—á–∞–µ–º isLoading –∏–∑ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
      partialize: (state) => ({
        user: state.user,
        token: state.token,
        tokenExpiry: state.tokenExpiry,
        currentMission: state.currentMission,
        missions: state.missions,
        totalDays: state.totalDays,
        streak: state.streak,
      }),
    }
  )
);

export type { User, Mission }; 