import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';
import { storage } from '../utils/storage';
import { TaskWrapperInfo } from '../types/api';
import apiService from '../services/apiNew';

interface TaskWrapperState {
  taskWrappers: TaskWrapperInfo[];
  activeTaskWrappers: TaskWrapperInfo[];
  completedTaskWrappers: TaskWrapperInfo[];
  isLoading: boolean;
  isRefreshing: boolean;
  lastUpdated: number | null;
  
  // Actions
  loadTaskWrappers: () => Promise<void>;
  refreshTaskWrappers: () => Promise<void>;
  getTaskWrapper: (id: string) => TaskWrapperInfo | null;
  
  // Task operations
  activateTaskWrapper: (id: string) => Promise<void>;
  completeTaskWrapper: (id: string, content?: string) => Promise<void>;
  skipTaskWrapper: (id: string, reason?: string) => Promise<void>;
  
  // State updates
  updateTaskWrapperInState: (id: string, updates: Partial<TaskWrapperInfo>) => void;
  setLoading: (loading: boolean) => void;
  setRefreshing: (refreshing: boolean) => void;
}

export const useTaskWrapperStore = create<TaskWrapperState>()(
  persist(
    (set, get) => ({
      taskWrappers: [],
      activeTaskWrappers: [],
      completedTaskWrappers: [],
      isLoading: false,
      isRefreshing: false,
      lastUpdated: null,

      loadTaskWrappers: async () => {
        const state = get();
        if (state.isLoading) return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏
        
        try {
          set({ isLoading: true });
          console.log('üîÑ TaskWrapperStore: –ó–∞–≥—Ä—É–∂–∞–µ–º TaskWrappers...');
          
          const allTaskWrappers = await apiService.getAllTaskWrappers();
          console.log('üìù TaskWrapperStore: –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π:', allTaskWrappers.length);
          
          // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
          const activeTasks = allTaskWrappers.filter(tw => tw.isActive && !tw.isCompleted);
          const completedTasks = allTaskWrappers.filter(tw => tw.isCompleted);
          
          console.log('‚ö° TaskWrapperStore: –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:', activeTasks.length);
          console.log('‚úÖ TaskWrapperStore: –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:', completedTasks.length);
          
          set({
            taskWrappers: allTaskWrappers,
            activeTaskWrappers: activeTasks,
            completedTaskWrappers: completedTasks,
            lastUpdated: Date.now(),
          });
          
        } catch (error) {
          console.error('‚ùå TaskWrapperStore: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π:', error);
          throw error;
        } finally {
          set({ isLoading: false });
        }
      },

      refreshTaskWrappers: async () => {
        const state = get();
        if (state.isRefreshing) return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        
        try {
          set({ isRefreshing: true });
          console.log('üîÑ TaskWrapperStore: –û–±–Ω–æ–≤–ª—è–µ–º TaskWrappers...');
          
          const allTaskWrappers = await apiService.getAllTaskWrappers();
          
          // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
          const activeTasks = allTaskWrappers.filter(tw => tw.isActive && !tw.isCompleted);
          const completedTasks = allTaskWrappers.filter(tw => tw.isCompleted);
          
          set({
            taskWrappers: allTaskWrappers,
            activeTaskWrappers: activeTasks,
            completedTaskWrappers: completedTasks,
            lastUpdated: Date.now(),
          });
          
          console.log('‚úÖ TaskWrapperStore: –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
          
        } catch (error) {
          console.error('‚ùå TaskWrapperStore: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π:', error);
          throw error;
        } finally {
          set({ isRefreshing: false });
        }
      },

      getTaskWrapper: (id: string) => {
        const state = get();
        return state.taskWrappers.find(tw => tw.id === id) || null;
      },

      activateTaskWrapper: async (id: string) => {
        try {
          console.log('‚ö° TaskWrapperStore: –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º TaskWrapper:', id);
          
          await apiService.activateTaskWrapper(id);
          
          // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          get().updateTaskWrapperInState(id, { 
            isActive: true, 
            isAvailable: true 
          });
          
          // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          await get().refreshTaskWrappers();
          
          console.log('‚úÖ TaskWrapperStore: TaskWrapper –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
          
        } catch (error) {
          console.error('‚ùå TaskWrapperStore: –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ TaskWrapper:', error);
          // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          await get().refreshTaskWrappers();
          throw error;
        }
      },

      completeTaskWrapper: async (id: string, content?: string) => {
        try {
          console.log('‚úÖ TaskWrapperStore: –ó–∞–≤–µ—Ä—à–∞–µ–º TaskWrapper:', id);
          
          await apiService.completeTaskWrapper(id, content);
          
          // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          get().updateTaskWrapperInState(id, { 
            isCompleted: true,
            isActive: false
          });
          
          // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          await get().refreshTaskWrappers();
          
          console.log('‚úÖ TaskWrapperStore: TaskWrapper –∑–∞–≤–µ—Ä—à–µ–Ω');
          
        } catch (error) {
          console.error('‚ùå TaskWrapperStore: –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è TaskWrapper:', error);
          // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          await get().refreshTaskWrappers();
          throw error;
        }
      },

      skipTaskWrapper: async (id: string, reason?: string) => {
        try {
          console.log('‚è≠Ô∏è TaskWrapperStore: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º TaskWrapper:', id);
          
          await apiService.skipTaskWrapper(id, reason);
          
          // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–ø—Ä–æ–ø—É—â–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π)
          get().updateTaskWrapperInState(id, { 
            isActive: false
          });
          
          // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          await get().refreshTaskWrappers();
          
          console.log('‚úÖ TaskWrapperStore: TaskWrapper –ø—Ä–æ–ø—É—â–µ–Ω');
          
        } catch (error) {
          console.error('‚ùå TaskWrapperStore: –û—à–∏–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ TaskWrapper:', error);
          // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          await get().refreshTaskWrappers();
          throw error;
        }
      },

      updateTaskWrapperInState: (id: string, updates: Partial<TaskWrapperInfo>) => {
        set((state) => {
          const updatedTaskWrappers = state.taskWrappers.map(tw =>
            tw.id === id ? { ...tw, ...updates } : tw
          );
          
          // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
          const activeTasks = updatedTaskWrappers.filter(tw => tw.isActive && !tw.isCompleted);
          const completedTasks = updatedTaskWrappers.filter(tw => tw.isCompleted);
          
          return {
            taskWrappers: updatedTaskWrappers,
            activeTaskWrappers: activeTasks,
            completedTaskWrappers: completedTasks,
          };
        });
      },

      setLoading: (loading: boolean) => {
        set({ isLoading: loading });
      },

      setRefreshing: (refreshing: boolean) => {
        set({ isRefreshing: refreshing });
      },
    }),
    {
      name: 'task-wrapper-storage',
      storage: createJSONStorage(() => storage),
      // –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
      partialize: (state) => ({
        taskWrappers: state.taskWrappers,
        activeTaskWrappers: state.activeTaskWrappers,
        completedTaskWrappers: state.completedTaskWrappers,
        lastUpdated: state.lastUpdated,
      }),
    }
  )
); 