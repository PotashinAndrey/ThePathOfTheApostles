import React, { useState, useRef, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TextInput,
  TouchableOpacity,
  SafeAreaView,
  KeyboardAvoidingView,
  Platform,
  Alert,
} from 'react-native';
import { useThemeStore } from '../stores/themeStore';
import { useUserStore } from '../stores/userStore';
import { ChatBubble } from '../components/ChatBubble';
import { ChatMessage } from '../services/api';
import apiService from '../services/apiNew';
import { APOSTLES } from '../constants/apostles';

interface ChatScreenProps {
  navigation?: any;
  route?: {
    params?: {
      apostleId?: string;
      chatId?: string;
    };
  };
}

export const ChatScreen: React.FC<ChatScreenProps> = ({ navigation, route }) => {
  const { theme } = useThemeStore();
  const { user } = useUserStore();
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [chatId, setChatId] = useState<string | null>(null);
  const scrollViewRef = useRef<ScrollView>(null);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∞–ø–æ—Å—Ç–æ–ª–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const apostleId = route?.params?.apostleId || user?.currentApostle?.id;
  const currentApostle = apostleId 
    ? APOSTLES.find(a => a.id === apostleId) || user?.currentApostle || APOSTLES[0]
    : user?.currentApostle || APOSTLES[0];

  useEffect(() => {
    if (currentApostle && user?.id) {
      initializeChat();
    }
  }, [currentApostle, user?.id]);

  const initializeChat = async () => {
    if (!currentApostle || !user?.id) return;
    
    try {
      setIsLoading(true);
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å chatId –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç
      if (route?.params?.chatId) {
        await loadExistingChat(route.params.chatId);
      } else {
        // –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
        await loadOrCreateChat();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞:', error);
      // Fallback –∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
      addWelcomeMessage();
    } finally {
      setIsLoading(false);
    }
  };

  const loadExistingChat = async (chatId: string) => {
    try {
      const chatData = await apiService.getChat(chatId);
      setChatId(chatData.chat.id);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç ChatMessage
      const chatMessages: ChatMessage[] = chatData.messages.map(msg => ({
        role: msg.sender === 'USER' ? 'user' : 'assistant',
        content: msg.content,
        timestamp: new Date(msg.createdAt),
      }));
      
      setMessages(chatMessages);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞:', error);
      addWelcomeMessage();
    }
  };

  const loadOrCreateChat = async () => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const chats = await apiService.getChats();
      
      // –ò—â–µ–º —á–∞—Ç —Å —Ç–µ–∫—É—â–∏–º –∞–ø–æ—Å—Ç–æ–ª–æ–º
      const existingChat = chats.find(chat => chat.apostle.id === currentApostle?.id);
      
      if (existingChat) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç
        await loadExistingChat(existingChat.id);
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
        const newChat = await apiService.createChat(currentApostle!.id);
        setChatId(newChat.id);
        addWelcomeMessage();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞:', error);
      addWelcomeMessage();
    }
  };

  const addWelcomeMessage = () => {
    const welcomeMessage: ChatMessage = {
      role: 'assistant',
      content: currentApostle?.welcomeMessage || getWelcomeMessage(),
      timestamp: new Date(),
    };
    setMessages([welcomeMessage]);
  };

  const getWelcomeMessage = () => {
    if (!currentApostle) return '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!';
    
    const welcomeMessages = {
      peter: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –ø—É—Ç–Ω–∏–∫. –Ø –ü—ë—Ç—Ä, —Ç–≤–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –≤ –ø—É—Ç–∏ —Å—Ç–æ–π–∫–æ—Å—Ç–∏. –ì–æ—Ç–æ–≤ –ª–∏ —Ç—ã –∫ —Å–µ—Ä—å–µ–∑–Ω–æ–π —Ä–∞–±–æ—Ç–µ –Ω–∞–¥ —Å–æ–±–æ–π?',
      john: '–ú–∏—Ä —Ç–µ–±–µ, –∏—Å–∫–∞—Ç–µ–ª—å. –Ø –ò–æ–∞–Ω–Ω, –∑–¥–µ—Å—å —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –æ–±—Ä–µ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ–∫–æ–π. –û —á–µ–º —Ä–∞–∑–º—ã—à–ª—è–µ—à—å —Å–µ–≥–æ–¥–Ω—è?',
      matthew: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –ú–∞—Ç—Ñ–µ–π, –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –∂–∏–∑–Ω—å –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –º—É–¥—Ä—ã–µ —Ä–µ—à–µ–Ω–∏—è. –° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?',
    };
    
    return welcomeMessages[currentApostle.id as keyof typeof welcomeMessages] || '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ø—É—Ç—å –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è!';
  };

  const sendMessage = async () => {
    console.log('üì§ sendMessage –≤—ã–∑–≤–∞–Ω–∞');
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user?.email || '–Ω–µ –Ω–∞–π–¥–µ–Ω');
    console.log('üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:', inputMessage);
    console.log('üë• –ê–ø–æ—Å—Ç–æ–ª:', currentApostle?.name || '–Ω–µ –≤—ã–±—Ä–∞–Ω');
    console.log('üÜî Chat ID:', chatId);

    if (!user?.id) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      Alert.alert('–û—à–∏–±–∫–∞', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return;
    }

    if (!inputMessage.trim()) {
      console.log('‚ö†Ô∏è –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
      return;
    }

    if (!currentApostle) {
      console.error('‚ùå –ê–ø–æ—Å—Ç–æ–ª –Ω–µ –≤—ã–±—Ä–∞–Ω');
      Alert.alert('–û—à–∏–±–∫–∞', '–ê–ø–æ—Å—Ç–æ–ª –Ω–µ –≤—ã–±—Ä–∞–Ω');
      return;
    }

    console.log('‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ');

    const userMessage: ChatMessage = {
      role: 'user',
      content: inputMessage.trim(),
      timestamp: new Date(),
    };

    console.log('üìù –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', userMessage);

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);

    try {
      console.log('üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...');
      
      let activeChatId = chatId;
      
      // –ï—Å–ª–∏ —á–∞—Ç –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
      if (!activeChatId) {
        console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç');
        const newChat = await apiService.createChat(currentApostle.id);
        activeChatId = newChat.id;
        setChatId(activeChatId);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const response = await apiService.sendMessage(activeChatId, {
        content: userMessage.content,
      });
      
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API:', response);

      const assistantMessage: ChatMessage = {
        role: 'assistant',
        content: response.content,
        timestamp: new Date(response.createdAt),
      };

      console.log('ü§ñ –°–æ–∑–¥–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:', assistantMessage);

      setMessages(prev => [...prev, assistantMessage]);
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      
      // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É API –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      try {
        console.log('üîÑ –ü—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π API...');
        
        const fallbackResponse = await apiService.sendChatMessage({
          apostleId: currentApostle.id,
          message: userMessage.content,
          context: messages.slice(-5).map(m => `${m.role}: ${m.content}`),
        });
        
        if (fallbackResponse.success) {
          const assistantMessage: ChatMessage = {
            role: 'assistant',
            content: fallbackResponse.data.message,
            timestamp: new Date(),
          };
          
          setMessages(prev => [...prev, assistantMessage]);
          console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ fallback API');
        } else {
          throw new Error('Fallback API failed');
        }
      } catch (fallbackError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ fallback API:', fallbackError);
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
      }
    } finally {
      setIsLoading(false);
      console.log('üèÅ sendMessage –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
  };

  const scrollToEnd = () => {
    scrollViewRef.current?.scrollToEnd({ animated: true });
  };

  useEffect(() => {
    scrollToEnd();
  }, [messages]);

  if (!currentApostle) {
    return (
      <SafeAreaView style={[styles.container, { backgroundColor: theme.colors.background }]}>
        <View style={styles.noApostleContainer}>
          <Text style={[styles.noApostleText, { color: theme.colors.textSecondary }]}>
            –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –±–µ—Å–µ–¥—É
          </Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={[styles.container, { backgroundColor: theme.colors.background }]}>
      <KeyboardAvoidingView 
        style={styles.keyboardAvoid}
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      >
        {/* Header */}
        <View style={[styles.header, { backgroundColor: theme.colors.surface }]}>
          {navigation && (
            <TouchableOpacity 
              style={styles.backButton}
              onPress={() => navigation.goBack()}
            >
              <Text style={[styles.backButtonText, { color: theme.colors.primary }]}>
                ‚Üê –ù–∞–∑–∞–¥
              </Text>
            </TouchableOpacity>
          )}
          
          <View style={styles.apostleHeader}>
            <Text style={[styles.apostleIcon, { color: currentApostle.color }]}>
              {currentApostle.icon}
            </Text>
            <View style={styles.apostleInfo}>
              <Text style={[styles.apostleName, { color: theme.colors.text }]}>
                {currentApostle.name}
              </Text>
              <Text style={[styles.apostleStatus, { color: currentApostle.color }]}>
                –í —Å–µ—Ç–∏ ‚Ä¢ {currentApostle.archetype}
              </Text>
            </View>
          </View>
        </View>

        {/* Messages */}
        <ScrollView
          ref={scrollViewRef}
          style={styles.messagesContainer}
          showsVerticalScrollIndicator={false}
          onContentSizeChange={scrollToEnd}
        >
          {messages.map((message, index) => (
            <ChatBubble
              key={index}
              message={message}
              apostleColor={currentApostle.color}
            />
          ))}
          
          {isLoading && (
            <View style={styles.typingIndicator}>
              <View style={[styles.typingBubble, { backgroundColor: currentApostle.color + '20' }]}>
                <Text style={[styles.typingText, { color: theme.colors.textSecondary }]}>
                  {currentApostle.name} –ø–µ—á–∞—Ç–∞–µ—Ç...
                </Text>
              </View>
            </View>
          )}
        </ScrollView>

        {/* Input */}
        <View style={[styles.inputContainer, { backgroundColor: theme.colors.surface }]}>
          <TextInput
            style={[
              styles.textInput,
              {
                backgroundColor: theme.colors.background,
                color: theme.colors.text,
                borderColor: theme.colors.border,
              }
            ]}
            value={inputMessage}
            onChangeText={setInputMessage}
            placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
            placeholderTextColor={theme.colors.textSecondary}
            multiline
            maxLength={500}
            editable={!isLoading}
          />
          <TouchableOpacity
            style={[
              styles.sendButton,
              {
                backgroundColor: inputMessage.trim() && !isLoading 
                  ? currentApostle.color 
                  : theme.colors.border,
              }
            ]}
            onPress={() => {
              console.log('üñ±Ô∏è –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–∞—Ç–∞!');
              console.log('üñ±Ô∏è inputMessage:', inputMessage);
              console.log('üñ±Ô∏è isLoading:', isLoading);
              sendMessage();
            }}
            disabled={!inputMessage.trim() || isLoading}
          >
            <Text style={styles.sendButtonText}>üì§</Text>
          </TouchableOpacity>
        </View>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  keyboardAvoid: {
    flex: 1,
  },
  header: {
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(0,0,0,0.1)',
  },
  backButton: {
    paddingVertical: 8,
    paddingRight: 8,
    marginBottom: 8,
  },
  backButtonText: {
    fontSize: 16,
    fontWeight: '600',
  },
  apostleHeader: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  apostleIcon: {
    fontSize: 32,
    marginRight: 12,
  },
  apostleInfo: {
    flex: 1,
  },
  apostleName: {
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 2,
  },
  apostleStatus: {
    fontSize: 12,
    fontWeight: '500',
  },
  messagesContainer: {
    flex: 1,
    paddingVertical: 8,
  },
  noApostleContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  noApostleText: {
    fontSize: 16,
    textAlign: 'center',
  },
  typingIndicator: {
    paddingHorizontal: 16,
    marginVertical: 4,
    alignItems: 'flex-start',
  },
  typingBubble: {
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 16,
    borderBottomLeftRadius: 4,
  },
  typingText: {
    fontSize: 14,
    fontStyle: 'italic',
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'flex-end',
    padding: 16,
    paddingBottom: Platform.OS === 'ios' ? 34 : 16,
  },
  textInput: {
    flex: 1,
    borderWidth: 1,
    borderRadius: 20,
    paddingHorizontal: 16,
    paddingVertical: 12,
    marginRight: 12,
    maxHeight: 100,
    fontSize: 16,
  },
  sendButton: {
    width: 44,
    height: 44,
    borderRadius: 22,
    justifyContent: 'center',
    alignItems: 'center',
  },
  sendButtonText: {
    fontSize: 18,
  },
}); 