import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TextInput,
  TouchableOpacity,
  SafeAreaView,
  Alert,
} from 'react-native';
import { useThemeStore } from '../stores/themeStore';
import { useUserStore } from '../stores/userStore';
import { APOSTLES } from '../constants/apostles';
import { authAPI } from '../services/api';

export const AuthScreen: React.FC = () => {
  const { theme } = useThemeStore();
  const { setUser } = useUserStore();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [name, setName] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isRegistering, setIsRegistering] = useState(false);

  const handleAuth = async () => {
    if (!email.trim()) {
      Alert.alert('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ email');
      return;
    }

    if (!password.trim()) {
      Alert.alert('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
      return;
    }

    if (isRegistering && !name.trim()) {
      Alert.alert('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –∏–º—è');
      return;
    }

    if (password.length < 6) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
      return;
    }

    setIsLoading(true);
    console.log('üîê –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é:', { email, isRegistering });

    try {
      let response;
      
      if (isRegistering) {
        console.log('üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        response = await authAPI.register(email, password, name);
        
        // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ä–∞–∑—É –ª–æ–≥–∏–Ω–∏–º—Å—è
        console.log('üîê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
        response = await authAPI.login(email, password);
      } else {
        console.log('üîê –í—Ö–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        response = await authAPI.login(email, password);
      }

      console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', response);

      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–ø–æ—Å—Ç–æ–ª–æ–º
      const currentApostle = APOSTLES.find(a => a.id === response.user.currentApostleId) || APOSTLES[0];
      
      const user = {
        id: response.user.id,
        email: response.user.email,
        name: response.user.name,
        currentApostle,
        joinDate: new Date(response.user.joinDate || Date.now()),
        lastActiveDate: new Date(),
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–∫–µ–Ω
      setUser(user, response.token);
      
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ store:', user);
      console.log('üé´ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      Alert.alert(
        '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', 
        (error as Error).message || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É'
      );
    } finally {
      setIsLoading(false);
    }
  };

  // –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (—Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
  const handleDevLogin = async () => {
    console.log('‚ö° –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
    setIsLoading(true);
    
    try {
      const devEmail = `dev-${Date.now()}@apostles.app`;
      const devPassword = 'dev123456';
      const devName = '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫';
      
      console.log('üìù –°–æ–∑–¥–∞–µ–º dev –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', devEmail);
      
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º dev –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await authAPI.register(devEmail, devPassword, devName);
      
      // –õ–æ–≥–∏–Ω–∏–º—Å—è
      const response = await authAPI.login(devEmail, devPassword);
      
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const currentApostle = APOSTLES.find(a => a.id === 'peter') || APOSTLES[0];
      
      const user = {
        id: response.user.id,
        email: response.user.email,
        name: response.user.name,
        currentApostle,
        joinDate: new Date(),
        lastActiveDate: new Date(),
      };

      setUser(user, response.token);
      console.log('‚úÖ Dev –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ dev –≤—Ö–æ–¥–∞:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å dev –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <SafeAreaView style={[styles.container, { backgroundColor: theme.colors.background }]}>
      <View style={styles.content}>
        {/* Header */}
        <View style={styles.header}>
          <Text style={[styles.title, { color: theme.colors.text }]}>
            üôè –ü—É—Ç—å –ê–ø–æ—Å—Ç–æ–ª–æ–≤
          </Text>
          <Text style={[styles.subtitle, { color: theme.colors.textSecondary }]}>
            –î—É—Ö–æ–≤–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å AI-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞–º–∏
          </Text>
        </View>

        {/* Auth Form */}
        <View style={styles.form}>
          <TextInput
            style={[
              styles.input,
              {
                backgroundColor: theme.colors.surface,
                borderColor: theme.colors.border,
                color: theme.colors.text,
              }
            ]}
            placeholder="Email"
            placeholderTextColor={theme.colors.textSecondary}
            value={email}
            onChangeText={setEmail}
            keyboardType="email-address"
            autoCapitalize="none"
            editable={!isLoading}
          />

          <TextInput
            style={[
              styles.input,
              {
                backgroundColor: theme.colors.surface,
                borderColor: theme.colors.border,
                color: theme.colors.text,
              }
            ]}
            placeholder="–ü–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤)"
            placeholderTextColor={theme.colors.textSecondary}
            value={password}
            onChangeText={setPassword}
            secureTextEntry
            editable={!isLoading}
          />

          {isRegistering && (
            <TextInput
              style={[
                styles.input,
                {
                  backgroundColor: theme.colors.surface,
                  borderColor: theme.colors.border,
                  color: theme.colors.text,
                }
              ]}
              placeholder="–ò–º—è"
              placeholderTextColor={theme.colors.textSecondary}
              value={name}
              onChangeText={setName}
              editable={!isLoading}
            />
          )}

          <TouchableOpacity
            style={[
              styles.authButton,
              {
                backgroundColor: email.trim() && password.trim() && (!isRegistering || name.trim())
                  ? '#4ECDC4'
                  : theme.colors.border,
              }
            ]}
            onPress={handleAuth}
            disabled={!email.trim() || !password.trim() || (isRegistering && !name.trim()) || isLoading}
          >
            <Text style={[
              styles.authButtonText,
              { color: email.trim() && password.trim() && (!isRegistering || name.trim()) ? 'white' : theme.colors.textSecondary }
            ]}>
              {isLoading 
                ? '‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...' 
                : isRegistering 
                  ? 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' 
                  : 'üö™ –í–æ–π—Ç–∏'
              }
            </Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.switchMode}
            onPress={() => setIsRegistering(!isRegistering)}
            disabled={isLoading}
          >
            <Text style={[styles.switchModeText, { color: theme.colors.primary }]}>
              {isRegistering 
                ? '–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π—Ç–∏' 
                : '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'
              }
            </Text>
          </TouchableOpacity>
        </View>

        {/* Dev Login */}
        <View style={styles.devSection}>
          <View style={styles.divider}>
            <View style={[styles.dividerLine, { backgroundColor: theme.colors.border }]} />
            <Text style={[styles.dividerText, { color: theme.colors.textSecondary }]}>–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏</Text>
            <View style={[styles.dividerLine, { backgroundColor: theme.colors.border }]} />
          </View>

          <TouchableOpacity
            style={[styles.devButton, { backgroundColor: '#FF6B6B' }]}
            onPress={handleDevLogin}
            disabled={isLoading}
          >
            <Text style={styles.devButtonText}>
              ‚ö° –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ (Dev)
            </Text>
          </TouchableOpacity>
        </View>

        {/* Info */}
        <View style={styles.info}>
          <Text style={[styles.infoText, { color: theme.colors.textSecondary }]}>
            üîê –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è{'\n'}
            –ü–∞—Ä–æ–ª–∏ —Ö–µ—à–∏—Ä—É—é—Ç—Å—è —Å —Å–æ–ª—å—é{'\n'}
            JWT —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Å–µ—Å—Å–∏–π
          </Text>
        </View>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  content: {
    flex: 1,
    padding: 20,
    justifyContent: 'center',
  },
  header: {
    alignItems: 'center',
    marginBottom: 40,
  },
  title: {
    fontSize: 32,
    fontWeight: 'bold',
    marginBottom: 8,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    textAlign: 'center',
    lineHeight: 22,
  },
  form: {
    marginBottom: 30,
  },
  input: {
    borderWidth: 1,
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 14,
    fontSize: 16,
    marginBottom: 16,
  },
  authButton: {
    paddingHorizontal: 24,
    paddingVertical: 16,
    borderRadius: 12,
    alignItems: 'center',
    marginBottom: 16,
  },
  authButtonText: {
    fontSize: 18,
    fontWeight: '600',
  },
  switchMode: {
    alignItems: 'center',
  },
  switchModeText: {
    fontSize: 16,
    textDecorationLine: 'underline',
  },
  devSection: {
    marginBottom: 20,
  },
  divider: {
    flexDirection: 'row',
    alignItems: 'center',
    marginVertical: 20,
  },
  dividerLine: {
    flex: 1,
    height: 1,
  },
  dividerText: {
    marginHorizontal: 16,
    fontSize: 14,
  },
  devButton: {
    paddingHorizontal: 24,
    paddingVertical: 16,
    borderRadius: 12,
    alignItems: 'center',
  },
  devButtonText: {
    color: 'white',
    fontSize: 18,
    fontWeight: '600',
  },
  info: {
    alignItems: 'center',
    padding: 16,
    borderRadius: 8,
    backgroundColor: 'rgba(76, 205, 196, 0.1)',
  },
  infoText: {
    fontSize: 14,
    textAlign: 'center',
    lineHeight: 20,
  },
}); 