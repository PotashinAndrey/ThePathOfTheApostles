import React, { useState, useEffect, useCallback } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  SafeAreaView,
  TouchableOpacity,
  ActivityIndicator,
  RefreshControl,
  Alert,
} from 'react-native';
import { useThemeStore } from '../stores/themeStore';
import { useUserStore } from '../stores/userStore';
import { TaskWrapperCard } from '../components/TaskWrapperCard';
import { TaskWrapperInfo } from '../types/api';
import apiService from '../services/apiNew';

interface ActiveTasksScreenProps {
  navigation?: any;
}

export const ActiveTasksScreen: React.FC<ActiveTasksScreenProps> = ({ navigation }) => {
  const { theme } = useThemeStore();
  const { user } = useUserStore();
  const [activeTaskWrappers, setActiveTaskWrappers] = useState<TaskWrapperInfo[]>([]);
  const [completedTaskWrappers, setCompletedTaskWrappers] = useState<TaskWrapperInfo[]>([]);
  const [allTaskWrappers, setAllTaskWrappers] = useState<TaskWrapperInfo[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [selectedTab, setSelectedTab] = useState<'active' | 'completed' | 'all'>('active');

  const loadTaskWrappers = useCallback(async () => {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º TaskWrappers...');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ TaskWrapper
      const allTasks = await apiService.getAllTaskWrappers();
      console.log('üìù –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π:', allTasks.length);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
      const activeTasks = allTasks.filter(tw => tw.isActive && !tw.isCompleted);
      const completedTasks = allTasks.filter(tw => tw.isCompleted);
      
      console.log('‚ö° –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:', activeTasks.length);
      console.log('‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:', completedTasks.length);
      
      setAllTaskWrappers(allTasks);
      setActiveTaskWrappers(activeTasks);
      setCompletedTaskWrappers(completedTasks);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è');
    }
  }, []);

  useEffect(() => {
    const loadData = async () => {
      setIsLoading(true);
      await loadTaskWrappers();
      setIsLoading(false);
    };
    
    loadData();
  }, [loadTaskWrappers]);

  const handleRefresh = async () => {
    setIsRefreshing(true);
    await loadTaskWrappers();
    setIsRefreshing(false);
  };

  const handleTaskWrapperPress = (taskWrapper: TaskWrapperInfo) => {
    navigation?.navigate?.('PathTask', {
      taskWrapper: taskWrapper,
    });
  };

  const getCurrentTaskWrappers = () => {
    switch (selectedTab) {
      case 'active':
        return activeTaskWrappers;
      case 'completed':
        return completedTaskWrappers;
      case 'all':
        return allTaskWrappers;
      default:
        return activeTaskWrappers;
    }
  };

  const getTabTitle = () => {
    switch (selectedTab) {
      case 'active':
        return `–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è (${activeTaskWrappers.length})`;
      case 'completed':
        return `–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ (${completedTaskWrappers.length})`;
      case 'all':
        return `–í—Å–µ –∑–∞–¥–∞–Ω–∏—è (${allTaskWrappers.length})`;
      default:
        return '–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è';
    }
  };

  const getEmptyMessage = () => {
    switch (selectedTab) {
      case 'active':
        return '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "–ü—É—Ç—å" —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è.';
      case 'completed':
        return '–í—ã –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.\n–ü—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π!';
      case 'all':
        return '–ó–∞–¥–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n–í–æ–∑–º–æ–∂–Ω–æ, –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –∑–∞–¥–∞–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ.';
      default:
        return '–ó–∞–¥–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ';
    }
  };

  if (isLoading) {
    return (
      <SafeAreaView style={[styles.container, { backgroundColor: theme.colors.background }]}>
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color={theme.colors.primary} />
          <Text style={[styles.loadingText, { color: theme.colors.textSecondary }]}>
            –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è...
          </Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={[styles.container, { backgroundColor: theme.colors.background }]}>
      {/* Header */}
      <View style={[styles.header, { backgroundColor: theme.colors.surface }]}>
        <Text style={[styles.headerTitle, { color: theme.colors.text }]}>
          –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è
        </Text>
        
        <TouchableOpacity
          style={[styles.refreshButton, { borderColor: theme.colors.primary }]}
          onPress={handleRefresh}
          disabled={isRefreshing}
        >
          {isRefreshing ? (
            <ActivityIndicator size="small" color={theme.colors.primary} />
          ) : (
            <Text style={[styles.refreshButtonText, { color: theme.colors.primary }]}>
              üîÑ
            </Text>
          )}
        </TouchableOpacity>
      </View>

      {/* Tabs */}
      <View style={[styles.tabsContainer, { backgroundColor: theme.colors.surface }]}>
        <TouchableOpacity
          style={[
            styles.tab,
            selectedTab === 'active' && { backgroundColor: theme.colors.primary + '20' }
          ]}
          onPress={() => setSelectedTab('active')}
        >
          <Text style={[
            styles.tabText,
            { color: selectedTab === 'active' ? theme.colors.primary : theme.colors.textSecondary }
          ]}>
            –ê–∫—Ç–∏–≤–Ω—ã–µ ({activeTaskWrappers.length})
          </Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={[
            styles.tab,
            selectedTab === 'completed' && { backgroundColor: theme.colors.success + '20' }
          ]}
          onPress={() => setSelectedTab('completed')}
        >
          <Text style={[
            styles.tabText,
            { color: selectedTab === 'completed' ? theme.colors.success : theme.colors.textSecondary }
          ]}>
            –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ ({completedTaskWrappers.length})
          </Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={[
            styles.tab,
            selectedTab === 'all' && { backgroundColor: theme.colors.textSecondary + '20' }
          ]}
          onPress={() => setSelectedTab('all')}
        >
          <Text style={[
            styles.tabText,
            { color: selectedTab === 'all' ? theme.colors.text : theme.colors.textSecondary }
          ]}>
            –í—Å–µ ({allTaskWrappers.length})
          </Text>
        </TouchableOpacity>
      </View>

      {/* Content */}
      <ScrollView
        style={styles.content}
        showsVerticalScrollIndicator={false}
        refreshControl={
          <RefreshControl
            refreshing={isRefreshing}
            onRefresh={handleRefresh}
            colors={[theme.colors.primary]}
            tintColor={theme.colors.primary}
          />
        }
      >
        {/* Section Title */}
        <View style={styles.sectionHeader}>
          <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>
            {getTabTitle()}
          </Text>
        </View>

        {/* Task Wrappers List */}
        {getCurrentTaskWrappers().length > 0 ? (
          getCurrentTaskWrappers().map((taskWrapper) => (
            <TaskWrapperCard
              key={taskWrapper.id}
              taskWrapper={taskWrapper}
              onPress={handleTaskWrapperPress}
              onStatusChange={loadTaskWrappers}
              showActions={true}
            />
          ))
        ) : (
          <View style={styles.emptyContainer}>
            <Text style={[styles.emptyIcon]}>
              {selectedTab === 'active' ? 'üìã' : selectedTab === 'completed' ? 'üéâ' : 'üìö'}
            </Text>
            <Text style={[styles.emptyTitle, { color: theme.colors.text }]}>
              {selectedTab === 'active' ? '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π' : 
               selectedTab === 'completed' ? '–ü–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π' : 
               '–ó–∞–¥–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}
            </Text>
            <Text style={[styles.emptyMessage, { color: theme.colors.textSecondary }]}>
              {getEmptyMessage()}
            </Text>
            
            {selectedTab === 'active' && (
              <TouchableOpacity
                style={[styles.goToPathButton, { backgroundColor: theme.colors.primary }]}
                onPress={() => navigation?.navigate?.('Path')}
              >
                <Text style={styles.goToPathButtonText}>
                  –ü–µ—Ä–µ–π—Ç–∏ –∫ –ü—É—Ç–∏ –ê–ø–æ—Å—Ç–æ–ª–æ–≤
                </Text>
              </TouchableOpacity>
            )}
          </View>
        )}

        {/* Bottom Spacing */}
        <View style={styles.bottomSpacing} />
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },

  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(0,0,0,0.1)',
  },

  headerTitle: {
    fontSize: 20,
    fontWeight: 'bold',
  },

  refreshButton: {
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 8,
    borderWidth: 1,
  },

  refreshButtonText: {
    fontSize: 16,
    fontWeight: '600',
  },

  tabsContainer: {
    flexDirection: 'row',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(0,0,0,0.1)',
  },

  tab: {
    flex: 1,
    paddingVertical: 8,
    paddingHorizontal: 12,
    borderRadius: 8,
    alignItems: 'center',
    marginHorizontal: 4,
  },

  tabText: {
    fontSize: 12,
    fontWeight: '600',
    textAlign: 'center',
  },

  content: {
    flex: 1,
  },

  sectionHeader: {
    paddingHorizontal: 16,
    paddingVertical: 12,
  },

  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
  },

  emptyContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 32,
    paddingTop: 80,
  },

  emptyIcon: {
    fontSize: 48,
    marginBottom: 16,
  },

  emptyTitle: {
    fontSize: 20,
    fontWeight: '600',
    marginBottom: 8,
    textAlign: 'center',
  },

  emptyMessage: {
    fontSize: 16,
    lineHeight: 24,
    textAlign: 'center',
    marginBottom: 24,
  },

  goToPathButton: {
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 12,
  },

  goToPathButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },

  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    gap: 16,
  },

  loadingText: {
    fontSize: 16,
    fontWeight: '500',
  },

  bottomSpacing: {
    height: 20,
  },
}); 