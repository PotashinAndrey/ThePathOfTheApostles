import axios from 'axios';
import { CONFIG } from '../constants/config';
import { APOSTLES } from '../constants/apostles';
import { PETER_WEEKLY_MISSION, WeeklyTask } from '../constants/peterWeeklyTasks';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ URL –¥–ª—è API
const API_BASE_URL = CONFIG.API_BASE_URL;

const api = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
api.interceptors.response.use(
  (response) => response,
  (error) => {
    console.error('API Error:', error);
    return Promise.reject(error);
  }
);

// –¢–∏–ø—ã –¥–ª—è API
interface ChatMessage {
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

interface ChatRequest {
  apostleId: string;
  message: string;
  context?: string[];
  userId?: string;
  additionalContext?: string;
}

interface ChatResponse {
  message: string;
  apostleId: string;
  timestamp: string;
}

interface MissionRequest {
  apostleId: string;
  userId: string;
  difficulty: 'easy' | 'medium' | 'hard';
}

interface MissionResponse {
  id: string;
  title: string;
  description: string;
  tasks: string[];
  duration: number; // –¥–Ω–∏
  apostleId: string;
}

// API —Ñ—É–Ω–∫—Ü–∏–∏ —Å fallback –Ω–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
export const chatAPI = {
  sendMessage: async (request: ChatRequest): Promise<ChatResponse> => {
    console.log('üåê chatAPI.sendMessage –≤—ã–∑–≤–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', request);
    console.log('üîß CONFIG.USE_OFFLINE_MODE:', CONFIG.USE_OFFLINE_MODE);
    
    if (CONFIG.USE_OFFLINE_MODE) {
      console.log('üì¥ –†–∞–±–æ—Ç–∞–µ–º –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ');
      // –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const apostle = APOSTLES.find(a => a.id === request.apostleId);
      if (!apostle) {
        console.error('‚ùå –ê–ø–æ—Å—Ç–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', request.apostleId);
        throw new Error('–ê–ø–æ—Å—Ç–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω –∞–ø–æ—Å—Ç–æ–ª:', apostle.name);
      
      // –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
      let response = apostle.welcomeMessage || '–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞ –ø—É—Ç–∏.';
      
      if (request.message.toLowerCase().includes('–ª–µ–Ω—å') || request.message.toLowerCase().includes('—Å–ª–∞–±')) {
        response = "–°–ª–∞–±–æ—Å—Ç—å - —ç—Ç–æ –≤—ã–±–æ—Ä. –ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å: –±—ã—Ç—å –∫–∞–º–Ω–µ–º –∏–ª–∏ –ø–µ—Å–∫–æ–º. –ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å —Å–µ–≥–æ–¥–Ω—è?";
      } else if (request.message.toLowerCase().includes('–¥–∏—Å—Ü–∏–ø–ª–∏–Ω') || request.message.toLowerCase().includes('–ø—Ä–∏–≤—ã—á–∫')) {
        response = "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ - —ç—Ç–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç. –ü–æ—Å—Ç—Ä–æ–π –µ—ë –ø–æ –∫–∏—Ä–ø–∏—á–∏–∫—É, –¥–µ–Ω—å –∑–∞ –¥–Ω–µ–º. –ù–∞—á–Ω–∏ —Å –º–∞–ª–æ–≥–æ, –Ω–æ –Ω–∞—á–Ω–∏ —Å–µ–≥–æ–¥–Ω—è.";
      } else if (request.message.toLowerCase().includes('–ø–æ–º–æ') || request.message.toLowerCase().includes('—Å–æ–≤–µ')) {
        response = "–ú–æ–π —Å–æ–≤–µ—Ç –ø—Ä–æ—Å—Ç: –¥–µ–ª–∞–π —Ç–æ, —á—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å, –∞ –Ω–µ —Ç–æ, —á—Ç–æ —Ö–æ—á–µ—Ç—Å—è. –°–∏–ª–∞ –≤ –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–µ, –∞ –Ω–µ –≤ –ø–æ—Ä—ã–≤–∞—Ö.";
      }
      
      const result = {
        message: response,
        apostleId: request.apostleId,
        timestamp: new Date().toISOString()
      };
      
      console.log('üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ñ–ª–∞–π–Ω –æ—Ç–≤–µ—Ç:', result);
      return result;
    }
    
    console.log('üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É');
    try {
      console.log('üì° –î–µ–ª–∞–µ–º POST –∑–∞–ø—Ä–æ—Å –∫ /chat');
      console.log('üîó URL:', `${api.defaults.baseURL}/chat`);
      console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', request);
      
      const response = await api.post('/chat', request);
      
      console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);
      console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
      
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞:', error);
      console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ API:', {
        message: (error as any)?.message,
        status: (error as any)?.response?.status,
        statusText: (error as any)?.response?.statusText,
        data: (error as any)?.response?.data,
        url: (error as any)?.config?.url,
        method: (error as any)?.config?.method
      });
      
      console.warn('üîÑ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º');
      // Recursive call –Ω–æ —Å —Ñ–ª–∞–≥–æ–º offline
      const originalMode = CONFIG.USE_OFFLINE_MODE;
      CONFIG.USE_OFFLINE_MODE = true;
      const result = await chatAPI.sendMessage(request);
      CONFIG.USE_OFFLINE_MODE = originalMode;
      return result;
    }
  },
};

export const missionAPI = {
  generateMission: async (request: MissionRequest): Promise<MissionResponse> => {
    if (CONFIG.USE_OFFLINE_MODE) {
      // –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è
      return {
        id: `mission-${Date.now()}`,
        title: "–ù–µ–¥–µ–ª—è –ö–∞–º–Ω—è - –ü—É—Ç—å –ü–µ—Ç—Ä–∞",
        description: "7-–¥–Ω–µ–≤–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ –∏ —Å—Ç–æ–π–∫–æ—Å—Ç–∏ –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –ü–µ—Ç—Ä–∞ –ù–µ—Ä—É—à–∏–º–æ–≥–æ",
        tasks: [
          "–î–µ–Ω—å 1: –ö–ª—è—Ç–≤–∞ —Å–∞–º–æ–º—É —Å–µ–±–µ",
          "–î–µ–Ω—å 2: –£—Ç—Ä–µ–Ω–Ω—è—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞", 
          "–î–µ–Ω—å 3: –£–∫—Ä–æ—â–µ–Ω–∏–µ —Ö–∞–æ—Å–∞",
          "–î–µ–Ω—å 4: –ò—Å–ø—ã—Ç–∞–Ω–∏–µ —Å—Ç–æ–π–∫–æ—Å—Ç–∏",
          "–î–µ–Ω—å 5: –ú–æ–ª—á–∞–Ω–∏–µ —Å–∏–ª—ã",
          "–î–µ–Ω—å 6: –†–∞–±–æ—Ç–∞ —Å –Ω–µ—É–¥–∞—á–µ–π",
          "–î–µ–Ω—å 7: –û–±–µ—Ç –Ω–∞ –±—É–¥—É—â–µ–µ"
        ],
        duration: 7,
        apostleId: request.apostleId
      };
    }
    
    try {
      const response = await api.post('/missions/generate', request);
      return response.data;
    } catch (error) {
      console.warn('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º');
      const originalMode = CONFIG.USE_OFFLINE_MODE;
      CONFIG.USE_OFFLINE_MODE = true;
      const result = await missionAPI.generateMission(request);
      CONFIG.USE_OFFLINE_MODE = originalMode;
      return result;
    }
  },
  
  getMissions: async (userId: string) => {
    if (CONFIG.USE_OFFLINE_MODE) {
      return [];
    }
    
    try {
      const response = await api.get(`/missions/${userId}`);
      return response.data;
    } catch (error) {
      console.warn('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return [];
    }
  },
  
  updateMissionProgress: async (missionId: string, progress: number) => {
    if (CONFIG.USE_OFFLINE_MODE) {
      console.log(`–ü—Ä–æ–≥—Ä–µ—Å—Å –º–∏—Å—Å–∏–∏ ${missionId}: ${progress}%`);
      return { success: true };
    }
    
    try {
      const response = await api.patch(`/missions/${missionId}`, { progress });
      return response.data;
    } catch (error) {
      console.warn('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return { success: false };
    }
  },
};

export const userAPI = {
  getProfile: async (userId: string) => {
    if (CONFIG.USE_OFFLINE_MODE) {
      return {
        id: userId,
        name: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫',
        email: 'test@example.com',
        currentApostleId: 'peter',
        streak: 0,
        totalDays: 0
      };
    }
    
    try {
      const response = await api.get(`/users/${userId}`);
      return response.data;
    } catch (error) {
      console.warn('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return null;
    }
  },
  
  updateProfile: async (userId: string, data: any) => {
    if (CONFIG.USE_OFFLINE_MODE) {
      console.log(`–ü—Ä–æ—Ñ–∏–ª—å ${userId} –æ–±–Ω–æ–≤–ª–µ–Ω:`, data);
      return { success: true };
    }
    
    try {
      const response = await api.patch(`/users/${userId}`, data);
      return response.data;
    } catch (error) {
      console.warn('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return { success: false };
    }
  },
  
  getStats: async (userId: string) => {
    if (CONFIG.USE_OFFLINE_MODE) {
      return {
        totalMissions: 1,
        completedMissions: 0,
        averageProgress: 0,
        longestStreak: 0
      };
    }
    
    try {
      const response = await api.get(`/users/${userId}/stats`);
      return response.data;
    } catch (error) {
      console.warn('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return null;
    }
  },
};

export const apostleAPI = {
  getApostles: async () => {
    if (CONFIG.USE_OFFLINE_MODE) {
      return APOSTLES;
    }
    
    try {
      const response = await api.get('/apostles');
      return response.data;
    } catch (error) {
      console.warn('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      return APOSTLES;
    }
  },
  
  getApostle: async (apostleId: string) => {
    if (CONFIG.USE_OFFLINE_MODE) {
      return APOSTLES.find(a => a.id === apostleId) || null;
    }
    
    try {
      const response = await api.get(`/apostles/${apostleId}`);
      return response.data;
    } catch (error) {
      console.warn('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      return APOSTLES.find(a => a.id === apostleId) || null;
    }
  },

  getWeeklyTasks: async (apostleId: string): Promise<WeeklyTask[]> => {
    if (CONFIG.USE_OFFLINE_MODE) {
      if (apostleId === 'peter') {
        return PETER_WEEKLY_MISSION.tasks;
      }
      return [];
    }
    
    try {
      const response = await api.get(`/apostles/${apostleId}/weekly-tasks`);
      return response.data;
    } catch (error) {
      console.warn('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      if (apostleId === 'peter') {
        return PETER_WEEKLY_MISSION.tasks;
      }
      return [];
    }
  },
};

export const createOrUpdateUser = async (user: {
  id: string;
  email: string;
  name: string;
  currentApostleId?: string;
}) => {
  console.log('üë§ API: –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ backend:', user);
  
  try {
    const response = await fetch(`${API_BASE_URL}/users`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        id: user.id,
        email: user.email,
        name: user.name,
        currentApostleId: user.currentApostleId,
      }),
    });

    console.log('üì° API Response status:', response.status);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå API Error response:', errorText);
      throw new Error(`HTTP error! status: ${response.status}, body: ${errorText}`);
    }

    const data = await response.json();
    console.log('‚úÖ API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω:', data);
    return data;
  } catch (error) {
    console.error('‚ùå API Error –≤ createOrUpdateUser:', error);
    throw error;
  }
};

export const getUser = async (userId: string) => {
  console.log('üë§ API: –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ backend:', userId);
  
  try {
    const response = await fetch(`${API_BASE_URL}/users?id=${userId}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });

    console.log('üì° API Response status:', response.status);
    
    if (!response.ok) {
      if (response.status === 404) {
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ backend');
        return null;
      }
      const errorText = await response.text();
      console.error('‚ùå API Error response:', errorText);
      throw new Error(`HTTP error! status: ${response.status}, body: ${errorText}`);
    }

    const data = await response.json();
    console.log('‚úÖ API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω:', data);
    return data;
  } catch (error) {
    console.error('‚ùå API Error –≤ getUser:', error);
    throw error;
  }
};

export type { ChatMessage, ChatRequest, ChatResponse, MissionRequest, MissionResponse, WeeklyTask };

// –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export const authAPI = {
  register: async (email: string, password: string, name: string) => {
    console.log('üìù API: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { email, name });
    
    try {
      const response = await fetch(`${API_BASE_URL}/auth/register`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password, name }),
      });

      console.log('üì° API Response status:', response.status);
      
      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå API Error response:', errorData);
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('‚úÖ API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', data);
      return data;
    } catch (error) {
      console.error('‚ùå API Error –≤ register:', error);
      throw error;
    }
  },

  login: async (email: string, password: string) => {
    console.log('üîê API: –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', email);
    
    try {
      const response = await fetch(`${API_BASE_URL}/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password }),
      });

      console.log('üì° API Response status:', response.status);
      
      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå API Error response:', errorData);
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('‚úÖ API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', data);
      return data;
    } catch (error) {
      console.error('‚ùå API Error –≤ login:', error);
      throw error;
    }
  },
};

// –û–±–Ω–æ–≤–ª—è–µ–º chatAPI –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏
export const chatAPIWithAuth = {
  sendMessage: async (request: ChatRequest, token?: string): Promise<ChatResponse> => {
    console.log('üåê chatAPIWithAuth.sendMessage –≤—ã–∑–≤–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', request);
    console.log('üîß CONFIG.USE_OFFLINE_MODE:', CONFIG.USE_OFFLINE_MODE);
    console.log('üé´ –¢–æ–∫–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω:', !!token);
    
    if (CONFIG.USE_OFFLINE_MODE) {
      console.log('üì¥ –†–∞–±–æ—Ç–∞–µ–º –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ');
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
      return chatAPI.sendMessage(request);
    }
    
    console.log('üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π');
    try {
      const headers: Record<string, string> = {
        'Content-Type': 'application/json',
      };
      
      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
        console.log('üé´ –î–æ–±–∞–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization');
      }
      
      console.log('üì° –î–µ–ª–∞–µ–º POST –∑–∞–ø—Ä–æ—Å –∫ /chat');
      console.log('üîó URL:', `${API_BASE_URL}/chat`);
      console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', { ...request, userId: undefined }); // –£–±–∏—Ä–∞–µ–º userId –∏–∑ –ª–æ–≥–æ–≤
      
      const response = await fetch(`${API_BASE_URL}/chat`, {
        method: 'POST',
        headers,
        body: JSON.stringify({
          apostleId: request.apostleId,
          message: request.message,
          context: request.context,
          additionalContext: request.additionalContext,
          // –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º userId - –æ–Ω –±—É–¥–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ —Ç–æ–∫–µ–Ω–∞
        }),
      });
      
      console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞, —Å—Ç–∞—Ç—É—Å:', response.status);
      
      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå API Error response:', errorData);
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      console.log('üì• –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);
      
      return data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞:', error);
      console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ API:', {
        message: (error as any)?.message,
        status: (error as any)?.response?.status,
        statusText: (error as any)?.response?.statusText,
      });
      
      console.warn('üîÑ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º');
      // Fallback –Ω–∞ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º
      const originalMode = CONFIG.USE_OFFLINE_MODE;
      CONFIG.USE_OFFLINE_MODE = true;
      const result = await chatAPI.sendMessage(request);
      CONFIG.USE_OFFLINE_MODE = originalMode;
      return result;
    }
  },
};

// API –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
export const dailyTaskAPI = {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
  getActiveTask: async (token?: string) => {
    console.log('üìÖ API: –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ');
    
    if (CONFIG.USE_OFFLINE_MODE) {
      return {
        hasActiveTask: false,
        currentTask: null,
        nextTask: null,
        apostleProgress: {
          apostleId: 'peter',
          currentDay: 1,
          completedTasks: 0,
          totalTasks: 7
        }
      };
    }
    
    try {
      const headers: Record<string, string> = {
        'Content-Type': 'application/json',
      };
      
      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
      }
      
      const response = await fetch(`${API_BASE_URL}/daily-tasks/active`, {
        method: 'GET',
        headers,
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå API Error response:', errorData);
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      console.log('‚úÖ API: –ê–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:', data);
      return data;
    } catch (error) {
      console.error('‚ùå API Error –≤ getActiveTask:', error);
      throw error;
    }
  },

  // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
  activateFirstTask: async (token?: string) => {
    console.log('üöÄ API: –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ');
    
    if (CONFIG.USE_OFFLINE_MODE) {
      return {
        message: 'First task activated successfully',
        task: {
          id: 'task-1',
          name: '–ü—Ä–∏–Ω—è—Ç–∏–µ –≤—ã–∑–æ–≤–∞',
          description: '–ù–∞–π–¥–∏ –æ–¥–Ω—É –ø—Ä–∏–≤—ã—á–∫—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±–µ –º–µ—à–∞–µ—Ç, –∏ –æ—Ç–∫–∞–∂–∏—Å—å –æ—Ç –Ω–µ—ë –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å.',
          dayNumber: 1,
          status: 'active'
        }
      };
    }
    
    try {
      const headers: Record<string, string> = {
        'Content-Type': 'application/json',
      };
      
      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
      }
      
      const response = await fetch(`${API_BASE_URL}/daily-tasks/start`, {
        method: 'POST',
        headers,
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå API Error response:', errorData);
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      console.log('‚úÖ API: –ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ:', data);
      return data;
    } catch (error) {
      console.error('‚ùå API Error –≤ activateFirstTask:', error);
      throw error;
    }
  },

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
  completeTask: async (taskId: string, content?: string, notes?: string, token?: string) => {
    console.log('‚úÖ API: –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ:', taskId);
    
    if (CONFIG.USE_OFFLINE_MODE) {
      console.log('üì¥ –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º: –ó–∞–¥–∞–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ');
      return {
        success: true,
        message: 'Task completed successfully'
      };
    }
    
    try {
      const headers: Record<string, string> = {
        'Content-Type': 'application/json',
      };
      
      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
      }
      
      const response = await fetch(`${API_BASE_URL}/daily-tasks/${taskId}/complete`, {
        method: 'POST',
        headers,
        body: JSON.stringify({
          content,
          notes
        }),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå API Error response:', errorData);
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      console.log('‚úÖ API: –ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', data);
      return data;
    } catch (error) {
      console.error('‚ùå API Error –≤ completeTask:', error);
      throw error;
    }
  },

  // –ü—Ä–æ–ø—É—Å–∫ –∑–∞–¥–∞–Ω–∏—è
  skipTask: async (taskId: string, reason?: string, token?: string) => {
    console.log('‚è≠Ô∏è API: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ:', taskId);
    
    if (CONFIG.USE_OFFLINE_MODE) {
      console.log('üì¥ –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º: –ó–∞–¥–∞–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ');
      return {
        success: true,
        message: 'Task skipped successfully'
      };
    }
    
    try {
      const headers: Record<string, string> = {
        'Content-Type': 'application/json',
      };
      
      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
      }
      
      const response = await fetch(`${API_BASE_URL}/daily-tasks/${taskId}/skip`, {
        method: 'POST',
        headers,
        body: JSON.stringify({
          reason
        }),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå API Error response:', errorData);
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      console.log('‚úÖ API: –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ:', data);
      return data;
    } catch (error) {
      console.error('‚ùå API Error –≤ skipTask:', error);
      throw error;
    }
  },
}; 