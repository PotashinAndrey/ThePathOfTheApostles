import { useEffect } from 'react';
import { useUserStore } from '../stores/userStore';
import apiService from '../services/apiNew';

/**
 * Hook –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ API –∑–∞–ø—Ä–æ—Å–∞—Ö
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ 401 –æ—à–∏–±–∫–µ
 */
export const useAuthInterceptor = () => {
  const { logout, checkTokenExpiry, isAuthenticated } = useUserStore();

  useEffect(() => {
    // Interceptor –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ 401 –æ—à–∏–±–æ–∫
    const setupInterceptor = () => {
      // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π fetch –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const originalFetch = window.fetch;
      
      window.fetch = async (input: RequestInfo | URL, init?: RequestInit) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        if (isAuthenticated()) {
          const tokenValid = checkTokenExpiry();
          if (!tokenValid) {
            console.log('üîê useAuthInterceptor: –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å');
            throw new Error('–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
          }
        }

        try {
          const response = await originalFetch(input, init);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ 401 –æ—à–∏–±–∫—É
          if (response.status === 401) {
            console.log('üîê useAuthInterceptor: –ü–æ–ª—É—á–µ–Ω–∞ 401 –æ—à–∏–±–∫–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º logout');
            logout();
            throw new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
          }
          
          return response;
        } catch (error) {
          // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
          if (isAuthenticated() && error instanceof TypeError) {
            console.log('üîê useAuthInterceptor: –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω');
            checkTokenExpiry();
          }
          
          throw error;
        }
      };
    };

    setupInterceptor();

    // Cleanup –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –º—ã –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π fetch
    return () => {
      // –ú–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π fetch, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    };
  }, [logout, checkTokenExpiry, isAuthenticated]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const checkAuth = () => {
    if (!isAuthenticated()) {
      console.log('üîê useAuthInterceptor: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return false;
    }
    
    const tokenValid = checkTokenExpiry();
    if (!tokenValid) {
      console.log('üîê useAuthInterceptor: –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω');
      return false;
    }
    
    return true;
  };

  return {
    checkAuth,
  };
}; 