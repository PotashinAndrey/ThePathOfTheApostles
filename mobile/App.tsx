import React, { useEffect } from 'react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { Platform } from 'react-native';
import { AppNavigator } from './src/navigation/AppNavigator';
import { useTaskWrapperSync } from './src/hooks/useTaskWrapperSync';

// Create a client
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      retry: 2,
      staleTime: 5 * 60 * 1000, // 5 minutes
    },
  },
});

// Error boundary –¥–ª—è –æ—Ç–ª–æ–≤–∞ –æ—à–∏–±–æ–∫
class ErrorBoundary extends React.Component<
  { children: React.ReactNode },
  { hasError: boolean; error?: Error }
> {
  constructor(props: { children: React.ReactNode }) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error) {
    console.error('üö® Error Boundary –ø–æ–π–º–∞–ª –æ—à–∏–±–∫—É:', error);
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: any) {
    console.error('üö® Error Boundary componentDidCatch:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      const { View, Text, TouchableOpacity } = require('react-native');
      return (
        <View style={{
          flex: 1,
          padding: 20,
          backgroundColor: '#ff6b6b',
          justifyContent: 'center',
          alignItems: 'center'
        }}>
          <Text style={{
            fontSize: 24,
            color: 'white',
            fontWeight: 'bold',
            marginBottom: 20,
            textAlign: 'center'
          }}>
            üö® –û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          </Text>
          <Text style={{
            fontSize: 16,
            color: 'white',
            marginBottom: 10,
            textAlign: 'center'
          }}>
            Platform: {Platform.OS}
          </Text>
          <Text style={{
            fontSize: 14,
            color: 'white',
            marginBottom: 10,
            textAlign: 'center'
          }}>
            Error: {this.state.error?.message}
          </Text>
          <TouchableOpacity
            style={{
              padding: 15,
              backgroundColor: 'white',
              borderRadius: 8,
              marginTop: 20
            }}
            onPress={() => {
              // –î–ª—è React Native –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º
              console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
            }}
          >
            <Text style={{
              color: '#ff6b6b',
              fontSize: 16,
              fontWeight: 'bold'
            }}>
              üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
            </Text>
          </TouchableOpacity>
        </View>
      );
    }

    return this.props.children;
  }
}

export default function App() {
  useEffect(() => {
    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    const handleError = (event: ErrorEvent) => {
      console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ JavaScript:', event.error);
      console.error('–§–∞–π–ª:', event.filename, '–°—Ç—Ä–æ–∫–∞:', event.lineno);
    };

    const handlePromiseRejection = (event: PromiseRejectionEvent) => {
      console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Promise:', event.reason);
    };

    if (Platform.OS === 'web') {
      window.addEventListener('error', handleError);
      window.addEventListener('unhandledrejection', handlePromiseRejection);

      return () => {
        window.removeEventListener('error', handleError);
        window.removeEventListener('unhandledrejection', handlePromiseRejection);
      };
    }
  }, []);

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ö—É–∫–æ–≤ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
  const AppWrapper = () => {
    useTaskWrapperSync(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è TaskWrapper'–æ–≤
    return <AppNavigator />;
  };

  return (
    <ErrorBoundary>
      <QueryClientProvider client={queryClient}>
        <AppWrapper />
      </QueryClientProvider>
    </ErrorBoundary>
  );
}
